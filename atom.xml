<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苍穹之下</title>
  
  <subtitle>a little blog</subtitle>
  <link href="http://mail.zyjcould.ltd/atom.xml" rel="self"/>
  
  <link href="http://mail.zyjcould.ltd/"/>
  <updated>2022-04-19T11:50:41.639Z</updated>
  <id>http://mail.zyjcould.ltd/</id>
  
  <author>
    <name>Jack-zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FLIP</title>
    <link href="http://mail.zyjcould.ltd/2022/04/19/flip/"/>
    <id>http://mail.zyjcould.ltd/2022/04/19/flip/</id>
    <published>2022-04-19T09:02:23.000Z</published>
    <updated>2022-04-19T11:50:41.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p><code>Element.getBoundingClientRect()</code>:返回元素的大小及其<strong>相对于视口</strong>的位置</p></blockquote><ul><li><p>如果是标准盒子模型,元素的尺寸等于<code>width/height + padding + border-width</code>的总和.如果<code>box-sizing: border-box</code>,元素的的尺寸等于<code>width/height</code>.</p></li><li><p><code>DOMRect</code>:返回一个DOMRect对象.(DOMRect)代表一个矩形,表示盒子的类型右返回它的属性和方法决定</p></li><li><p><img src="././rect.png" alt=" "></p></li><li><p><strong>原点</strong>:当前视口的左上角(0,0)</p><ul><li><code>x</code>:矩形盒子的左边框(border)距离视口的左边的距离(可能为负数:当视口在盒子右边的时候)</li><li><code>y</code>:矩形盒子的上边框距离视口上边的距离(可能为负数:当漱口在盒子下边的时候)</li><li><code>height</code>:矩形盒子的高度</li><li><code>width</code>:矩形盒子的宽度</li><li><code>left</code>:视口到矩形盒子左边框的距离</li><li><code>right</code>:视口到矩形盒子有边框的距离</li><li><code>top</code>:视口到矩形盒子上边框的距离</li><li><code>bottom</code>:视口到矩形盒子下边框的距离</li></ul></li></ul><blockquote><p><code>Element.getClientRects()</code>:方法返回一个指向客户端中每一个盒子的边界矩形的矩形集合</p></blockquote><ul><li>返回<code>ClientRectList</code>:这是一个DOMRect的集合对象,属性和<code>getBoundingClientRect()</code>返回的方法一样<ul><li>如果是块级元素,只会返回一个数组,数组的内容和<code>getBoundingClientRect</code>一样</li><li>实际上,该方法主要用于内联元素,内联元素有多少行,该方法返回的对象有多少个成员.这个方法主要用于判断<strong>行内元素</strong>是否换行,以及<strong>行内元素</strong>的每一行的位置偏移</li></ul></li></ul><blockquote><p><code>DocumentOrShadowRoot.elementFromPoint(x: number, y: number): Element</code>:方法返回给定坐标点下最上层的<code>element</code>元素</p></blockquote><ul><li><p><strong>DocumentOrShadowRoot</strong>为<code>document</code>或者<code>shadowRoot</code>的接口</p></li><li><p>如果指定的坐标点在文档的可视范围外,或者两个坐标都是负数,那么结果返回null</p></li><li><p>如果该位置有多个元素层叠,则返回最上层的元素</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;:返回元素的大小及</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="HTML" scheme="http://mail.zyjcould.ltd/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Jest</title>
    <link href="http://mail.zyjcould.ltd/2022/04/16/jest/"/>
    <id>http://mail.zyjcould.ltd/2022/04/16/jest/</id>
    <published>2022-04-16T13:34:37.000Z</published>
    <updated>2022-04-17T06:46:25.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化一个test项目"><a href="#初始化一个test项目" class="headerlink" title="初始化一个test项目"></a>初始化一个test项目</h2><ol><li><code>npm i jest -D</code>:下载jest测试框架</li><li><code>npx jest --init</code>.初始化一个jest测试文件<ul><li>测试文件可以是ts或者js结尾的<code>jest.config.(js|ts)</code></li></ul></li><li>在<code>package.json</code>的脚本中写入<code>&quot;test&quot;:&quot;jest&quot;</code>配置<ul><li>jest是test本项目中的所有目录的测试文件</li></ul></li></ol><blockquote><p>进行一个commonjs模块的测试</p></blockquote><ol><li><p><code>math.js</code>文件中写入如下待测试代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> minus<span class="token punctuation">,</span> multi <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>math.test.js</code>导入测试代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> minus<span class="token punctuation">,</span> multi <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试加法 3 + 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试减法 3 - 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试乘法 3 * 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行<code>npm run test</code>可以看到终端有成功运行的样式</p></li></ol><h2 id="jest-config"><a href="#jest-config" class="headerlink" title="jest config"></a>jest config</h2><ol><li><p>jest可以直接使用命令行参数<code>--config &lt;path/to/file.js|cjs|mjs|json&gt;</code></p></li><li><p>jest可以直接在<code>package.json</code>中配置文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>直接使用<code>jest.config.(js|ts)</code>文件,在文件中配置</p></li></ol><blockquote><p>有如下的选项</p></blockquote><ul><li><p><code>automock</code>:<code>bool</code>默认值false.将所有的导入模块都自动mock</p><ul><li>但是当源文件下有<strong>mocks目录</strong>时,会自动mock.核心模块,如fs不会默认fock,需要手动设置<code>jest.mobk(&quot;fs&quot;)</code></li></ul></li><li><p><code>bail</code>:<code>number|bppl</code>.默认值是0.bail选项可以让你配置jest在经历几次失败后停止运行测试</p></li><li><p><code>browser</code>:<code>bool</code>默认值false.解析模块中是否遵循<code>package.json</code>中的<code>browser</code>字段</p><ul><li>有些模块导出的版本会不一样,取决于是在<strong>Node</strong>中还是<strong>浏览器</strong>中进行操作</li></ul></li><li><p><code>cacheDirectory</code>:<code>string</code>.默认值**&#x2F;tmp&#x2F;&lt;path&gt;**.用来储存依赖信息缓存目录</p></li><li><p><code>clearMocks</code>:<code>bool</code>.<strong>默认值false</strong>.在每个而是前自动清理mock的调用和实例instance</p><ul><li>相当于在每一个test之前调用<code>jest.clearAllMocks</code>,但不会删除已经有的mock实现</li></ul></li><li><p><code>collectCoverage</code>: <code>bool</code><strong>默认值false</strong>.是否打开代码覆盖率信息</p></li><li><p><code>collectCoverageFrom</code>:<code>array</code>.<strong>默认值undefined</strong>.表明哪些文件需要收集.如果文件匹配就会手机作为<code>coverage</code>的基数</p><ul><li>收集根目录下所有的js,jsx文件,同时排除node_modules下的所有文件</li><li>并且此参数需要<code>collectCoverage</code>被设置成true</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">collectCoverageFrom<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"**/*.&#123;js,jsx&#125;"</span><span class="token punctuation">,</span><span class="token string">"!**/node_modules/**"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>coverageDirectory</code>:<code>string</code>.<strong>默认值undefined</strong>,输出覆盖信息文件的目录名称</p></li><li><p><code>coveragePathIgnorePatterns</code>:<code>[array&lt;string&gt;]</code>.<strong>默认值[node_modules]</strong>.排除出coverage的文件列表.</p></li><li><p><code>coverageProvider</code>:<code>string</code>.有两个选项,<code>v8</code>或者是<code>babel</code>.声明到底用哪个provider来用于指导代码的覆盖测试</p></li><li><p><code>coverageThreshold</code>:<code>object</code>.<strong>默认值undefined</strong>.该阈值作为覆盖最小阈值来设置.</p><ul><li>可以被设置为<code>global</code>,或者是目录及文件路径</li><li>如果没有达到阈值,则jest失败,如果给了一个正数,就表示最小的百分比值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">coverageThreshold<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    global<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"branches"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"functions"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"lines"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"statements"</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>dependencyExtractor</code>:<code>string</code>.<strong>默认值undefined</strong>.允许等地依赖提取器的使用,必须满足是一个node modules,同时导出的object中包含<code>extract</code>函数</p></li><li><p><code>displayName</code>:<code>string | object</code>.<strong>默认值undefined</strong>.允许在测试的时候打印显示标签.这里有多个repo和多个jest配置文件的时候很好用</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//string</span>displayName<span class="token operator">:</span> <span class="token string">'CLIENT'</span><span class="token comment">//object</span>displayName<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'CLIENT'</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>errorOnDeprecated</code>:<code>bool</code>.<strong>默认值false</strong>.针对国企的API抛出提示性的错误</p></li><li><p><code>extensionsToTreatAsEsm</code>:<code>Array&lt;string&gt;.</code><strong>默认值[]</strong>.将mjs字段视作esm模块.</p><ul><li>如果有其他文件使用ESM运行,需要在此处指定其文件的扩展名称</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">extensionsToTreatAsEsm<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>extraGlobals</code>:<code>array&lt;string&gt;</code><strong>默认值undefined</strong>.测试文件在<a href="https://nodejs.org/api/vm.html">vm</a>中运行,会减慢全局上下文的属性的调用速度</p></li><li><p><code>forceCoverageMatch</code>:<code>array&lt;string&gt;</code>.在收集代码覆盖率的时候,通常会忽略测试文件.使用此选项,可以在coverage包含被忽略的文件</p></li><li><p><code>globals</code>:<code>object</code>.<strong>默认值{}</strong>.全局变量,需要在所有的测试环境中都可以使用</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">globals<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token string">"__DEV__"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>rootDir</code>:<code>string</code>.默认值<strong>jest配置文件的根目录</strong>.如果未找到则为<code>pwd</code></p><ul><li>通常可以设置为<code>src</code>或者<code>lib</code>为根目录,对应于代码在存储库中的存储位置</li></ul></li><li><p><code>roots</code>:<code>array&lt;string&gt;</code>.<strong>默认值[“<rootDir>“]</strong>.Jest 应用于在其中搜索文件的目录路径列表</p><ul><li>根据<code>rootDir</code>决定根目录所在的位置</li></ul></li><li><p><code>moduleFileExtensions</code>:<code>array&lt;string&gt;</code>.<strong>默认值[“js”, “jsx”, “ts”, “tsx”, “json”, “node”]</strong></p><ul><li>模块使用的文件扩展数组.如果未指定文件扩展名的模块,则这些事jest将俺从左到有顺序查找的扩展名.建议将常用的扩展名放置左侧</li></ul></li><li><p><code>moduleNameMapper</code>:<code>object&lt;string,string | array&lt;string&gt;&gt;</code>.正则表达式到模块名称或模块名称数组的映射(设置别名)</p></li><li><p><code>modulePathIgnorePatterns</code>:<code>object&lt;string&gt;</code>.<strong>默认值[]</strong>.定模块的路径与任何模式匹配,则它在测试环境中将不可用</p><ul><li>一个正则表达式模式字符串数组,这些字符串与所有模块路径匹配,然后这些路径将被视为对模块加载程序<strong>可见</strong></li><li>这些模式字符串与完整路径匹配<code>[&quot;&lt;rootDir&gt;/build/&quot;]</code></li></ul></li><li><p><code>transform</code>:<code>[object&lt;string, pathToTransformer | [pathToTransformer, object]&gt;]</code>.默认值<code>&#123;&quot;\\.[jt]sx?$&quot;: &quot;babel-jest&quot;&#125;</code></p><ul><li>从正则表达式到转换器路径的映射.这些编译器将<code>JavaScript</code>的未来版本编译为当前版本,或者可以配合ts,webpack使用</li></ul></li><li><p><code>transformIgnorePatterns</code>:<code>array&lt;string&gt;</code>.文件路径与任何模式匹配的时候,忽略这些匹配的文件</p><ul><li><strong>默认值:[“&#x2F;node_modules&#x2F;“, “\.pnp\.[^\/]+$”]</strong></li></ul></li></ul><h2 id="jest中es-ts的配置项"><a href="#jest中es-ts的配置项" class="headerlink" title="jest中es,ts的配置项"></a>jest中es,ts的配置项</h2><blockquote><p><code>npx jest --coverage</code>代码覆盖率</p></blockquote><ul><li>代码覆盖率会在控制台显示一个图表信息.并且有一个默认叫做<code>coverage</code>的文件夹.文件夹中的html文件就是对覆盖率的阐述</li><li>覆盖率就是编写的测试代码对原来的功能代码的占比,全部test,则为100%</li><li><span style="color:red">在配置文件中,初始化的时可以开启代码覆盖率的选项</span>,而不必使用cli的时候添加<code>--coverage</code><ol><li><code>collectCoverage: true</code>:是否打开代码覆盖率</li><li><code>coverageDirectory: &quot;coverage&quot;</code>:代码覆盖率生成的文件目录名称.可以自定义</li><li><code>coverageProvider: &quot;v8&quot;</code>:有两个选项,<code>v8</code>或者是<code>babel</code>.声明到底用哪个provider来用于指导代码的覆盖测试</li></ol></li></ul><blockquote><p><a href="https://jestjs.io/docs/ecmascript-modules">配置esm模块进行测试</a></p></blockquote><ol><li><p>首先需要在<code>package.json</code>中加入<code>&quot;type&quot;:modules</code>.不需要改<code>.js</code>为<code>.mjs</code></p></li><li><p>对于<code>jest.config.js</code>文件,不能使用默认的<code>module.exports</code>导出</p><ul><li>需要使用esm的方式导出配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行需要使用<code>NODE_OPTIONS=--experimental-vm-modules</code>这种形式设置环境变量</p><ul><li>在脚本中配置此环境变量并没有成功</li><li>这里我是直接使用<code>NODE_OPTIONS=--experimental-vm-modules npx jest</code>命令来运行此测试</li></ul></li></ol><blockquote><p>如果是ts项目,建议直接使用vitest直接进行TDD开发</p></blockquote><ul><li>vitest基于vite开发,完全适用于<code>vite.config.ts</code>配置</li><li>下载<code>npm i vitest -D</code></li></ul><ol><li><p>基于<code>vite.config.ts</code>配置vitest</p><ul><li>如果你使用<code>vite</code>的<code>defineConfig</code>你还需要将三斜线指令写在配置文件的顶部</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;&#x2F; &lt;reference types&#x3D;&quot;vitest&quot; &#x2F;&gt;import &#123; defineConfig &#125; from &#39;vite&#39;export default defineConfig(&#123;  test: &#123;    &#x2F;&#x2F; ...  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于<code>vitest.config.ts</code>配置vitest.</p><ul><li>此优先级高于<code>vite.config.ts</code>,可以直接使用vitest中的<code>defineConfig</code>配置</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineConfig &#125; from &#39;vitest&#x2F;config&#39;export default defineConfig(&#123;  test: &#123;    &#x2F;&#x2F; ...  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排除默认选项,自己配置测试的选项</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; configDefaults, defineConfig &#125; from &#39;vitest&#x2F;config&#39;export default defineConfig(&#123;  test: &#123;    exclude: [...configDefaults.exclude, &#39;packages&#x2F;template&#x2F;*&#39;],  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化一个test项目&quot;&gt;&lt;a href=&quot;#初始化一个test项目&quot; class=&quot;headerlink&quot; title=&quot;初始化一个test项目&quot;&gt;&lt;/a&gt;初始化一个test项目&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm i jest -D&lt;/code&gt;:下</summary>
      
    
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/categories/config/"/>
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/tags/config/"/>
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>npm中的bin</title>
    <link href="http://mail.zyjcould.ltd/2022/04/16/npm-zhong-de-bin/"/>
    <id>http://mail.zyjcould.ltd/2022/04/16/npm-zhong-de-bin/</id>
    <published>2022-04-16T06:54:05.000Z</published>
    <updated>2022-04-16T08:02:49.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><blockquote><p>bin文件是一个二进制的脚本文件</p></blockquote><ul><li><p>一般文件内会有以下的字样等等,这就是平时运行的脚本文件的解释程序(<code>Shebang</code>)</p><ul><li><code>#!/usr/bin/env node</code>这段话的意思就是启用node进行脚本的解释程序</li><li><code>#!/bin/sh</code>:使用sh进行脚本的执行程序</li><li>并且在windows中同样可以使用(windows会忽略shengban,会根据程序的脚本名来指定运行的解释程序)</li></ul></li><li><p>可以查看一下typescript中的脚本配置</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"./bin/tsc"</span><span class="token punctuation">,</span>    <span class="token property">"tsserver"</span><span class="token operator">:</span> <span class="token string">"./bin/tsserver"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p>创建一个node的项目并且创建一个bin目录(用于存放脚本文件)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── bin│   └── vli.js├── index.js└── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>package.json</code>配置bin字段,用于打包生成脚本命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"v-vli"</span><span class="token operator">:</span><span class="token string">"./bin/vli.js"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在脚本文件中写入需要的命令<code>vli.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token keyword">function</span> <span class="token function">run</span> <span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'-v'</span> <span class="token operator">||</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'--version'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  version is 0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'-h'</span> <span class="token operator">||</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'--help'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  usage:\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  -v --version [show version]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打成全局包才可以使用该命令,打成全局包的命令<code>npm install . -g</code>或者<code>npm link</code></p></li><li><p>使用<code>v-cli -v</code>就可以查看输出的脚本命令了</p></li></ol><h2 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h2><blockquote><p><code>npm link</code>将npm模块链接到对应的运行项目中去,方便地对模块进行调试和测试</p></blockquote><ol><li>如果他是一个<code>bin</code>(二进制文件):他会被链接到全局的<code>&#123;prefix&#125;/bin</code>目录(node的全局目录)下,生成一个脚本文件,供全局使用</li><li>如果他是一个<code>lib</code>(库文件),他会被连接到<code>&#123;prefix&#125;/lib/node_modules/&lt;package&gt;</code>(node的全局目录),生成一个链接文件</li><li>一个文件项目中可能包含多个bin文件,一般通常只有一个lib文件</li></ol><ul><li>通过<code>npm config get prefix</code>命令获取到prefix的值</li></ul><blockquote><p><code>npm unlink &lt;package&gt;</code>:解除链接</p></blockquote><ol><li>如果是bin文件,解除的是bin配置的脚本名称,而不是项目的包名<ul><li>例如上面的脚本<code>npm unlink v-vli</code>.将全局的<code>v-vli</code>脚本移除</li></ul></li><li>如果是<code>lib</code>文件,他本质就是一个软链接,直接移除项目的包名<ul><li><code>npm unlink &lt;package&gt;</code>:将lib下的全局链接移除</li></ul></li></ol><blockquote><p>例子:例如需要开发一个module模块,并且在本地example项目中需要使用module包</p></blockquote><ol><li>在<code>module</code>中使用<code>npm link</code>被链接到全局的lib目录下</li><li>在<code>example</code>项目中使用<code>npm link module</code>后,此项目会软链接到<code>example/node_modules</code></li><li>这种软链接的形式,在module的修改同样会同步到<code>example/modules</code>中的软链接部分</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bin&quot;&gt;&lt;a href=&quot;#bin&quot; class=&quot;headerlink&quot; title=&quot;bin&quot;&gt;&lt;/a&gt;bin&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;bin文件是一个二进制的脚本文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般文件内会</summary>
      
    
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/categories/config/"/>
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/tags/config/"/>
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="npm" scheme="http://mail.zyjcould.ltd/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>发布npm</title>
    <link href="http://mail.zyjcould.ltd/2022/04/15/fa-bu-npm/"/>
    <id>http://mail.zyjcould.ltd/2022/04/15/fa-bu-npm/</id>
    <published>2022-04-15T14:32:15.000Z</published>
    <updated>2022-04-22T14:17:22.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><ol><li><p>首先需要登录自己的npm账号<code>npm login</code></p></li><li><p>初始化一个项目<code>npm init</code></p><ul><li>最重要的两个字段<code>name</code>和<code>version</code></li></ul><blockquote><p><code>name</code></p></blockquote><ul><li>不要在name中包含js,node字样</li><li>这个名字最终会是URL的一部分,命令行的参数,目录名,所以不能以点号或下划线开头</li><li>这个名字可能在require()方法中被调用,所以应该尽可能短</li><li>并且包的名字不能与npm中的其他包的名字一致</li></ul><blockquote><p><code>version</code>:版本号.版本号基本是由三位数字组成</p></blockquote><ul><li><code>MAJOR</code>:进行不兼容的API更改时的版本</li><li><code>MINOR</code>:以向后兼容的方式添加功能时的版本</li><li><code>PATCH</code>:向后兼容的错误修复程序的版本</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token number">1</span>   .   <span class="token number">0</span>   .   <span class="token number">0</span><span class="token punctuation">[</span>MAJOR<span class="token punctuation">]</span>.<span class="token punctuation">[</span>MINOR<span class="token punctuation">]</span>.<span class="token punctuation">[</span>PATCH<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&lt;</span>newversion<span class="token operator">></span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token punctuation">[</span>--preid-<span class="token operator">&lt;</span>prerelease-id<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">|</span> from-git<span class="token punctuation">]</span><span class="token string">'npm [-v | --version]'</span> to print <span class="token function">npm</span> version<span class="token string">'npm view &lt;pkg> version'</span> to view a package<span class="token string">'s published version'</span><span class="token function">npm</span> ls' to inspect current package/dependency versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>major</td><td>重大更新版本</td><td>npm version major</td><td>0.2.0 -&gt;1.0.0</td></tr><tr><td>minor</td><td>主要更新版本</td><td>npm version minor</td><td>0.2.0 -&gt;0.3.0</td></tr><tr><td>patch</td><td>补丁更新版本</td><td>npm version patch</td><td>0.2.0 -&gt;0.2.1</td></tr><tr><td>premajor</td><td>重大更新预发布版本</td><td>npm version premajor</td><td>0.2.0 -&gt;1.0.0-0</td></tr><tr><td>preminor</td><td>主要更新预发布版本</td><td>npm version preminor</td><td>0.2.0 -&gt;0.3.0-0</td></tr><tr><td>prepatch</td><td>补丁更新预发布版本</td><td>npm version prepatch</td><td>0.2.0 -&gt;0.2.1-0</td></tr><tr><td>prerelease</td><td>预发布版本</td><td>npm version prerelease</td><td>当前版本不是预发布版本的会出错</td></tr><tr><td>from-git</td><td>取git的tag作为版本号设置至<code>package.json</code></td><td>npm version from-git</td><td>git的tag标签没有设置的情况下,会抛出错误</td></tr></tbody></table><blockquote><p><code>description</code>:对包进行描述,便于<code>npm search</code></p><p><code>repository</code>:本项目中代码的源地址位置</p></blockquote><ol><li><p>可以分层写出项目地址</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/npm/cli.git"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时可以指定仓库名的形式</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"npm/npm"</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"github:user/repo"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><code>keywords</code>:将关键字放入其中.它是一个字符串数组.便于使用<code>npm search</code></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"test"</span><span class="token punctuation">,</span>   <span class="token string">"npm"</span><span class="token punctuation">,</span>   <span class="token string">"app"</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>homepage</code>:项目的主页.用于展示项目</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/owner/project#readme"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>main</code>:程序的主要入口点.一般用于require的引入</p></blockquote><ul><li>也就是说,如果您的包被命名为foo,并且用户安装了它,然后会执行<code>require(&quot;foo&quot;)</code>,则将返回主模块的exports 对象</li></ul><blockquote><p><code>module</code>:一般是esm模块的入口点,用于import的引入</p></blockquote><ul><li>如果包module被命名为foo,用户安装之后,然后执行<code>import...from &quot;foo&quot;</code>,会返回主模块</li></ul><blockquote><p><code>author</code>:作者信息</p></blockquote><ol><li><p>每个字段的形式分开展现</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Barney Rubble"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"b@rubble.com"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span> <span class="token operator">:</span> <span class="token string">"http://barnyrubble.tumblr.com/"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以<code>author</code>合并展示</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Barney Rubble &lt;b@rubble.com> (http://barnyrubble.tumblr.com/)"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><code>license</code>:许可证.让人知道使用的权利和限制的</p></blockquote><ul><li><a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository">参考github</a></li></ul></li></ol><h3 id="发布javascript版本的包"><a href="#发布javascript版本的包" class="headerlink" title="发布javascript版本的包"></a>发布javascript版本的包</h3><ol><li><p><code>name</code>:字段必须是仓库拥有者的名称,即<code>npm login</code>的名称</p><ul><li>由于作用域内包安装到作用域文件夹中,因此在代码中需要作用域时,必须包含作用域的名称</li><li>每个 npm 用户&#x2F;组织都有自己的作用域,只有你可以在作用域中添加包</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@myorg/mypackage'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>npm publish</code>:npm中发布<strong>公共的作用域包</strong>需要使用<code>npm publish --access=public</code>(私有是收费的)</p></li><li><p><code>npm unpublish 包名</code>:即可将 npm 上的包删除</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> publish <span class="token punctuation">[</span><span class="token operator">&lt;</span>tarball<span class="token operator">>|</span><span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--tag <span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--access <span class="token operator">&lt;</span>public<span class="token operator">|</span>restricted<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--otp otpcode<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dry-run<span class="token punctuation">]</span>Publishes <span class="token string">'.'</span> <span class="token keyword">if</span> no argument suppliedSets tag <span class="token string">'latest'</span> <span class="token keyword">if</span> no --tag specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;folder&gt;</code>:包含<code>package.json</code>文件的文件夹</li><li><code>&lt;tarball&gt;</code>:指向gzip压缩tar存档的url或文件路径,其中包含一个包含package.json文件的文件夹.</li><li><code>[--tag &lt;tag&gt;]</code>:使用给定标记注册已发布的包,以便安装此版本.默认情况下,更新并安装标记(参考<code>npm-dist-tag</code>)</li><li><code>[--access &lt;public|restricted&gt;]</code>:告知注册表此包是应发布为公共包还是受限制程序包.仅适用于作用域内包,缺省为<code>restricted --access</code>.如果没有付费帐户,则必须发布<code>public</code>方式才能发布作用域内的程序包.</li><li><code>[--otp &lt;otpcode&gt;]</code>:启用了双因素身份验证,则可以使用此代码提供来自身份验证器的代码.否则系统将提示<code>auth-and-writes</code></li><li><code>[--dry-run]</code>:截至npm@6,除了实际发布到注册表之外,是否所有发布都会执行.报告将要发布的内容的详细信息.</li><li><code>[--workspaces]</code>:在发布时启用工作区上下文.将发布所有工作区包.</li><li><code>[--workspace]</code>:启用工作区上下文,并将结果限制为此配置项指定的结果.将仅发布给定工作区中的包.</li></ul><blockquote><p>发布一个公共的包,不包含私有作用域</p></blockquote><ol><li>设置npm的proxy代理<code>npm config set proxy=&quot;代理地址(如127.0.0.1:7890)&quot;</code></li><li>检查自己的包名,不能与其他人的包名一样</li><li>使用<code>npm publish</code>发布自己的包</li></ol><h3 id="打包typescript版本的包"><a href="#打包typescript版本的包" class="headerlink" title="打包typescript版本的包"></a>打包typescript版本的包</h3><ol><li>下载<code>npm install typescript -D</code></li><li>初始化一个<code>tsconfig.json</code>文件<code>tsc --init</code></li><li>在scripts中添加脚本:<code>npx tsc -p .</code>.打包当前目录下的所有文件</li></ol><blockquote><p>一些typescript中特有的配置</p></blockquote><ol><li><p><code>package.json</code>中的<code>types</code>字段</p><ul><li>这是一个只在TypeScript中生效的字段,如果您的包有一个main.js文件,您还需要在<code>package.json</code>文件中指明主声明文件.将types属性设置为指向捆绑(bundled指main.js)的声明文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"./lib/main.d.ts"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>package.json</code>中的<code>typesVersions</code>字段</p><ul><li>控制typescript的版本号</li></ul> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"typesVersions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">">=3.1"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ts3.1/*"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>.d.ts</code>文件中的<code>/// &lt;reference types=&quot;...&quot; /&gt;</code></p><ul><li>当前库依赖于全局库,会导入全局库的<code>.d.ts</code>的名称</li><li>在声明文件里包含<code>/// &lt;reference types=&quot;node&quot; /&gt;</code>，表明这个文件使用了<code>@types/node/index.d.ts</code>里面声明的名字.并且,这个包要在编译阶段与声明文件一起被包含进来</li><li>解析@types包的名字的过程与解析import语句里模块名的过程类似.所以可以简单的把三斜线类型引用指令想像成针对包的import声明</li><li>对于那些<strong>在编译阶段生成的声明文件</strong>,编译器会自动地添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>;当且仅当结果文件中使用了引用的<code>@types</code>包里的声明时才会在生成的声明文件里添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>语句</li></ul></li></ol><blockquote><p>配置<code>tsconfig.json</code>.</p></blockquote><ol><li>初始化一个tsconfig.json文件:<code>npx tsc --init</code></li><li>介绍几个重要的配置项<ul><li><code>target</code>: 将项目打包成目标兼容的版本</li><li><code>module</code>: 指定要用的模块化标准</li><li><code>lib</code>: lib用于指定要包含在编译中的库文件<ul><li>例如dom中的一些类型所需要的声明文件.或者使用<code>Array&lt;T&gt;</code>指定数组类型</li><li><a href="https://stackoverflow.com/questions/43874096/difference-in-the-lib-property-in-tsconfig-json-between-es6-and-es2017">可以看下这篇文章</a></li></ul></li><li><code>declaration</code>: 为ts或者js项目生成定义文件(<code>.d.ts</code>)</li><li><code>sourceMap</code>: 为源码生成映射文件,方便调试</li><li><code>rootDir</code>: 指定根目录的源文件位置</li><li><code>outDir</code>: 指定根目录的打包位置</li><li><code>esModuleInterop</code>: 是commonjs模块兼容esm模块(意味着两者的方式都可以导出)<ul><li>参考:<a href="https://zhuanlan.zhihu.com/p/148081795">https://zhuanlan.zhihu.com/p/148081795</a></li></ul></li></ul></li></ol><ul><li>最终形成的tsconfig.json文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2016"</span><span class="token punctuation">,</span>      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">,</span>                                    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>                                     <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                  <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>     <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                 <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于<code>package.json</code>文件最好把项目放置在源文件<code>src</code>中,此时只需要配置打包生成的目录上传包就可以了</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/index.js"</span><span class="token punctuation">,</span><span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"dist/index.d.ts"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字段&quot;&gt;&lt;a href=&quot;#字段&quot; class=&quot;headerlink&quot; title=&quot;字段&quot;&gt;&lt;/a&gt;字段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先需要登录自己的npm账号&lt;code&gt;npm login&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化一个项目</summary>
      
    
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/categories/config/"/>
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/tags/config/"/>
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="npm" scheme="http://mail.zyjcould.ltd/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>video</title>
    <link href="http://mail.zyjcould.ltd/2022/04/06/video/"/>
    <id>http://mail.zyjcould.ltd/2022/04/06/video/</id>
    <published>2022-04-06T03:52:39.000Z</published>
    <updated>2022-04-06T13:43:04.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h2><blockquote><p>&lt;video&gt;实现了HTMLVideoElement这个接口.该接口继承了<code>HTMLMediaElement</code>和<code>HTMLElement</code>的属性和方法</p></blockquote><ul><li>浏览器并不都是支持相同的视频格式,你可以在&lt;source&gt;中提供多个源,浏览器会使用他所支持的那个<ul><li>&lt;video&gt;标签的中间内容,是针对浏览器不支持此内容的降级处理</li></ul></li></ul><blockquote><p>&lt;video&gt;标签的属性</p></blockquote><ol><li><code>src</code>:该属性指向你想要嵌入的网页当中的视频,与&lt;img&gt;标签的src相同</li><li><code>width</code>和<code>height</code>:设置视频的宽度和高度</li><li><code>controls</code>:<code>bool</code>.浏览器提供的控件界面,用户可以通过控件视频的回放功能</li><li><code>autoplay</code>:<code>bool</code>.设置此元素视频会自动播放.但是也必须设置<code>muted</code></li><li><code>muted</code>:<code>bool</code>.默认值是false,意味着视频播放的时候音频也会播放.设置为true,音频会初始化为静音<ul><li>浏览器为了用户的体验考虑,限制了音视频的自动播放,最大限度地减少广告或者噪音等骚扰</li></ul></li><li><code>loop</code>:<code>bool</code>.指定后,会在视频结尾的地方自动返回视频开始的地方</li><li><code>poster</code>:视频播放前显示的图像.封面图像</li><li><code>preload</code>:浏览器是否需要缓存该视频<ul><li><code>none</code>:浏览器不会缓存该视频</li><li><code>auto</code>:当页面加载后缓存该视频</li><li><code>metadata</code>:仅缓存原视频的数据</li></ul></li><li><code>controlslist</code>(实验):用户在显示其自己的控件集时选择要在媒体元素上显示的控件<ul><li><code>nodownload</code>:禁止下载.隐藏下载的小控件</li><li><code>nofullscreen</code>:隐藏全屏小控件</li><li><code>noremoteplayback</code>:隐藏小窗口控件</li></ul></li></ol><h3 id="HTMLVideoElement"><a href="#HTMLVideoElement" class="headerlink" title="HTMLVideoElement"></a>HTMLVideoElement</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pau<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zyjcould.ltd/mv/player.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该接口提供了用于操作视频对象的特殊属性和方法</p></blockquote><ul><li>由于不同的浏览器会支持不同的媒体格式.因此在提供媒体文件的时候,提供一种所有浏览器都支持的格式,或者提供格式不同的多个视频源来支持不同浏览器.</li></ul><blockquote><p>除了继承父对象<code>HTMLMediaElement</code>的属性之外,同时自己也实现了自身的属性</p></blockquote><ol><li><code>height,width,preload</code>:看上文</li><li><code>videoWidth,videoHeight</code>:只读.以<code>css pixels</code>单位给出的视频资源本身的大小.这个值考虑了大小,对比度,明度等等.而height,width只给出视频显示区域的大小</li></ol><h4 id="HTMLMediaElement对象的属性"><a href="#HTMLMediaElement对象的属性" class="headerlink" title="HTMLMediaElement对象的属性"></a><code>HTMLMediaElement</code>对象的属性</h4><ul><li>除了支持<strong>src,controls,autoplay,muted,loop,poster等</strong>之外还支持以下属性(并不完全)</li><li>详细请看:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement">https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement</a></li></ul><ol><li><p><code>duration</code>:只读.媒体以秒为单位的总长度时间.视频的总时长</p><ul><li>如果媒体不可用,则为0</li><li>如果媒体可用,但时间长度未知,值为NAN(可能未完全加载媒体)</li><li>如果媒体是以stream形式传输并且没有预定长度,则值为Inf</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>currentTime</code>:获取当前位置的播放时间,或者设置从某个位置开始播放</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>currentTime <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>volume</code>:音量.表示音频的音量.值从0.0(静音)到1.0(最大音量)</p><ul><li><code>muted</code>属性和<code>volume</code>属性没有关联关系,改变其中一个值另一个也不会改变</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>ended</code>:只读.表示媒体是否已经播放完毕</p></li><li><p><code>error</code>:只读,返回一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaError"><code>MediaError</code></a>.表示对象最近的错误,没有错误返回error</p></li><li><p><code>paused</code>:指示媒体元素是否被暂停</p></li><li><p><code>defaultPlaybackRate</code>:控制媒体的播放速度.</p><ul><li>1.0表示正常的播放速度,如果值小于1.0,则播放速度会比”正常速度”慢,如果值大于1.0,则播放速度会比”正常速度”快</li><li>如果是<code>0.0</code>是一个无效的值,并且会抛出错误</li></ul></li></ol><blockquote><p><code>TimeRangs</code>:该接口用来表示一组时间范围,主要目的是跟踪供&lt;audio&gt;和&lt;video&gt;元素加载使用的媒体哪些部分已经被缓冲</p></blockquote><ul><li><p>一个TimeRangs对象包括一个或多个时间范围,其中每个都由一个开始偏移量和结束偏移量指定</p><ul><li>可以将你想要检索的时间范围的索引值传递给end()和start()方法来引用每个时间范围</li></ul></li><li><p>视频一般情况下只有一个时间段,即<code>TimeRanges.length</code>值为1;如果进行了跳跃观看(例如3-&gt;4分钟这个时间段),并且跳跃内容并没有缓冲完毕,则会出现两个时间段,这时TimeRanges的length为2</p><ul><li>TimeRanges个数会随着跳跃观看未缓冲完成的内容而增加,随着缓冲的完成而减少,最少为1个,即从开头到结尾</li><li>参考:<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges">https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------------------------------------------<span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>                    <span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>     <span class="token operator">|</span>------------------------------------------------------<span class="token number">0</span>             <span class="token number">5</span>                    <span class="token number">15</span>          <span class="token number">19</span>    <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>属性值:<code>length</code>:返回对象中时间范围的个数</p></li><li><p>方法:</p><ul><li><code>end(index)</code>:指定索引的范围的开始时间</li><li><code>start(index)</code>:指定索引的范围的结束时间</li></ul></li><li><p>以下三个属性皆实现了<code>TimeRangs</code>这个接口</p><ol><li><code>buffered</code>:只读.buffered属性会告诉浏览器哪一部分的媒体已经被下载(返回一个TimeRangs对象)</li><li><code>played</code>:只读.媒体可被播放的范围</li><li><code>seekable</code>:(如果有)用户可以试图找到的寻求范围</li></ol></li><li><p>何通过TimeRanges来判断video是否已经完全加载</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> buf <span class="token operator">=</span> video<span class="token punctuation">.</span>bufferedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// only one range</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> v<span class="token punctuation">.</span>duration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token comment">// The one range starts at the beginning and ends at</span>    <span class="token comment">// the end of the video, so the whole thing is loaded</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>readyState</code>:媒体的就绪状态</p></blockquote><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>HAVE_NOTHING</td><td>0</td><td>没有关于媒体资源的可用信息</td></tr><tr><td>HAVE_METADATA</td><td>1</td><td>已检索到足够的媒体资源,因此已初始化元数据属性寻求将不再引发异常</td></tr><tr><td>HAVE_CURRENT_DATA</td><td>2</td><td>数据可用于当前播放位置,但不足以实际播放多个帧</td></tr><tr><td>HAVE_FUTURE_DATA</td><td>3</td><td>当前播放位置以及至少一点点未来的数据是可用的(换句话说,至少两帧视频)</td></tr><tr><td>HAVE_ENOUGH_DATA</td><td>4</td><td>有足够的数据可用,下载速率足够高,媒体可以不间断地播放到底</td></tr></tbody></table><blockquote><p><code>networkState</code>:获取媒体时的网络状态</p></blockquote><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>NETWORK_EMPTY</td><td>0</td><td>还没数据.readyState是HAVE_NOTHING</td></tr><tr><td>NETWORK_IDLE</td><td>1</td><td>是有效的并且已经选择了一个资源,但是还没有使用网络</td></tr><tr><td>NETWORK_LOADING</td><td>2</td><td>正在下载HTMLMediaElement 数据.</td></tr><tr><td>NETWORK_NO_SOURCE</td><td>3</td><td>没有找到 HTMLMediaElement src</td></tr></tbody></table><h4 id="HTMLMediaElement方法"><a href="#HTMLMediaElement方法" class="headerlink" title="HTMLMediaElement方法"></a>HTMLMediaElement方法</h4><blockquote><p>由于HTMLVideoElement本身的方法还在实验性中,这里使用HTMLMediaElement父元素的方法</p></blockquote><ul><li><code>play()</code>:开始播放</li><li><code>pause()</code>:暂停播放</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">pay<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pau<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  video<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>canPlayType(in DOMString type)</code>:返回以下属性<ul><li><code>probably</code>:如果指定的类型似乎可以播放</li><li><code>maybe</code>:如果不播放就无法判断该类型是否可播放</li><li><code>空字符串</code>:如果指定的类型肯定不能播放</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">canPlayType</span><span class="token punctuation">(</span><span class="token string">'video/webm'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//maybe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>load()</code>:重置媒体元素并重新选择媒体资源.任何未决事件都将被丢弃.获取多少媒体数据仍受<code>preload</code>属性的影响<ul><li>此方法可用于在删除任何<code>src</code>属性和&lt;source&gt;来放资源</li><li>通常不需要使用此方法,除非需要在动态更改后重新扫描&lt;source&gt;元素</li></ul></li></ul><h2 id="video事件"><a href="#video事件" class="headerlink" title="video事件"></a>video事件</h2><ol><li><p><code>loadstart</code>:浏览器开始寻找指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//由于没有视频资源,所以duration是null</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadstart"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>durationchange</code>:时长变化的时候.音频&#x2F;视频的时长数据发生变化时触发,时长由NaN变为音频&#x2F;视频的实际时长</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"durationchange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"durationchange"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token comment">//视频总时长</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>loadedmetadata</code>:元数据加载的时候.音频&#x2F;视频的元数据已加载时触发,元数据包括:时长,尺寸(仅视频)以及文本轨道</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadedmetadata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadedmetadata"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token comment">//视频总时长</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>progress</code>:浏览器下载监听.当浏览器正在下载指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>loadeddata</code>:视频的首帧已经加载时,但没有足够的数据来播放指定音频&#x2F;视频的下一帧时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>canplay</code>:可播放监听.当浏览器能够开始播放指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"canplay"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"canplay"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>canplaythrough</code>:可流畅播放.在不停下来进行缓冲的情况下持续播放指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"canplaythrough"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"canplaythrough"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>play</code>:播放监听.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>pause</code>:暂停监听</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>seeking</code>:当用户开始移动&#x2F;跳跃到音频&#x2F;视频中新的位置时触发</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"seeking"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"seeking"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="11"><li><code>seeked</code>:当用户已经移动&#x2F;跳跃到视频中新的位置时触发</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"seeked"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"seeked"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="12"><li><code>waiting</code>:视频加载等待.当视频由于需要缓冲下一帧而停止,等待时触发<ul><li>当触发play事件的时候,如果视频还没有加载好,就会触发waiting</li></ul></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"waiting"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"waiting"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="13"><li><code>playing</code>:当视频在已因缓冲而暂停或停止后已就绪时触发</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"playing"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"playing"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="14"><li><code>timeupdate</code>:当播放位置已更改,播放时间更新</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"timeupdate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timeupdate"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="15"><li><code>ended</code>:播放结束的时候</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"ended"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ended"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="16"><li><code>error</code>:播放错误</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="17"><li><code>volumechange</code>:当音量更改时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'volumechange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'volumechange'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="18"><li><code>stalled</code>:当浏览器尝试获取媒体数据,但数据不可用时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'stalled'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stalled'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="19"><li><code>ratechange</code>:当视频的播放速度已更改时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'ratechange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ratechange'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="20"><li><code>emptied</code>:媒体内容为空时触发.例如,当这个<code>media</code>已经加载完成(或者部分加载完成).<code>load()</code>被用来进行重新加载</li></ol><blockquote><p>注意点:</p></blockquote><ul><li>你可以用CSS属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position"><code>object-position</code></a> 来调整视频在元素内部的位置,它可以控制视频尺寸适应于元素外框的方式.</li><li>如果想在视频里展示字幕或者标题,你可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track"><code>&lt;track&gt;</code></a> 元素和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API">WebVTT</a> 格式的基础上使用 JavaScript 来实现.详情请见 <a href="https://developer.mozilla.org/en-US/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/Adding_captions_and_subtitles_to_HTML5_video">Adding captions and subtitles to HTML5 video</a></li></ul><h2 id="画中画"><a href="#画中画" class="headerlink" title="画中画"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PictureInPictureWindow">画中画</a></h2><ul><li><p>HTML中的属性:</p><ul><li><code>autoPictureInPicture</code>:该属性指示视频是否应自动进入或离开画中画模式<ul><li>如果是<code>true</code>:视频在更改选项卡和&#x2F;或应用程序时应自动进入或离开画中画模式</li></ul></li><li><code>disablePictureInPicture</code>:阻止用户代理(<code>User-Agent</code>)是否应该向用户建议画中画功能,或者请求它自动<ul><li>如果是<code>true</code>,表示用户代理(请求头中的<a href="https://developer.mozilla.org/en-US/docs/Glossary/User_agent"><code>User-Agent</code></a>)不应向用户建议该功能(就是画中画不能播放)</li></ul></li></ul></li><li><p>方法:</p><ol><li><code>HTMLVideoElement.requestPictureInPicture()</code>:异步请求,以画中画模式显示视频<ul><li>如果成功进入画中画了.会触发<code>enterpictureinpicture</code>事件,让它知道它现在处于画中画状态</li><li>返回一个<code>PictureInPictureWindow</code>对象</li></ul></li><li><code>Document.exitPictureInPicture()</code>将此文档中包含的视频(当前处于浮动状态)从画中画模式中取出,从而恢复屏幕的先前状态<ul><li>返回值一个Promise,一旦用户代理完成退出画中画模式,就会解析.如果发生错误,那么会调用promise处理</li><li>语法:<code>exitPromise = document.exitPictureInPicture();</code></li></ul></li></ol></li><li><p>属性:<code>Document.pictureInPictureEnabled</code>.指示画中画模式是否可用.默认情况下,画中画模式可用</p></li><li><p>事件:</p><ul><li><code>enterpictureinpicture</code>:当视频成功进入画中画模式时,将触发该事件.<code>enterpictureinpicture</code>此事件不可取消,也不会冒泡</li><li><code>leavepictureinpicture</code>:当视频元素成功离开画中画模式时,将触发该事件.<code>leavepictureinpicture</code>此事件不可取消,也不会冒泡</li></ul></li><li><p><code>PictureInPictureWindow</code>接口是一个对象,它可以通过编程的方式获得浮动视频窗口的宽度和高度,并调整浮动视频窗口的大小.</p><ul><li>使用<code>HTMLVideoElement.requestPictureInPicture()</code>返回一个具有此接口的promise</li><li><code>width,height</code>:只读.返回小窗口的高度和宽度</li><li><code>resize</code>:监听小窗口调整大小的事件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'enterpictureinpicture'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> smallWindow <span class="token operator">=</span> event<span class="token punctuation">.</span>pictureInPictureWindow<span class="token punctuation">;</span>  <span class="token comment">// smallWindow就是一个PictureInPictureWindow对象</span>  smallWindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//event.targe就是smallWidth</span>    <span class="token comment">// event.target.width是小视频窗口的宽度</span>    <span class="token comment">// event.target.width是小视频窗口的高度</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现画中画"><a href="#实现画中画" class="headerlink" title="实现画中画"></a>实现画中画</h3><blockquote><p>实现画中画不可缺少的就是观察者模式(IntersectionObserver)的使用<br>.<br>如果对观察者不熟,可以看<a href="https://juejin.cn/post/7075666393508773895">https://juejin.cn/post/7075666393508773895</a></p></blockquote><ul><li><p>第一种方式使用vue的<code>teleport</code>组件<a href="http://mail.zyjcould.ltd/player/#/player">http://mail.zyjcould.ltd/player/#/player</a>.</p></li><li><p><a href="https://github.com/Jack-Zhang-1314/player">仓库地址</a></p></li><li><p>第二种就是使用<code>autoPictureInPicture</code>实现小窗口传送</p></li><li><p>由于谷歌浏览器原生的政策,画中画暂时还是不能使用原生很好的支持</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zyjcould.ltd/mv/player.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">autoPictureInPicture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span>    <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> v <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#video"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observe</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jinru"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v<span class="token punctuation">.</span><span class="token function">requestPictureInPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>readyState <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">exitPictureInPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token parameter">error</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>第一个错误是由于为使用用户手势,也就是必须要点击视频(可以是任何位置)才可以触发小窗口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Uncaught <span class="token punctuation">(</span>in promise<span class="token punctuation">)</span> DOMException: Failed to execute <span class="token string">'requestPictureInPicture'</span> on <span class="token string">'HTMLVideoElement'</span><span class="token builtin class-name">:</span> Must be    handling a user gesture <span class="token keyword">if</span> there isn't already an element <span class="token keyword">in</span> Picture-in-Picture.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二个错误,是因为,用户代理事件是有生命周期的,触发小窗口切换来回之后(或者在可能是5s)内会死亡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DOMException: Failed to execute <span class="token string">'exitPictureInPicture'</span> on <span class="token string">'Document'</span><span class="token builtin class-name">:</span> There is no Picture-in-Picture element <span class="token keyword">in</span>    this document.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>这里有详解的错误原因</li><li><a href="https://stackoverflow.com/questions/56252108/why-video-requestpictureinpicture-works-only-once">https://stackoverflow.com/questions/56252108/why-video-requestpictureinpicture-works-only-once</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;video标签&quot;&gt;&lt;a href=&quot;#video标签&quot; class=&quot;headerlink&quot; title=&quot;video标签&quot;&gt;&lt;/a&gt;video标签&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;lt;video&amp;gt;实现了HTMLVideoElement这个接口.</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>URL</title>
    <link href="http://mail.zyjcould.ltd/2022/03/28/url/"/>
    <id>http://mail.zyjcould.ltd/2022/03/28/url/</id>
    <published>2022-03-28T15:46:36.000Z</published>
    <updated>2022-03-29T05:16:40.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><blockquote><p>URL用于解析,构造,规范化和编码urls.如果浏览器不支持<code>new URL()</code>构造函数.可以使用<code>new window.URL()</code></p></blockquote><h3 id="new-URL"><a href="#new-URL" class="headerlink" title="new URL()"></a>new URL()</h3><blockquote><p>构造函数:new URL(url[,base])</p></blockquote><ul><li><code>url</code>:表示绝对或者相对的url.如果是绝对的url,无论baseurl有没有参数都会被忽略.如果是相对的url,则参数会添加到baseurl后</li><li><code>base</code>:可选的,表示基准的url.只有url是带协议才可以生效.<span style="color:red">否则报一个TypeError</span></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> baseurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/laji"</span><span class="token comment">//忽略参数</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/zhenlan"</span><span class="token punctuation">,</span>baseurl<span class="token punctuation">)</span><span class="token comment">//https://www.baidu.com/zhenlan</span><span class="token comment">//TypeError</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment">//https://www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性</p></blockquote><ul><li><code>hash</code>:返回包含URL标识中的’#’和fragment标识符</li><li><code>host</code>:返回一个主机信息.即<code>hostname</code>,如果URL接口有端口号(如果是默认端口号,则不会包含),也会包含端口号</li><li><code>hostname</code>:不包含端口号的主机信息</li><li><code>href</code>:返回一个完整的url</li><li><code>origin</code>:只读属性.<ul><li>如果是<code>http</code>或者是<code>https</code>,返回<code>协议名+&#39;://&#39;+域名+&#39;:&#39;+端口号</code></li><li>如果是ftp协议,视浏览器而定</li><li>如果是<code>blob:</code>协议,返回的是<code>blob:</code>紧跟的源地址<ul><li><code>&quot;blob:https://mozilla.org&quot;</code>返回<code>https://mozilla.org</code></li></ul></li></ul></li><li><code>pathname</code>返回一个初始<code>/</code>和URL的路径(如果没有路径,则为空字符串)</li><li><code>port</code>:如果url中包含明确的端口信息,则返回一个端口号.否则返回<code>&quot;&quot;</code></li><li><code>protocol</code>:返回一个url的协议值</li><li><code>search</code>:返回一个查询字符串.<code>?</code>紧跟的</li><li><code>searchParams</code>:返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">URLSearchParams</a>.这个对象包含当前URL中解码后的GET查询参数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://developer.mozilla.org:3300/en-US/docs/Web/API/URL/href?q=123#Examples'</span><span class="token punctuation">)</span><span class="token keyword">const</span> hash <span class="token operator">=</span> url<span class="token punctuation">.</span>hash <span class="token comment">//#Examples</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>host <span class="token comment">//developer.mozilla.org:3300</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>hostname <span class="token comment">//developer.mozilla.org</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>href <span class="token comment">//https://developer.mozilla.org:3300/en-US/docs/Web/API/URL/href#Examples</span><span class="token keyword">const</span> origin <span class="token operator">=</span> url<span class="token punctuation">.</span>origin <span class="token comment">//https://developer.mozilla.org</span><span class="token keyword">const</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span>pathname <span class="token comment">///en-US/docs/Web/API/URL/href</span><span class="token keyword">const</span> port <span class="token operator">=</span> url<span class="token punctuation">.</span>port <span class="token comment">//3300</span><span class="token keyword">const</span> protocol <span class="token operator">=</span> url<span class="token punctuation">.</span>protocol <span class="token comment">//https</span><span class="token keyword">const</span> search <span class="token operator">=</span> url<span class="token punctuation">.</span>search <span class="token comment">//?q=123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>username</code>:包含域名前指定的username</li><li><code>password</code>:返回域名之前指定的密码</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://anonymous:flabada@developer.mozilla.org/en-US/docs/Web/API/URL/password'</span><span class="token punctuation">)</span><span class="token keyword">const</span> password <span class="token operator">=</span> url<span class="token punctuation">.</span>password <span class="token comment">//flabada</span><span class="token keyword">const</span> username <span class="token operator">=</span> url<span class="token punctuation">.</span>username <span class="token comment">//anonymous</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>静态方法</p></blockquote><ol><li><code>URL.createObjectURL(object)</code>:创建一个表示参数中给出的对象的URL<ul><li>这个新的URL对象表示指定的<code>File</code>对象或<code>Blob</code>对象</li><li><code>object</code>:用于创建URL的<code>File</code>对象,<code>Blob</code>对象或者<code>MediaSource</code>对象</li><li>返回一个用于指定源的URL</li></ul></li><li><code>URL.revokeObjectURL(objectURL)</code>:释放一个之前已经存在的,通过调用<code>URL.createObjectURL()</code>创建的URL对象<ul><li><code>objectURL</code>:通过调用<code>URL.createObjectURL()</code>方法产生的URL对象</li></ul></li><li><code>URL.toString()</code>与<code>URL.toJSON()</code>与<code>url.href</code>一样,返回序列化的url</li></ol><h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/append">URLSearchParams</a></h3><blockquote><p>接口定义了一些实用的方法来处理URL的查询字符串</p></blockquote><h4 id="new-URLSearchParams"><a href="#new-URLSearchParams" class="headerlink" title="new URLSearchParams()"></a>new URLSearchParams()</h4><blockquote><p><code>URLSearchParams()</code>构造器创建并返回一个新的<code>URLSearchParams</code>对象.并且会忽略<code>?</code></p></blockquote><ul><li><code>const URLSearchParams = new URLSearchParams(init)</code></li><li><code>init</code>:需要USVString(对应 unicode 标量值的所有可能序列的集合)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">'?foo=1&amp;bar=2'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"foo"</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">"bar"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法</p></blockquote><ul><li><code>append(name, value)</code>:可以插入一个新搜索参数</li><li><code>getAll(name)</code>:以数组的形式返回与指定搜索参数对应的所有值</li><li><code>get(name)</code>:返回第一个与搜索参数对应的值</li><li><code>has(name)</code>:返回一个布尔值,表示查找的键名是否存在</li><li><code>set()</code>:设置和搜索参数相关联的值.如果设置前已经存在匹配的值,该方法会删除多余的,如果将要设置的值不存在,则创建它</li><li><code>delete(name)</code>:可以删除指定名称的所有搜索参数</li><li><code>sort()</code>:对对象中的所有键&#x2F;值对进行排序.按unicode编码</li><li><code>entries()</code>:返回一个<code>iterator</code>,允许遍历该对象中包含的所有键&#x2F;值对</li><li><code>forEach(callback)</code>:该回调函数可以接收到3个参数value,key,searchParams</li><li><code>keys()</code>:返回一个iterator,遍历器允许遍历对象中包含的所有键</li><li><code>values()</code>:返回一个iterator,遍历器允许遍历对象中包含的所有值</li><li><code>toString()</code>:返回适用在URL中的查询字符串</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://example.com?foo=1&amp;bar=2'</span><span class="token punctuation">)</span><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">//['1', '4']</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">//'1'</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//foo=1&amp;bar=2&amp;foo=4</span>params<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//foo=2&amp;bar=2</span>params<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token comment">//bar=2</span>params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//entries</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>  <span class="token comment">//bar 2</span>  <span class="token comment">//foo 4   </span><span class="token punctuation">&#125;</span><span class="token comment">//forEach</span>params<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//bar 2</span>  <span class="token comment">//foo 4  </span><span class="token comment">//keys()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//bar foo</span><span class="token comment">//values()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2 4</span>params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//'bar=2&amp;foo=4'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;URL用于解析,构造,规范化和编码urls.如果浏览器不支持&lt;code&gt;new URL()&lt;/code&gt;构</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>drag</title>
    <link href="http://mail.zyjcould.ltd/2022/03/28/drag/"/>
    <id>http://mail.zyjcould.ltd/2022/03/28/drag/</id>
    <published>2022-03-28T08:59:44.000Z</published>
    <updated>2022-04-08T02:04:34.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="draggable"><a href="#draggable" class="headerlink" title="draggable"></a>draggable</h2><blockquote><p>该属性是一个<strong>全局属性</strong>.是枚举类型,用于表示元素是否允许使用拖放操作</p></blockquote><ul><li><code>true</code>:可以拖动</li><li><code>false</code>:禁止拖动</li><li><code>auto</code>:跟随浏览器定义是否可以拖动</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTML拖拽API"><a href="#HTML拖拽API" class="headerlink" title="HTML拖拽API"></a>HTML拖拽API</h2><blockquote><p>拖放(<code>Drag</code>和<code>Drop</code>)接口使应用能够在浏览器使用拖放功能,并且继承了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">DOM event model</a>以及从<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent">mouse events</a>继承而来,得到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent">drag events</a>.</p></blockquote><h3 id="DragEvent"><a href="#DragEvent" class="headerlink" title="DragEvent"></a>DragEvent</h3><blockquote><p><code>DragEvent</code>的所有事件都是全局事件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//可以直接在document上使用</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">"drag"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在操作期间,有一些事件的类型可能会被多次触发(例如<code>drag</code>和<code>dragover</code>)</li></ul><table><thead><tr><th>事件</th><th>On型事件处理程序</th><th>触发时刻</th></tr></thead><tbody><tr><td>dragstart</td><td>ondragstart</td><td>当用户开始拖拽一个元素或选中的文本时触发</td></tr><tr><td>drag</td><td>ondrag</td><td>当拖拽元素或选中的文本时触发或者到达可放置区域触发</td></tr><tr><td>dragend</td><td>ondragend</td><td>当拖拽操作结束时触发(<strong>比如松开鼠标按键或敲Esc键</strong>)</td></tr><tr><td>dragexit</td><td>ondragexit</td><td>当元素变得不再是拖拽操作的选中目标时触发(官网并没有详细说明)</td></tr><tr><td>dragenter</td><td>ondragenter</td><td>当拖拽元素或选中的文本<strong>刚进入</strong>到一个可释放目标时触发</td></tr><tr><td>dragover</td><td>ondragover</td><td>当元素或选中的文本被<strong>拖入到一个可释放目标内时触发</strong>(每100毫秒触发一次)</td></tr><tr><td>dragleave</td><td>ondragleave</td><td>当拖拽元素或选中的文本离开一个可释放目标时触发</td></tr><tr><td>drop</td><td>ondrop</td><td>当元素放置在可放置区域时触发(此时可以取消浏览器的默认行为)</td></tr></tbody></table><ul><li><p>被拖动的元素事件有:<code>drag</code>,<code>dragstart</code>,<code>dragend</code>,<code>dragexit</code></p></li><li><p>目的地对象事件有:<code>dragenter</code>,<code>dragover</code>,<code>dragleave</code>,<code>drop</code></p></li><li><p><code>dragenter</code>和<code>dragover</code>事件的默认行为是拒绝接受任何被拖放的元素.</p><ul><li>需要使用<code>event.preventDefault()</code>阻止默认行为</li></ul></li><li><p>默认触发的顺序就是:<code>dragstart-&gt;dragenter-&gt;dragleave-&gt;dragend</code></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>153<span class="token punctuation">,</span> 80<span class="token punctuation">,</span> 202<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 3px solid <span class="token function">rgb</span><span class="token punctuation">(</span>40<span class="token punctuation">,</span> 180<span class="token punctuation">,</span> 127<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drag"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//console.log(e.target, "drop")</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragstart"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragend"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragend"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragexit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragexit"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragenter"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//e.preventDefault()</span>    <span class="token comment">//console.log(e.target, "dragover")</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragleave"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragleave"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataTransfer"><a href="#DataTransfer" class="headerlink" title="DataTransfer"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a></h4><ul><li><code>DataTransfer()</code>是一个构造函数,返回一个新的<code>DataTransfer</code>对象</li></ul><blockquote><p><code>DataTransfer</code>对象用于保存拖动并放下(drag and drop)过程中的数据.它可以报存一项或者多项的数据和每个拖拽项的类型(MIME类型)</p></blockquote><ul><li><p><code>DataTransfer</code>对象包含拖拽事件的状态(例如事件的拷贝(copy)或者移动(move)).并且可以向拖拽数据中添加或删除项目的方法</p></li><li><p>在<code>DragEvent</code>接口有一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent/DragEvent">构造函数</a>和一个<code>dataTransfer</code>(dataTransfer属性就是一个DataTransfer对象)属性</p></li></ul><blockquote><p>方法</p></blockquote><ol><li><code>getData(format)</code>:接受指定类型的拖放.如果拖放行为没有操作任何数据,会返回一个空字符串<ul><li>数据类型:<code>text/plain</code>,<code>text/uri-list</code></li></ul></li><li><code>setData()</code>:设置拖放操作的drag data到指定的数据和类型(一般设置MIME类型)<ul><li>如果给定类型的数据不存在,则将其添加到拖动数据存储的末尾,使得<code>types</code>列表中的最后一个项目将是新类型</li><li>如果数据已经存在,则会替换当前位置的数据</li></ul></li><li><code>setDragImage(img, xOffset, yOffset)</code>:设置为自定义图像.通常在<code>dragstart</code>中使用此方法<ul><li>图像通常是一个&lt;image&gt;元素,也可以是&lt;canvas&gt;或者其他图像元素</li><li><code>xOffset</code>指示相对于图片的横向偏移量;<code>yOffset</code>指向相对于图片的纵向偏移量</li></ul></li><li><code>clearData([format])</code>:删除给定类型的拖动操作的.如果该数据不存在,不会进行任何操作<ul><li><code>format</code>:如果不指定数据类型,为空字符串或者空白.则会删除所有数据类型</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用dragover阻止浏览器的默认行为.</span><span class="token comment">//不能使用drapstart.drop需要拖拽元素在目标元素内才能完全触发</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">,</span> <span class="token string">"www.google.com"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://zyjcould.ltd/erciyuan/diana.png"</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setDragImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ele <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"drop"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性</p></blockquote><ol><li><p><code>dropEffect</code>:用于控制在拖放过程中给用户的反馈(视觉上的),他会影响过程中光标手势.并且始终设置成effectAllowed的可能值之一</p><ul><li><code>copy</code>:操作用于指示被拖动的数据将从当前位置复制到放置位置</li><li><code>move</code>:操作用于指定被拖动的数据将被移动</li><li><code>link</code>:操作用于指示将在源和放置位置之间创建某种形式的关系或连接</li><li><code>none</code>:项目可能禁止拖放</li></ul></li><li><p><code>effectAllowed</code>:指定拖放操作所允许的一个效果</p><ul><li><code>none</code>:此项表示不允许放下</li><li><code>copy</code>:源项目的复制项可能会出现在新位置</li><li><code>copyLink</code>:允许 copy 或者 link 操作</li><li><code>copyMove</code>:允许 copy 或者 move 操作</li><li><code>link</code>:可以在新地方建立与源的链接</li><li><code>linkMove</code>:允许 link 或者 move 操作</li><li><code>move</code>:一个项目可能被移动到新位置</li><li><code>all</code>允许所有的操作</li><li><code>uninitialized</code>效果没有设置时的默认值,则等同于all</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>effectAllowed <span class="token operator">=</span> <span class="token string">"move"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ev<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">"move"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fills</code>:属性在拖动操作中表示<strong>文件列表</strong>.如果操作不包含文件,则此列表为空</p><ul><li>所有type属性(attribute)为file的&lt;input&gt;元素都有一个files属性(property),用来存储用户所选择的文件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileItem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>types</code>:只读属性.返回一个我们在事件中设置的拖动数据格式(setData()).格式顺序与拖动操作中包含的数据顺序相同</p></li><li><p><code>items</code>:DataTransfer的items属性只读,是拖动操作中<code>DataTransferItem</code>的<code>DataTransferItemList</code>.</p><ul><li>一个<code>DataTransferItemList</code>对象,包含了表示拖动操作中被拖动项的DataTransferItem对象,每一个拖动项对应一个列表项</li><li>该列表包含了操作中每一项目的对应项,如果操作没有项目,则列表为空</li></ul></li></ol><h5 id="DataTransferItem"><a href="#DataTransferItem" class="headerlink" title="DataTransferItem"></a>DataTransferItem</h5><blockquote><p>每个<code>DataTransfer</code>都包含一个items属性,这个属性是DataTransferItem对象的list(列表).即(DataTransferItemList)</p></blockquote><ul><li><code>DataTransferItem</code>描述了一个拖拽项.在一个拖拽中,每一个<code>drag event</code>都有一个dataTransfer属性,它包含存有拖拽属性的<code>list</code>,每一项都是一个DataTransferItem</li></ul><blockquote><p>属性</p></blockquote><ol><li><code>kind</code>:拖拽项的种类,<code>string</code>或者是<code>file</code></li><li><code>type</code>:拖拽想的类型.一般是MIME类型</li></ol><ul><li><p>由于items并不是一个数组,这里使用的是<code>Array.from()</code>转换</p><ul><li>阻止了浏览器默认直接大开图片,拖动图片或者其他类型文件.可以在控制台看到打印</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>方法</p></blockquote><ol><li><code>getAsFile()</code>:<code>DataTransferItem</code>是一个文件,那此方法将返回拖拽项数据的File对象.否则返回null</li><li><code>getAsString(callback)</code>:当<code>kind</code>属性是一个普通Unicode字符串时,该方法会用<code>DataTransferItem</code>对象的kind属性作为实参来执行传入的回调函数<ul><li>该回调函数有权访问<code>DataTransferItem</code>的字符串数据</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> file <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAsFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>      <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      img<span class="token punctuation">.</span>src <span class="token operator">=</span> url      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拖拽实现图片的上传功能</li></ul><h5 id="DataTransferItemList"><a href="#DataTransferItemList" class="headerlink" title="DataTransferItemList"></a>DataTransferItemList</h5><blockquote><p><code>DataTransferItemList</code>对象是<code>DataTransferItem</code>对象的列表.该属性可以向列表中添加拖拽项,从列表中移除拖拽项和清空列表中所有的拖拽项</p></blockquote><ul><li><code>DataTransferItemList</code>对象就是每个<code>DragEvent</code>属性都有的<code>dataTransfer</code>属性中的<code>items</code>属性</li></ul><blockquote><p>属性</p></blockquote><ul><li><code>length</code>:李彪拖动项的数量</li></ul><blockquote><p>方法</p></blockquote><ol><li><code>add()</code>指定数据创建新的<code>DataTransferItem</code>,并将其添加到拖动的<code>DataTransferItemList</code>中<ul><li><code>add(data, type)</code>.type是MIME类型.例如<code>text/html</code>或者<code>text/plain</code></li><li><code>add(file)</code>.文件对象,不需要给出任何类型</li><li>如果该项目成功添加到DataTransferItemList中,则返回一个新创建的 <code>DataTransferItem</code>对象.如果关键的DataTransfer对象没有数据存储,则返回null</li></ul></li><li><code>remove(index)</code>:方法从列表中指定删除指定索引处的<code>DataTransferItem</code>.如果越界,则不会更改列表</li><li><code>clear()</code>:将<code>DataTransferItemList</code>中的所有<code>DataTransferItem</code>删除</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><code>DataTransfer</code>和<code>DataTransferItem</code>接口的一个主要的不同是前者使用同步的<code>getData()</code>方法去得到拖拽项的数据,而后者使用异步的<code>getAsString()</code>方法得到拖拽项的数据</li><li>使用<code>e.preventDefault()</code>这个属性可以取消一些不必要的浏览器的默认事件</li></ol><h2 id="mouse"><a href="#mouse" class="headerlink" title="mouse"></a>mouse</h2><blockquote><p>使用<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>配合绝对定位<code>absolute</code>来进行拖拽</p></blockquote><p><img src="./mouse.png" alt="mouse"></p><ol><li><code>mousedown</code>:这个阶段首先确定的就是鼠标相对于盒子内部的距离<code>ol = pageX-offsetLeft</code><ul><li>不光是<code>pageX</code>,也可以使用<code>clientX</code>.在合适的情况下选择合适的属性</li></ul></li><li><code>mousemove</code>:在执行阶段,目标是算出偏移量的距离.使用<code>pageX-ol</code>.<ul><li>ol就是鼠标距离拖拽目标的距离(是固定的)</li></ul></li><li><code>mouseup</code>:在抬起阶段,解绑mousemove事事件.</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  box1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bl <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetLeft    br <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetTop    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> bl <span class="token operator">+</span> <span class="token string">"px"</span>      box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> br <span class="token operator">+</span> <span class="token string">"px"</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;draggable&quot;&gt;&lt;a href=&quot;#draggable&quot; class=&quot;headerlink&quot; title=&quot;draggable&quot;&gt;&lt;/a&gt;draggable&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;该属性是一个&lt;strong&gt;全局属性&lt;/strong&gt;.是</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Observer</title>
    <link href="http://mail.zyjcould.ltd/2022/03/15/observer/"/>
    <id>http://mail.zyjcould.ltd/2022/03/15/observer/</id>
    <published>2022-03-15T07:05:01.000Z</published>
    <updated>2022-03-19T08:12:04.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><blockquote><p>网页开发中经常会和用户交互而使用一些监听事件(例如onclick,onchange等).如果对于一些用户不直接触发的元素(例如渐变等),那就需要使用Observer去监听</p></blockquote><ul><li>浏览器为我们提供了五种<code>Observer</code>(观察者)来监听这些变动:<code>MutationObserver</code>,<code>IntersectionObserver</code>,<code>PerformanceObserver</code>,<code>ResizeObserver</code>,<code>ReportingObserver</code></li><li>以下观察者api都是构造函数</li><li>观察者属于微任务,并且优先级小于Promise</li></ul><h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><blockquote><p><code>IntersectionObserver</code>(交叉观察者)用于观察一个元素是否在视窗可见.构造函数创建并返回一个新的<code>IntersectionObserver</code>对象</p><p>如果未指定或为空字符串,则缺省的值为属性的默认值</p><p>一般用于<strong>无限滚动</strong>,<strong>图片懒加载</strong>,<strong>埋点</strong>,<strong>控制动画&#x2F;视频执行</strong></p></blockquote><ul><li>无论是使用视口(body)还是其他元素作为根,API 的工作方式都相同,并且会<strong>异步</strong>查询观察目标元素的可见性发生变化,就会执行提供的回调函数</li><li>通过提供一种新方法来<strong>异步</strong>查询元素相对于其他元素或全局视口的位置</li><li><strong>异步处理</strong>消除了昂贵的<code>DOM</code>和样式查询,连续轮询以及使用自定义插件的需求</li><li>Intersection Observer的三个步骤<ol><li>创建观察者</li><li>定义回调事件</li><li>定义要观察的目标对象</li></ol></li></ul><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ol><li><code>IntersectionObserver.observe(target)</code>:告诉要观察的目标元素</li><li><code>IntersectionObserver.takeRecords()</code>:从IntersectionObserver的通知队列中删除所有待处理的通知,并将它们返回到IntersectionObserver对象的新Array对象中</li><li><code>IntersectionObserver.unobserve()</code>指定停止观察特定目标元素</li><li><code>IntersectionObserver.disconnect()</code>:停止IntersectionObserver对象观察任何目标</li></ol><h4 id="创建观察者"><a href="#创建观察者" class="headerlink" title="创建观察者"></a>创建观察者</h4><ul><li>接收一个回调函数.只要目标元素发生变化就会触发回调函数</li><li>第二个参数是一个可选项</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  root<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#scrollArea'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rootMargin<span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>  <span class="token comment">//阈值为1.0表示当100%的目标在选项指定的元素中可见时,将调用回调</span>  <span class="token comment">//每个阈值是观测目标的交集区域与边界框区域的比率</span>  threshold<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>option字段</p></blockquote><ol><li><code>root</code>:用作检查<strong>目标可见性的视口的元素</strong>.必须是目标的祖先.<span style="color:red">如果未指定或缺省为浏览器视口(html)</span></li><li><code>rootMargin</code><strong>根周围的边距</strong>(默认全部为0).语法类似于<code>margin</code>可以是百分比或者像素,用于在计算交集之前增大或缩小根元素边界框的矩形偏移量,有效的扩大或者缩小根的判定范围从而满足计算要求.(top,right,bottom,left)</li><li><code>threshold</code>:阈值.<strong>单个数字或数字数组</strong>.默认值为 0(这意味着只要有一个像素可见,就会运行回调)阈值是监听对象的交叉区域和边界区域的比例,每当监听对象超过阈值就会触发回调<ul><li>如果只想检测可见性何时超过 50% 标记,则可以使用值 0.5.</li><li>如果希望每次可见性每次超过 25% 时都运行回调,则应指定数组 [0, 0.25, 0.5, 0.75, 1]</li><li>如果值为 1.0 表示在每个像素可见之前,不会认为阈值已通过.</li></ul></li></ol><h4 id="监听观察的目标对象"><a href="#监听观察的目标对象" class="headerlink" title="监听观察的目标对象"></a>监听观察的目标对象</h4><blockquote><p>开启对目标对象的监听,如果没有</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>callback是添加监听后,当监听目标发生滚动变化时触发的回调函数.</p></blockquote><ul><li>第一个参数<code>entries</code>(数组),即<code>IntersectionObserverEntry</code>实例.描述了目标元素与root的交叉状态.</li></ul><table><thead><tr><th>属性</th><th align="center">说明</th></tr></thead><tbody><tr><td>boundingClientRect</td><td align="center">返回包含目标元素的边界信息,返回结果与element.getBoundingClientRect() 相同</td></tr><tr><td><strong>intersectionRatio</strong></td><td align="center">返回目标元素出现在可视区的比例</td></tr><tr><td>intersectionRect</td><td align="center">用来描述root和目标元素的相交区域</td></tr><tr><td><strong>isIntersecting</strong></td><td align="center">返回一个布尔值,下列两种操作均会触发回调:1.如果目标元素出现在root可视区,返回true.2. 如果从root可视区消失,返回false</td></tr><tr><td>rootBounds</td><td align="center">用来描述交叉区域观察者(intersection observer)中的根.</td></tr><tr><td>target</td><td align="center">目标元素:与根出现相交区域改变的元素 (Element)</td></tr><tr><td>time</td><td align="center">返回一个记录从 IntersectionObserver 的时间原点到交叉被触发的时间的时间戳</td></tr></tbody></table><ul><li>第二个参数就是<code>IntersectionObserver</code>这个实例对象本身.可以使用实例上的方法.</li></ul><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observe</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src        observe<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> rootMargin<span class="token operator">:</span> <span class="token string">"0px 600px 0px -600px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// observe遍历监听所有img节点</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先说一下<code>dataset</code>属性,可以在很多网站中看到这个data-为前缀的属性</p></blockquote><ul><li>dataset:浏览器很早就支持以键(data)-值命名的自定义属性了</li><li>设置属性:<code>Element.dataset.dart=&quot;dark&quot;</code>.例如上图代码(<code>item.target.dataset.dart=&quot;dark&quot;</code>)在挂载到标签时,会自动加上<code>data</code>这个键.就像这样<code>data-dart=&quot;dark&quot;</code></li><li>获取属性:<code>Element.dataset.src</code>,不需要加上<code>data-</code>前缀</li><li>删除属性:<code>delete Element.dataset.src</code></li><li>当然我们完全可以使用<code>getAttribute</code>等属性来进行自定义操作</li></ul><blockquote><p><code>HTMLCollectionOf&lt;&gt;</code>和<code>NodeListOf&lt;&gt;</code>的区别</p></blockquote><ul><li>参考:<a href="https://dom.spec.whatwg.org/#interface-htmlcollection">DOM 标准 (whatwg.org)</a></li><li>由于是历史遗留的产物,<code>HTMLCollectionOf</code>他返回的是一个集合,并不支持任何数组的高级api<ul><li>并且一切由<code>getElements...</code>返回的节点都是动态的集合类型,没有实现forEach等方法</li><li>动态的:如果基本的文档改变时.所有<code>HTMLCollection</code>对象会立即改变</li></ul></li><li><code>NodeListOf</code>是静态的.实现了所有的高级数组都有的api,<code>forEach</code>等<ul><li>了解了这些,使用元素选择的时候也可以使用<code>querySelectAll()</code>来选择元素.他会返回一个NodeListOf的类型</li></ul></li></ul><blockquote><p>理解可视区</p></blockquote><ul><li>重要的一点就是可视区的理解<ul><li><strong>intersectionRatio</strong>对应的是<code>threshold</code></li><li><strong>isIntersecting</strong>对应的是<code>rootMargin</code></li></ul></li><li>只要理解了<code>rootMargin</code>就很容易理解threshold的概念</li><li>理解margin,由于文档流的缘故,在设置margin的<code>top</code>或者<code>bottom</code>任意值的时候会移动盒子.如果设置<code>left</code>或者<code>right</code>必须同时设置才会改变盒子原来的位置,只设置一个值只会撑大盒子</li><li>例如上面图中设置的整体元素会向左移动600px.并且目标元素是相对于视口来说,但是理论上所有的图片都应该移动到视口之外的位置.并且不可以看到图片的懒加载.但是由于浏览器本身有一定的默认值,我们会得到最后一个图片是触发观察者实现懒加载的</li><li>明白了这个,就可以明白<code>threshold</code>,只有目标元素的可见性达到视口的一定比例(threshold的属性值)之后才可以触发观察者模式</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="IntersectionObserver" src="https://codepen.io/jack-zhang-1314/embed/YzYXYrV?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/YzYXYrV">  IntersectionObserver</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h3><ul><li><code>Mutation Observer</code>是<strong>异步</strong>触发,DOM的变动并不会马上触发,而是要等到当前所有DOM&#96;操作都结束才触发</li><li>可以通过配置项,监听目标DOM下子元素的变更记录</li><li>构造函数返回一个新的,包含监听 DOM 变化回调函数的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver"><code>MutationObserver</code></a> 对象</li><li>使用用途<ul><li>一般用于更高性能的数据绑定及响应</li><li>实现视觉差滚动</li><li>图片预加载</li><li>实现富文本编辑器</li></ul></li></ul><h4 id="Mutation实例方法"><a href="#Mutation实例方法" class="headerlink" title="Mutation实例方法"></a>Mutation实例方法</h4><ol><li><code>MutationObserver.observe(dom,options)</code>:阻止<code>MutationObserver</code> 实例继续接收的通知,直到再次调用其<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/observe"><code>observe()</code></a>方法,该观察者对象包含的回调函数都不会再被调用</li><li><code>MutationObserver.takeRecords()</code>:从MutationObserver的通知队列中删除所有待处理的通知,并将它们返回到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationRecord"><code>MutationRecord</code></a>(保存每次的变化信息)对象的新<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a></li><li><code>MutationObserver.disconnect()</code>:停止MutationObserver对象观察任何目标</li></ol><h4 id="Mutation创建观察者和监听目标对象"><a href="#Mutation创建观察者和监听目标对象" class="headerlink" title="Mutation创建观察者和监听目标对象"></a>Mutation创建观察者和监听目标对象</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MutationObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>MutationObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第一个参数是一个dom对象,被观察子节点(目标元素)的父节点</li><li>第二个参数options是一个[MutationObserverInit | MDN (mozilla.org)](https:&#x2F;&#x2F;  developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;conflicting&#x2F;Web&#x2F;API&#x2F;MutationObserver&#x2F;observe_2f2addbfa1019c23a6255648d6526387)对象<ul><li><code>attributeFilter</code>:(无默认值)要监视的特定属性名称的<strong>数组</strong>(如<code>[&#39;src&#39;,&#39;class&#39;]</code>).如果未包含此属性,则对所有属性的更改都会触发变动通知</li><li><code>attributes</code>:默认值false.设置true观察受监视元素的属性值变更</li><li><code>characterData</code>:无默认值.设为true监视指定目标节点或者子节点树中节点所包含的字符数据的变化</li><li><code>characterDataOldValue</code>:无默认值.设为true,是否观察文本的内容(文本节点)</li><li><code>childList</code>:默认值为false.设为true,监视木匾检点添加或删除新的子节点(不包括修改子节点以及子节点后代的变化).如果<code>subtree</code>为true,则包含子节点</li><li><code>subtree</code>:默认值为false,设置true,将监视范围扩展到目标节点以及子节点</li></ul></li><li>属性特定项<ul><li>其中调用 <code>observe()</code>方法时<code>childList</code>,<code>attributes</code>,<code>characterData</code> 或者<code>attributeOldValue</code>,<code>characterDataOldValue</code>两组中,至少有一个必须为 <code>true</code>,否则会抛出异常</li><li><code>attributeFilter/attributeOldValue</code> &gt; <code>attributes</code></li><li><code>characterDataOldValue</code> &gt; <code>characterData</code></li><li>避免重复的特定项,不需要同时设置同样的效果</li></ul></li></ul><h4 id="mutation回调函数"><a href="#mutation回调函数" class="headerlink" title="mutation回调函数"></a>mutation回调函数</h4><blockquote><p>同样是接收两个参数</p></blockquote><ul><li>第一个参数是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationRecord"><code>MutationRecords</code></a>,依然是一个数组.其中每个<code>MutationRecord</code>对象,记录着<code>DOM</code>每次发生变化的变动记录.<code>MutationRecord</code>对象包含了DOM的相关信息</li></ul><table><thead><tr><th>属性</th><th align="left">描述</th></tr></thead><tbody><tr><td><strong>target</strong></td><td align="left">被修改影响的目标 dom 节点</td></tr><tr><td><strong>type</strong></td><td align="left">变化的类型，也就是MutationObserverInit对象中的三种<code>attributes</code>,<code>characterData</code>或<code>childList</code>,并且返回该类型</td></tr><tr><td><strong>attributeName</strong></td><td align="left">针对<code>attributes</code>类型的变化时,返回被修改属性的名字(或者null)</td></tr><tr><td><strong>attributeNamespace</strong></td><td align="left">针对命名空间的<code>attributes</code>类型的变化.返回被修改属性的命名空间,或者null</td></tr><tr><td><strong>oldValue</strong></td><td align="left">如果在<code>MutationObserverInit</code>对象中启用(<code>attributeOldValue</code>或<code>characterDataOldValue</code>为true).则<code>attributes</code>或<code>characterData</code>的变化事件会返回变化之值或数据.<code>childList</code>类型的变化始终将这个属性设置为null</td></tr><tr><td><strong>addedNodes</strong></td><td align="left">针对<code>childList</code>的变化,返回包含变化中添加节点的<code>NodeList</code>,没有节点被添加,返回空<code>NodeList</code>数组</td></tr><tr><td><strong>previousSibling</strong></td><td align="left">对于<code>childList</code>变化.返回被添加或移除的节点之前的兄弟节点,或者null</td></tr><tr><td><strong>nextSibling</strong></td><td align="left">对于<code>childList</code>变化,返回被添加或移除的节点之后的兄弟节点.或者null</td></tr><tr><td><strong>removedNodes</strong></td><td align="left">对于<code>childList</code>变化,返回被移除的节点(没有则为null)</td></tr></tbody></table><ul><li>第二个参数就是<code>MutationObserver</code>这个实例对象本身.可以使用实例上的方法.</li></ul><blockquote><p><a href="https://juejin.cn/post/7036733000565915655"><code>MutationObserver</code>的引用</a></p></blockquote><ul><li><code>MutationObserver</code>对要观察的目标节点的引用属于<strong>弱引用</strong>,所以不会妨碍垃圾回收程序回收目标节点</li><li>目标节点对于<code>MutationObserver</code>是强引用.如果目标节点从DOM中被移除,随后被垃圾回收,则关联的 MutationObserver 也会被垃圾回收</li></ul><blockquote><p><code>MutationRecord</code>的引用</p></blockquote><ul><li><p><code>MutationRecord</code>实例至少包含对已有DOM节点的一个引用,即里面的target属性,如果变化是<code>childList</code>类型,则会包含多个节点的引用</p></li><li><p>记录队列和回调处理的默认行为是耗尽这个队列,处理每个<code>MutationRecord</code>,然后让它们超出作用域并被垃圾回收</p><ul><li><code>MutationObserver</code>核心是异步回调与记录队列模型.为了在大量变化事件发生时不影响性能,每次变化的信息<strong>由oberver实例决定</strong>.保存在<strong>MutationRecord</strong>实例中,然后添加到记录队列</li><li>记录队列对每个 <strong>MutationObserver</strong> 实例都是唯一的,是所有 <strong>DOM</strong> 变化事件的有序列表(DOM变化事件都会以数组的形式存在MutationRecord中),多次修改的信息会在一次回调中执行</li></ul></li><li><p>有时候需要保存某个观察者的完整变化记录,那么就保存所有的<code>MutationRecord</code> 实例,也就会保存它们引用的节点,而这会妨碍这些节点被回收</p></li><li><p>如果需要尽快地释放内存,可以从每个<code>MutationRecord</code>中抽取出最有用的信息,保存到一个新对象,然后释放<code>MutationRecord</code>中的引用</p></li></ul><h3 id="ResizeObserver-尚在开发"><a href="#ResizeObserver-尚在开发" class="headerlink" title="ResizeObserver(尚在开发)"></a>ResizeObserver(尚在开发)</h3><ul><li><p><strong><code>ResizeObserver</code></strong> 构造器创新一个新的<code>ResizeObserver</code>对象,用于接收<code>Element</code>内容区域的改变或<code>SVGElement</code>的边界框改变改变</p></li><li><p>用途:更智能的响应式布局(取代@media)以及响应式组件</p></li><li><p>由于resize事件会监听视窗的变化而不是元素的大小发生变化.可能一秒内会触发几十次,导致性能问题</p></li></ul><h4 id="Resize实例方法"><a href="#Resize实例方法" class="headerlink" title="Resize实例方法"></a>Resize实例方法</h4><ol><li><code>observe(target,options?)</code>:用于指定观察一个指定的<code>Element</code>或者<code>SVGElement</code></li><li><code>disconnect()</code>:停止和取消目标对象上所有对<code>Element</code>或者<code>SVGElement</code>监视</li><li><code>unobserve()</code>:用于结束一个指定的<code>Element</code>或者<code>SVGElement</code>监视</li></ol><h4 id="创建Resize实例"><a href="#创建Resize实例" class="headerlink" title="创建Resize实例"></a>创建Resize实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ResizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>options是一个指定观察设置的可选参数对象.目前只有一个可设置的选项<ul><li><code>box</code>:设置观察者将以哪种盒子模型来观察变动</li><li>可以设置为<code>content-box</code>(默认值),<code>border-box</code>或者<code>device-pixel-content-box</code></li></ul></li></ul><h4 id="Resize回调函数"><a href="#Resize回调函数" class="headerlink" title="Resize回调函数"></a>Resize回调函数</h4><ul><li><p>只接收一个<code>ResizeObserverEntry</code>实例<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserverEntry">ResizeObserverEntry - Web API 接口参考(mozilla.org)</a></p></li><li><p>目前只接受两个属性</p><ol><li><code>target</code>:当前改变尺寸大小的元素的引用</li><li><code>contentRect</code>:对改变尺寸大小的元素的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRectReadOnly"><code>DOMRectReadOnly</code></a>引用(包含x,y(坐标),width,height,top,right,bottom,left属性)</li></ol></li></ul><h3 id="PerformanceObserver"><a href="#PerformanceObserver" class="headerlink" title="PerformanceObserver"></a>PerformanceObserver</h3><blockquote><p><strong><code>PerformanceObserver</code></strong> 用于监测性能度量事件,在浏览器的性能时间轴记录下一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry">performance entries</a> 的时候将会被通知</p></blockquote><ul><li><p>用途:更细颗粒的性能监控.分析新跟那个对业务的影响(交互快&#x2F;慢是否会影响销量)</p></li><li><p>尽可能使用<code>PerformanceObserver</code>,而不是通过<code>Performance</code>获取性能参数及指标</p><ul><li><p>避免不知道性能事件啥时候会发生,需要重复轮训<code>timeline</code>获取记录。</p></li><li><p>避免产生重复的逻辑去获取不同的性能数据指标</p></li><li><p>避免其他资源需要操作浏览器性能缓冲区时产生竞态关系</p></li></ul></li></ul><blockquote><p>实例方法和MutationsObserver一样,但是<code>observe()</code>只接受<code>options</code></p></blockquote><h4 id="创建Performance实例"><a href="#创建Performance实例" class="headerlink" title="创建Performance实例"></a>创建Performance实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> PerformanceObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>PerformanceObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"measure"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>options</code>只接收一个entryTypes的键,值为一个性能检测数组</li></ul><table><thead><tr><th align="left">属性</th><th align="left">别名</th><th align="left">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left"><code>frame</code>, <code>navigation</code></td><td align="left">&#96;PerformanceFrameTiming, PerformanceNavigationTiming</td><td align="left">URL</td><td align="center">文件的地址</td></tr><tr><td align="left"><code>resource</code></td><td align="left">PerformanceResourceTiming</td><td align="left">URL</td><td align="center">文件请求资源解析的URL.只有在资源加载完毕后才会创建</td></tr><tr><td align="left"><code>mark</code></td><td align="left">PerformanceMark</td><td align="left">DOMString</td><td align="center">通过调用创建标记使用的名称.会在资源获取开始时创建(<code>performance.mark(name)</code>)</td></tr><tr><td align="left"><code>measure</code></td><td align="left">PerformanceMeasure</td><td align="left">DOMString</td><td align="center">通过调用创建度量时使用的名称.会在对资源操作时创建(<code>performance.measure(name)</code>)</td></tr><tr><td align="left"><code>paint</code></td><td align="left">PerformancePaintTiming</td><td align="left">DOMString</td><td align="center">渲染时间点的信息接口.找出那些花费太多时间去绘制的区域</td></tr></tbody></table><h4 id="Performance回调函数"><a href="#Performance回调函数" class="headerlink" title="Performance回调函数"></a>Performance回调函数</h4><blockquote><p>回调函数只接受一个参数,该参数是<code>PerformanceObserverEntryList</code>对象.该对象有三个接口</p></blockquote><ol><li><code>getEntries()</code>:返回所有的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry"><code>PerformanceEntry</code></a>对象组成的数组</li><li><code>getEntriesByType(entryType)</code>:返回指定的<code>entryType</code>类型组合成的<code>PerformanceEntry</code>对象数组</li><li><code>getEntriesByName(name)</code>:返回通过指定的属性名(例如<code>performance.measure(name)</code>的name)组合成<code>PerformanceEntry</code>对象的数组</li></ol><blockquote><p><code>PerformanceEntry</code>对象</p></blockquote><ul><li>属性值:<ul><li><code>name</code>:该性能条目的名字.例如mark,measure通过指定名称name</li><li><code>entryType</code>:上述的options包含所有的entryType属性</li><li><code>startTime</code>:返回<code>PorformanceEntry</code>的第一个时间戳<ol><li><code>frame</code>:当页面开始加载时,返回的时间戳</li><li><code>mark</code>:当使用<code>performance.mark(name)</code>创建mark标记之后返回的时间戳</li><li><code>measure</code>:当使用<code>performance.measure(name)</code>创建measure标记之后返回的时间戳</li><li><code>navigation</code>:返回值为0的时间戳</li><li><code>resource</code>:返回浏览器开始获取资源的时间戳</li></ol></li><li><code>duration</code>:该资源的耗时时间</li></ul></li><li>方法:<code>toJSON()</code>:返回 JSON 格式数据的PerformanceEntry对象</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Measure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://zyjcould.ltd/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> performanceObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>entryType<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performanceObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resource'</span><span class="token punctuation">,</span> <span class="token string">'mark'</span><span class="token punctuation">,</span> <span class="token string">'measure'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'registered-observer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">'button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ReportingObserver-实验"><a href="#ReportingObserver-实验" class="headerlink" title="ReportingObserver(实验)"></a>ReportingObserver(实验)</h3><blockquote><p><code>ReportingObserver()</code> 构造函数会创建一个新的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver"><code>ReportingObserver</code></a> 对象实,该实例可用于收集和获取reports</p></blockquote><ul><li>使用:将浏览器弃用的<code>API</code>或者运行时<strong>浏览器的干预行为</strong>由自己约束<ul><li>违反浏览器的选项时</li><li>JS的异常和错误(替代<code>window.onerror</code>)</li><li>未处理的promise的<code>reject</code>(替代<code>window.onunhandledrejection</code>)</li></ul></li></ul><blockquote><p>ReportingObserver实例方法和<code>MutationObserver</code>的实例方法一样.但是<code>observer()</code>不需要任何参数</p></blockquote><h4 id="创建Reporting实例"><a href="#创建Reporting实例" class="headerlink" title="创建Reporting实例"></a>创建Reporting实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  types<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'deprecation'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  buffered<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> reportingObserver<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReportingObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>options提供两个属性,<code>types</code>和<code>buffered</code></li></ul><ol><li><p><code>types</code>:提供三个属性值</p><ul><li><code>deprecation</code>:浏览器运行时遇到弃用的api会打印这个选项</li><li><code>intervention</code>:浏览器自己的干预行为.可能遇到一些不安全的行为(如带有不安全的iframe,过时的api等)</li><li><code>crash</code>:浏览器崩溃时的行为</li></ul></li><li><p><code>buffered</code>:布尔值,如果时true,可以查看创建观察者之前生成的报告(使用于延迟加载的情况,不会错过页面加载之前发生的事情)</p></li></ol><h4 id="Reporting回调函数"><a href="#Reporting回调函数" class="headerlink" title="Reporting回调函数"></a>Reporting回调函数</h4><blockquote><p>提供两个参数,第一个参数是一个<code>reports</code>数组对象.同样也可以通过<code>takeRecords()</code>实例方法获取这些数组</p></blockquote><ul><li><code>report</code>对象有三个属性:<code>body</code>,<code>type</code>,<code>url</code><ul><li><code>type</code>:返回的是report类型,即options选项中的types</li><li><code>url</code>:返回的是生成report的文档</li><li><code>body</code>:返回report正文,包含详细的report对象,目前只有两种<strong>body对象</strong>(却决于type的返回值)<ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DeprecationReportBody"><code>DeprecationReportBody、InterventionReportBody</code></a><ul><li><code>id</code>:已弃用的功能或 API 的字符串</li><li><code>anticipatedRemoval</code>:Data对象,表示应从浏览器中要删除的日期.如果日期位置,返回null</li><li><code>message</code>:字符串,api的弃用说明.包括新功能的取代说明</li><li><code>sourceFile</code>:string类型,使用已弃用api的源文件路径.已知或其他返回null</li><li><code>lineNumber</code>:number类型,表示源文件中使用已弃用的功能的行.已知或其他返回null</li><li><code>columnNumber</code>:number类型,表示源文件中使用已弃用的功能的行&#x3D;列.已知或其他返回null</li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/CrashReportBody"><code>CrashReportBody</code></a><ul><li><code>reason</code>:表示崩溃原因的字符串.如果返回的是<code>oom</code>:浏览器内存不足.如果返回的是<code>unresponsive</code>:页面由于无响应而被终止</li></ul></li></ol></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Observer&quot;&gt;&lt;a href=&quot;#Observer&quot; class=&quot;headerlink&quot; title=&quot;Observer&quot;&gt;&lt;/a&gt;Observer&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;网页开发中经常会和用户交互而使用一些监听事件(例如onclick,</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>blob</title>
    <link href="http://mail.zyjcould.ltd/2022/03/07/blob/"/>
    <id>http://mail.zyjcould.ltd/2022/03/07/blob/</id>
    <published>2022-03-07T12:32:14.000Z</published>
    <updated>2022-03-26T10:37:34.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h2><blockquote><p>blob对象使用不可变的,原始数据的类文件对象.他的数据可以是文本或者二进制的格式进行读取,同时也可以转换成<code>ReadableStream</code>来读取操作</p></blockquote><ol><li>Blob不一定表示js的原生格式的数据.<code>File</code>接口基于Blob,继承了blob的功能,并将起扩展使其支持用于系统上的文件</li><li>要从其他非blob对象和数据构造一个 <code>Blob</code>,请使用 <code>Blob()</code> 构造函数</li><li>要创建一个 blob 数据的子集 blob,请使用<code>slice()</code>方法</li><li>要获取用户文件系统上的文件对应的Blob对象,请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a>文档</li></ol><h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob()"></a>Blob()</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> aBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span> array<span class="token punctuation">,</span> options <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>array</strong>是由:<code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 Array ,或者其他类似对象的混合体,它将会被放进 Blob</li><li><strong>options</strong>施一公可选的<code>BlobPropertyBag</code>字典:<ol><li><code>type</code>,默认值为 “”,为<strong>数组内容的MIME类型</strong></li><li><code>endings</code>,默认值为”transparent”,用于指定包含行结束符\n的字符串如何被写入<ul><li><code>&quot;native&quot;</code>,代表行结束符会被更改为适合宿主操作系统文件系统的换行符</li><li><code>&quot;transparent&quot;</code>,代表会保持blob中保存的结束符不变</li></ul></li></ol></li></ul><blockquote><p>属性(只读)</p></blockquote><ul><li><code>Blob.size</code>:Blob 对象中所包含数据的大小(字节)</li><li><code>Blob.type</code>:一个字符串,表明该Blob对象所包含数据的<strong>MIME</strong>类型.(未知则是<code>&quot;&quot;</code>)</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><code>blob.text()</code>:返回一个 promise 对象,以 <code>resolve</code> 状态返回一个以文本形式包含 blob 中数据的 <code>USVString</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"xhr"</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>blob<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>blob.stream()</code>:方法返回一个<strong>ReadableStream</strong>对象,读取它将返回包含在Blob中的数据</li><li><code>blob.slice()</code>:方法创建并返回一个新对象,该对象包含来自调用它的<code>blob</code>子集的数据<ol><li><code>start</code>可选.默认值为 0.<span style="color:red">Blob中的索引,指示要包含在新 Blob 中的第几个字节</span>.指定的值大于源Blob的大小,默认为0,并且不包含任何数据.如果指定负值,则会将其视为从 Blob 末尾到开头的偏移量.例如,-10 将是 Blob 中距离最后一个字节的第 10 个字节.</li><li><code>end</code>可选.缺省值为<strong>size</strong>lob 中的索引,指示 Blob 中的末尾字节(不包含此索引中的字节).如果指定负值,和start一样.</li><li><code>contentType</code>可选.默认值为空字符串.要分配给新 Blob 的内容类型</li></ol></li><li><code>blob.arrayBuffer()</code>:返回一个 Promise,该 Promise 将 blob 的内容解析为<code>ArrayBuffer</code>中包含的二进制数据</li></ul><blockquote><p>文件的下载.&lt;a&gt;中在h5中有一个新属性<code>download</code>(可以设置下载的名称),当链接的地址是同源的时候会进行下载</p></blockquote><ul><li>windows上的<code>URL.createObjectURL()</code>静态方法创建一个<code>DOMString</code>,其中返回值表示参数中给定对象的URL.</li><li>URL 生存期与创建文档的窗口中的文档相关联.新对象 URL 表示指定的<code>File对象</code>或<code>Blob 对象</code>.</li><li>要释放URL对象,请调用<code>revokeObjectURL()</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="color: red;font-size:5rem">hello world&lt;/div></span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="File"><a href="#File" class="headerlink" title="File()"></a>File()</h3><blockquote><p>首先了解<code>Filelist</code>,此类型是由HTML&lt;input type&#x3D;”file”&gt;元素的属性返回</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileItem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>File对象:文件列表会放在在files数组中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fileItem'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>常情况下,<code>File</code>对象是来自用户在一个<input>元素上选择文件后返回的 <code>FileList</code> 对象</p></blockquote><ul><li>由于<code>File</code>对象是特殊类型的<code>Blob</code>,且可以用在任意的<code>Blob</code>类型的<code>context</code>中</li><li>File对象同样是构造函数(<code>new File()</code>).除了继承了Blob的方法属性以外,还有以下方法</li></ul><blockquote><p>属性</p></blockquote><ol><li><code>file.lastModified</code>:返回所引用文件最后修改日期, 为自 1970年1月1日0:00 以来的毫秒数</li><li><code>file.lastModified</code>返回当前文件的最后修改日期,如果无法获取到文件的最后修改日期,则使用当前日期来替代</li><li><code>file.name</code>:返回文件的名称.由于安全原因,返回的值并不包含文件路径.</li></ol><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader()"></a>FileReader()</h3><blockquote><p><code>FileReader</code>对象允许网络程序或异步读取存储在计算机上应用的数据文件(或原始数据用户)的内容,使用File或Blob 指定要读取的文件</p></blockquote><ul><li>通常情况下:文件对象可以是来自其中一个&lt;input&gt;元素上选择文件的<code>FileList</code>对象</li><li>同样这是一个构造函数<code>new FileReader()</code></li></ul><blockquote><p>属性</p></blockquote><ol><li><p><code>FileReader.error</code>:只读.表示在读取文件时发生的错误</p></li><li><p><code>FileReader.readyState</code>:只读.表示FileReader状态的数字</p><table><thead><tr><th>特征名</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>EMPTY</td><td>0</td><td>还没有加载数据</td></tr><tr><td>LOADING</td><td>1</td><td>数据正在被加载</td></tr><tr><td>DONE</td><td>2</td><td>已完成全部的读取请求</td></tr></tbody></table></li><li><p><code>FileReader.result</code>:只读.该属性仅在读取操作完成才有效,数据格式的使用后的方法来启动读取操作.</p></li></ol><blockquote><p>FileReader接口的事件</p></blockquote><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>中断</td></tr><tr><td>onerror</td><td>出错</td></tr><tr><td>onloadstart</td><td>开始</td></tr><tr><td>onprogress</td><td>正在读取</td></tr><tr><td>onload</td><td>成功读取</td></tr><tr><td>onloadend</td><td>读取完成,无论成功失败</td></tr></tbody></table><blockquote><p>FileReader接口有4个方法,其中3个用来读取文件,另一个用来中断读取.无论读取成功或失败,方法并不会返回读取结果,这一结果存储在result属性中</p></blockquote><table><thead><tr><th>方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>readAsArrayBuffer</td><td>file&#x2F;blob</td><td>读取指定Blob  或文件的内容.完成后<code>readyState</code>变为Done,并且触发<code>loadend</code>.<code>result</code>以<code>ArrayBufer</code>返回文件的数据</td></tr><tr><td>readAsText</td><td>file&#x2F;blob</td><td><code>result</code>以文本字符串的形式返回文件内容.其余与上个属性相同</td></tr><tr><td>readAsDataURL</td><td>file&#x2F;blob</td><td><code>result</code>以url的形式返回文件的数据(文件的数据会以base64的编码表示).其余与上个属性相同</td></tr><tr><td>abort</td><td>(none)</td><td>终端读取操作</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> fileReader<span class="token punctuation">.</span>result    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;blob&quot;&gt;&lt;a href=&quot;#blob&quot; class=&quot;headerlink&quot; title=&quot;blob&quot;&gt;&lt;/a&gt;blob&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;blob对象使用不可变的,原始数据的类文件对象.他的数据可以是文本或者二进制的格式进行读取,同时也</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TS装饰器</title>
    <link href="http://mail.zyjcould.ltd/2022/03/05/ts-zhuang-shi-qi/"/>
    <id>http://mail.zyjcould.ltd/2022/03/05/ts-zhuang-shi-qi/</id>
    <published>2022-03-05T04:00:53.000Z</published>
    <updated>2022-03-19T08:12:04.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><p>装饰器是一种特殊的类型声明,他能被附加到类声明,方法,访问符,属性或者参数上,可以修改类的行为.装饰器使用<code>@experssion</code>的形式(更像是<code>defineProperty</code>的语法糖)<span style="color:red">他会在运行时被调用,被装饰器的声明信息做为参数传入</span></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(target: any) &#123;  console.log(&quot;hello world&quot;)&#125;@testclass A &#123;&#125;&#x2F;&#x2F;hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>类(Class)</li><li>类属性(Class Property)</li><li>类方法(Class Method)</li><li>类访问器(Class Accessor)</li><li>类方法参数(Class Method Parameter)</li></ol><ul><li>因此,应用装饰器很像组成一系列函数,非常像高阶函数或类.使用装饰器,我们可以轻松实现代理模式来减少代码</li><li>对于这几种装饰器,都可以使用工厂模式来达到传入想要修改属性的目的(或者其它)</li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a><a href="proxy.md">代理模式</a></h3><blockquote><p>代理模式是在访问真正对象时,提供额外的逻辑,检查对真实对象的操作.例如在对真实对象操作占用大量资源时,进行缓存,或者在调用对真实对象的操作之前检查前提条件</p></blockquote><ul><li>例如javascript中的proxy就是一个典型的代理模式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被读取</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被设置为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name<span class="token comment">//name 被读取</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token comment">//name 被设置为 lisi</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//lisi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义装饰器"><a href="#定义装饰器" class="headerlink" title="定义装饰器"></a>定义装饰器</h3><blockquote><p>由于TypeScript中的装饰器还在实验性语法,需要在<code>tsconfig.json</code>编译选项中开启</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装饰器的执行时机:装饰器对类的行为的改变,是<strong>代码编译时发生的</strong>(不是TypeScript编译,而是js在执行机中的编译阶段),并不是在运行是.<span style="color:red">本质就是装饰器是编译时执行的函数</span></li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul><li>类装饰器在类声明之前绑定,可以用来监视,或者修改或者替换类定义</li><li>在执行类装饰器函数的时候,会把绑定的类作为器唯一的参数传递给装饰器</li><li>参数:<strong>类的构造器</strong><ul><li>如果装饰器返回一个新的类,他会用新的类替换原有的类的定义</li><li><span style="color:red">类装饰器适合用于继承一个现有类并添加一些属性和方法</span></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any) &#123;    person.prototype.name &#x3D; &quot;jack&quot;    person.prototype.say &#x3D; function () &#123;      console.log(this.name)    &#125;  &#125;&#125;@testclass Person &#123;  name: string  constructor(name: string) &#123;    this.name &#x3D; name  &#125;  say() &#123;    console.log(&quot;lisi&quot;)  &#125;&#125;new Person(&quot;fw&quot;).say()&#x2F;&#x2F;fwconsole.log(new Person(&quot;fw&quot;).name)&#x2F;&#x2F;fw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>name属性并不会像想象中的那样变为:<strong>jack</strong>.那首先我们得明白他的初始化机制<ol><li>在Person类初始化之后,会先执行装饰器,而不是直接使用new关键字</li><li>name首先被初始化为<code>jack</code>,然后使用new产生对象,传入的<code>fw</code>会覆盖<code>jack</code>属性</li></ol></li></ul><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><ul><li><p>方法装饰器写在一个方法的声明之前</p></li><li><p>方法装饰器可以用来监视,修改或者替换方法定义</p></li><li><p>方法装饰器表达式会在运行时当作函数被调用,传入一下三个参数</p><ol><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong></li><li>被绑定方法的名字</li><li>被绑定方法的属性描述符</li></ol></li><li><p>方法装饰器更像是<code>defineProperty</code>的一个语法糖</p></li></ul><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>当试图获取属性时所返回的值</td><td>undefined</td></tr><tr><td>writable</td><td>该属性是否可写</td><td>false</td></tr><tr><td>enumerable</td><td>该属性在for in循环中是否会被枚举</td><td>false</td></tr><tr><td>configurable</td><td>该属性是否可被删除</td><td>false</td></tr><tr><td>set()</td><td>属性的更新操作所调用的函数</td><td>false</td></tr><tr><td>get()</td><td>获取属性值时所调用的函数</td><td>false</td></tr></tbody></table><ol><li>数据描述符:enumerable,configurable,value,writable</li><li>存取描述符:enumerable,configurable,set(),get()</li><li>如果定义了set(),get()之后,再定义value,writable会<span style="color:red">报错</span></li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(target: any, key: string, descriptor: PropertyDescriptor) &#123;  console.log(target)  &#x2F;&#x2F;&#123;  &#125;  console.log(key)&#x2F;&#x2F;say  console.log(descriptor)  &#x2F;&#x2F;&#123;  &#x2F;&#x2F;value: [Function (anonymous)],  &#x2F;&#x2F;writable: true,  &#x2F;&#x2F;enumerable: false,  &#x2F;&#x2F;configurable: true  &#x2F;&#x2F;&#125;  descriptor.value &#x3D; function () &#123;    console.log(&quot;test&quot;)  &#125;&#x2F;&#x2F;输出test,而不是&#96;我是fw&#96;&#125;class Person &#123;  @test  say() &#123;    console.log(&quot;我是fw&quot;)  &#125;  sayName() &#123;    console.log(&quot;我是zhangsan&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然使用工厂函数会是更好的选择</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function configurable(value: boolean) &#123;  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;    descriptor.configurable &#x3D; value;  &#125;;&#125;@configurable(false)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h4><ul><li>访问器装饰器声明在一个访问器的声明之前.</li><li>访问器装饰器应用于访问器的属性描述符并且可以用来监视,修改或替换一个访问器的定义</li><li>访问器装饰器表达式会在运行时当作函数被调用,传入下列3个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong>.</li><li>成员的名字.</li><li>成员的属性描述符.</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any, key: string, descriptor: PropertyDescriptor) &#123;    console.log(target) &#x2F;&#x2F;&#123;&#125;,原型对象上并没有任何属性    console.log(key) &#x2F;&#x2F;name.构造器的名称    console.log(descriptor)    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;get: [Function: get name],    &#x2F;&#x2F;set: [Function: set name],    &#x2F;&#x2F;enumerable: false,    &#x2F;&#x2F;configurable: true    &#x2F;&#x2F;&#125;    descriptor.set &#x3D; function (value) &#123;      value &#x3D; value + &quot;fw&quot;      target.myName &#x3D; value    &#125;    descriptor.get &#x3D; function () &#123;      return target.myName    &#125;  &#125;&#125;class Person &#123;  private _name: string  myName!: string  constructor(name: string) &#123;    this._name &#x3D; name  &#125;  @test  get name() &#123;    return this._name  &#125;  set name(value) &#123;    this._name &#x3D; value  &#125;&#125;const p &#x3D; new Person(&quot;zhangsan&quot;)p.name &#x3D; &quot;lisi&quot;console.log(p.name)&#x2F;&#x2F;&quot;lisifw&quot;console.log(p)&#x2F;&#x2F; &#123; _name: &#39;zhangsan&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<span style="color:red">TypeScript不允许同时装饰一个成员的get和set访问器</span></li></ul><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><ul><li>参数装饰器写在一个参数声明之前.</li><li>参数装饰器表达式会在运行时当作函数被调用,传入下列3个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong>.</li><li>参数所在的方法名称.</li><li>参数在参数列表中的索引.</li></ul></li></ul><blockquote><p>注意:属性装饰器,参数装饰器最常见的应用场景就是配合元数据(reflect-metadata),在不改变原有结构的同时添加一些额外的信息</p></blockquote><ul><li>但是元数据目前也是在提案中, 也还没有纳入正式的标准.所以对于装饰器而言, 我们只需要了解即可,因为提案中的所有内容将来都是有可能被修改的(可能会被修改)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any, proptyName: string, index: number) &#123;    console.log(target)&#x2F;&#x2F;&#123;&#125;    console.log(proptyName)&#x2F;&#x2F;say    console.log(index)&#x2F;&#x2F;1  &#125;&#125;class Person &#123;  say(age: number, @test() name: string): void &#123;    console.log(age + name)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><ul><li>属性装饰器写在一个属性声明之前</li><li>属性装饰器表达式会在运行时当作函数被调用,传入下列2个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong></li><li>成员的名字</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(flag:string)&#123;  console.log(flag);&#x2F;&#x2F;hello  return (target: any, propertyKey: string) &#x3D;&gt;&#123;      console.log(target);&#x2F;&#x2F;class[person]      console.log(propertyKey);&#x2F;&#x2F;age  &#125;&#125;class Person&#123;  name:string;  @test(&#39;hello&#39;)  static age:number;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h3><blockquote><p>不同装饰器的执行顺序是固定的</p></blockquote><ol><li>实例成员:方法&#x2F;访问器&#x2F;属性装饰器-&gt;参数装饰器</li><li>静态成员:方法&#x2F;访问器&#x2F;属性装饰器-&gt;参数装饰器</li><li>类装饰器</li><li>构造器:参数装饰器</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f(key: string): any &#123;  console.log(&quot;evaluate: &quot;, key)  return function () &#123;    console.log(&quot;call: &quot;, key)  &#125;&#125;@f(&quot;Class Decorator&quot;)class C &#123;  @f(&quot;Static Property&quot;)  static prop?: number  @f(&quot;Static Method&quot;)  static method(@f(&quot;Static Method Parameter&quot;) foo: number) &#123;&#125;  constructor(@f(&quot;Constructor Parameter&quot;) foo: number) &#123;&#125;  @f(&quot;Instance Method&quot;)  method(@f(&quot;Instance Method Parameter&quot;) foo: number) &#123;&#125;  @f(&quot;Instance Property&quot;)  prop?: number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;实例方法-&gt;参数evaluate:  Instance Methodevaluate:  Instance Method Parametercall:  Instance Method Parametercall:  Instance Method&#x2F;&#x2F;实例属性evaluate:  Instance Propertycall:  Instance Property&#x2F;&#x2F;静态属性evaluate:  Static Propertycall:  Static Property&#x2F;&#x2F;静态方法evaluate:  Static Methodevaluate:  Static Method Parametercall:  Static Method Parametercall:  Static Method&#x2F;&#x2F;类装饰器-&gt;构造函数:参数装饰器evaluate:  Class Decoratorevaluate:  Constructor Parametercall:  Constructor Parametercall:  Class Decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于属性访问装饰器(动态&#x2F;静态)而言,会按照声明的顺序声明它们的装饰器的顺序</li></ul><blockquote><p>同样方法中不同参数的装饰器的执行顺序是相反的,最后一个参数的装饰器会最先被执行</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class C &#123;  method(@f(&quot;Parameter Foo&quot;) foo: number, @f(&quot;Parameter Bar&quot;) bar: number) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">evaluate:  Parameter Fooevaluate:  Parameter Barcall:  Parameter Barcall:  Parameter Foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一些可能用到的场景</p></blockquote><ul><li>Before&#x2F;After钩子.</li><li>监听属性改变或者方法调用.</li><li>对方法的参数做转换.</li><li>添加额外的方法和属性.</li><li>运行时类型检查.</li><li>自动编解码.</li><li>依赖注入.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;装饰器是一种特殊的类型声明,他能被附加到类声明,方法,访问符,属性或者参数上,可以修改类的行为.装饰器使用</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://mail.zyjcould.ltd/2022/03/04/di-gui/"/>
    <id>http://mail.zyjcould.ltd/2022/03/04/di-gui/</id>
    <published>2022-03-04T14:11:59.000Z</published>
    <updated>2022-03-19T08:12:04.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归-recursion"><a href="#递归-recursion" class="headerlink" title="递归(recursion)"></a>递归(recursion)</h2><blockquote><p>程序调用自身的技巧就被称之为递归(recursion)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function factorial(n: number): number &#123;  if (n &lt;&#x3D; 1) &#123;    return 1  &#125;  return n * factorial(n - 1)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从阶乘这里看出,递归是需要条件的</p></blockquote><ul><li>递归序要具备<strong>边界条件</strong>,<strong>递归前进段</strong>以及<strong>递归返回段</strong>.当边界条件不满足时,递归前进,当边界满足时,递归返回.例如阶乘中的<code>n&lt;=1</code>就是边界条件</li><li>如何使用递归  <ol><li>子问题须与原始问题为同样的事,使用递归化繁为简</li><li>不能无限制的调用本身,必须要有一个出口,化简为非递归的状态处理</li></ol></li></ul><blockquote><p>执行上下文栈</p></blockquote><ul><li>当执行一个函数的时候,就会创建一个执行上下文,并且压入执行上下文栈,当函数执行完毕,就会将函数从执行上下文栈中弹出.</li><li>当使用阶乘的时候,ts(或者是说js)会不停的创建执行上下文压入上下文栈中,对于内存而言,这是非常大的消耗</li><li>使用尾调用优化</li></ul><h3 id="尾调用-Tail-Call"><a href="#尾调用-Tail-Call" class="headerlink" title="尾调用(Tail Call)"></a><a href="https://www.ruanyifeng.com/blog/2015/04/tail-call.html">尾调用(Tail Call)</a></h3><blockquote><p>尾调用就是某个函数的最后一步调用另一个函数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>但是在最后一步调用函数之后不能有别的操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 调用函数之后有别的操作,即使语义完全一样</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用函数之后有别的操作</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>尾调用不一定出现在函数尾部,只要是最后一步操作即可</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>尾调用优化</p></blockquote><ul><li>函数调用会在内存中形成一个<code>调用记录</code>(调用帧).保存调用的位置何内部的变量信息</li><li>如果函数A的内部调用函数B,那么A 的调用记录上当,会形成一个调用记录B.等到B运行结束.才会将结果返回A.如果还有别的的调用记录栈,会依次形成一个调用栈</li><li>由于<strong>尾调用是函数</strong>的最后一步操作,所以是不需要保留外层函数的调用记录,因为调用位置,内部变量等都用不到了,只要直接使用内层函数的调用记录,取代外层函数的调用记录就可以了</li></ul><ol><li><p>尾调用的函数执行上下文的变化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 伪代码</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>g<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>非尾调用的函数执行上下文</p><ul><li>由于返回函数<code>g(x)+1</code>中的g(x)需要执行完之后(执行的环境就是f(x)的上下文),再加1</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>g<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>那么可以使用尾调用来重写阶乘的递归<ul><li>由于每次调用之后,只会保留一个调用记录,所以复杂度只有O(1)</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function factorial(n: number, total: number): number &#123;  if (n &lt;&#x3D; 1) &#123;    return total  &#125;  return factorial(n - 1, n * total)&#125;console.log(factorial(4, 1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现尾递归"><a href="#实现尾递归" class="headerlink" title="实现尾递归"></a>实现尾递归</h4><blockquote><p>尾递归函数确保最后异步只调用自身.需要把所有的内部变量变成函数的参数(这里就可以使用柯里化来增加函数的复用)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;递归-recursion&quot;&gt;&lt;a href=&quot;#递归-recursion&quot; class=&quot;headerlink&quot; title=&quot;递归(recursion)&quot;&gt;&lt;/a&gt;递归(recursion)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;程序调用自身的技巧就被称之为递</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>函数组合&amp;记忆</title>
    <link href="http://mail.zyjcould.ltd/2022/02/27/han-shu-zu-he-ji-yi/"/>
    <id>http://mail.zyjcould.ltd/2022/02/27/han-shu-zu-he-ji-yi/</id>
    <published>2022-02-27T11:35:27.000Z</published>
    <updated>2022-03-19T08:12:04.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纯函数-Purity"><a href="#纯函数-Purity" class="headerlink" title="纯函数(Purity)"></a>纯函数(Purity)</h2><ol><li>应始终返回相同的值.不管调用该函数多少次,或者什么时候调用都是一样的</li><li>自包含(不包含全局变量)</li><li>不应修改程序的状态或引起副作用(修改全局变量)</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;纯函数const greet &#x3D; (name:string) &#x3D;&gt; &#96;hello, $&#123;name&#125;&#96;greet(&#39;world&#39;)&#x2F;&#x2F;不是纯函数,修改了外部的状态let greeting:stringconst greet &#x3D; (name:string) &#x3D;&gt;&#123;   greeting &#x3D; &#96;hello, $&#123;name&#125;&#96;&#125;greet(&#39;world&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>副作用(Side effects):如果函数与外部可变状态进行交互,则它就是具有副作用的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;Date对象就是一个很常见的具有副作用的函数const differentEveryTime &#x3D; new Date()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><blockquote><p>幂等性和纯函数还是有很大区别的,甚至说可以说是毫无无关系</p></blockquote><ol><li>幂等性函数可以具有副作用</li><li>函数执行多次返回相同的结果(<code>f(f(x))=f(x)</code>),则此函数具有幂等性</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">Math.abs(Math.abs(-10))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数组合-Function-Composing"><a href="#函数组合-Function-Composing" class="headerlink" title="函数组合(Function Composing)"></a>函数组合(Function Composing)</h2><blockquote><p>接收多个函数作为参数,从右到左,一个函数的输入为以一个函数的输出</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const compose &#x3D;  (f: Function, g: Function): Function &#x3D;&gt;  (a: Function): Function &#x3D;&gt;    f(g(a))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>做一个反转函数,并且获取第一个索引的例子</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;不能确定返回索引的类型,可以使用泛型,这里就用any了function first&lt;T&gt;(arr: T[]): any &#123;  return arr[0]&#125;function reverse&lt;T&gt;(arr: T[]): T[] &#123;  return arr.reverse()&#125;let last &#x3D; compose(first, reverse)console.log(last([1, 2, 3, 4, 5]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然redux给出了一个更好的实现(将函数的个数情况也考虑周全了)</p></blockquote><ul><li>其实还有一个问题就是在闭包中写泛型其实是没有检查的效果</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function compose(...fns: Function[]) &#123;  if (fns.length &#x3D;&#x3D;&#x3D; 0) &#123;    return (arg: Function) &#x3D;&gt; arg  &#125;  if (fns.length &#x3D;&#x3D;&#x3D; 1) &#123;    return fns[0]  &#125;  return fns.reduce(    (a, b) &#x3D;&gt;    &#x2F;&#x2F;Writing a type here won&#39;t do any good      &lt;T&gt;(...args: T[]): Function &#x3D;&gt;        a(b(...args))  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pointfree"><a href="#Pointfree" class="headerlink" title="Pointfree"></a><a href="https://www.ruanyifeng.com/blog/2017/03/pointfree.html">Pointfree</a></h3><blockquote><p>这是函数式编程的答案,利用函数组合和柯里化可以达到一个很好的函数式效果</p></blockquote><ul><li><a href="https://ramdajs.com/">ramda</a>中所有的函数都支持柯里化</li><li>阮老师的教程:<a href="https://www.ruanyifeng.com/blog/2017/03/ramda.html">https://www.ruanyifeng.com/blog/2017/03/ramda.html</a></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//ramda</span>fn <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义<code>f1</code>,<code>f2</code>,<code>f3</code>可以推算出<code>fn</code>.整个过程中.根本不需要知到其中的参数变化</li><li>换一种当时可以理解为,只需要将一些简单的步骤合成到一起,定义成一种参数无关的合成运算</li><li>这种风格就是<code>Pointfree</code>.例如上面的例子就是一个<code>Pointfree</code></li></ul><blockquote><p><code>Pointfree</code>的本质就是使用一些通用的函数,组合除各种复杂的运算.shang层运算不直接操作数据</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Iperson &#123;  name: string  role: string&#125;const data: Iperson[] &#x3D; [  &#123; name: &quot;张三&quot;, role: &quot;worker&quot; &#125;,  &#123; name: &quot;李四&quot;, role: &quot;worker&quot; &#125;,  &#123; name: &quot;王五&quot;, role: &quot;manager&quot; &#125;,]type Iper &#x3D; keyof Ipersonconst isWorker &#x3D; (s: string) &#x3D;&gt; s &#x3D;&#x3D;&#x3D; &quot;worker&quot;&#x2F;&#x2F;定义查找角色的函数,在这里嵌套会增加耦合const prop &#x3D; (p: Iper, obj: Iperson) &#x3D;&gt; isWorker(obj[p])&#x2F;&#x2F;指定读取role的值const propRole &#x3D; curry(prop)(&quot;role&quot;)data.filter(propRole)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不适用<code>compose Function</code>会大大增加函数的耦合度.这就可以使用函数组合的思想降低耦合,避免洋葱模型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const prop &#x3D; (p: Iper, obj: Iperson) &#x3D;&gt; obj[p]console.log(data.filter((_, index) &#x3D;&gt; compose(isWorker, propRole)(data[index])))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数记忆"><a href="#函数记忆" class="headerlink" title="函数记忆"></a>函数记忆</h2><blockquote><p>只要把参数和对应的结果数据存到一个对象中,调用时,判断参数对应的数据是否存在,存在就返回对应的值</p></blockquote><ul><li>如果需要大量重复的计算又依赖于之前的计算,可以考虑函数记忆</li><li>利用Map,Set或者是数组做字典都是一种函数记忆</li><li>谨慎使用,消耗性很大</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const memoize &#x3D; function (fn: Function, hasher?: Function) &#123;  let cache: any &#x3D; &#123;&#125;  const menoize &#x3D; function (...args: any[]) &#123;    const address &#x3D; &quot;&quot; + (hasher ? hasher.apply(null, args) : args)    if (!cache[address]) &#123;      cache[address] &#x3D; fn.apply(null, args)    &#125;    return cache[address]  &#125;  return menoize&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然,抄袭<code>underscore</code>的使用ts重够了一下很快</p></blockquote><ul><li>当没有hansher(作为键的函数时),会让args作为键</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let add &#x3D; function (a: number, b: number, c: number) &#123;  return a + b + c&#125;let memoizedAdd &#x3D; memoize(add)console.log(memoizedAdd(1, 2, 3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试一下是,没有问题的.但是我们如果想要使用一个生成键的函数<code>hasher</code></p></blockquote><ul><li>如果并不想要数组的全部内容,可以使用slice截取数组中的第一个作为键</li><li>当然也可以使用别的函数作为键</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const memoizedAdd &#x3D; memoize(add, function () &#123;  const args &#x3D; Array.prototype.slice.call(arguments,0,1)  return JSON.stringify(args)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;纯函数-Purity&quot;&gt;&lt;a href=&quot;#纯函数-Purity&quot; class=&quot;headerlink&quot; title=&quot;纯函数(Purity)&quot;&gt;&lt;/a&gt;纯函数(Purity)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;应始终返回相同的值.不管调用该函数多少次,或者什么时候调用都</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>迭代器与生成器</title>
    <link href="http://mail.zyjcould.ltd/2022/02/26/die-dai-qi-yu-sheng-cheng-qi/"/>
    <id>http://mail.zyjcould.ltd/2022/02/26/die-dai-qi-yu-sheng-cheng-qi/</id>
    <published>2022-02-26T05:09:57.000Z</published>
    <updated>2022-03-19T08:12:04.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代-iteration"><a href="#迭代-iteration" class="headerlink" title="迭代(iteration)"></a>迭代(iteration)</h2><blockquote><p>循环时迭代的基础:循环可以指定迭代的次数,以及每次需要执行什么操作</p></blockquote><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote><p>把实现了正式的<code>Iterable</code>接口的,并且可以通过迭代器<code>Iterator</code>使用的称做可选迭代器</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;集合的元素可以按插入顺序访问每一个元素let set &#x3D; new Set&lt;number&gt;().add(1).add(2).add(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>实现可迭代协议(Iterable接口):要求同时具备两种能力</p></blockquote><ul><li>支持迭代的自我识别能力和创建实现<code>Iterator</code>接口的对象能力</li><li>在ESMA中,必须暴露一个属性<code>Symbol.iterator</code>作为默认迭代器</li><li>这个默认的迭代器属性必须使用一个迭代器工厂函数(调用时返回一个迭代器)</li></ul><blockquote><p>实现<code>Iterable</code>接口的类型</p></blockquote><ul><li>string</li><li>Array</li><li>Map</li><li>Set</li><li>arguments</li><li>NodeList等DOM集合</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;可以通过这种方式是否存在默认的迭代器属性console.log([][Symbol.iterator])&#x2F;&#x2F;[Function: values]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代器对象的原生语言</p></blockquote><ul><li><p><code>for...of</code>循环</p></li><li><p>数组解构</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const num:number[] &#x3D; [1,2,3];let [a,b,c] &#x3D; num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>扩展操作符<code>...</code></p></li><li><p><code>Array.from()</code></p></li><li><p><code>new Set()</code></p></li><li><p><code>new Map()</code></p></li><li><p><code>Promise.all()</code>接收promise组成的可迭代对象</p></li><li><p><code>Promise.race()</code>接收有promise组成的可迭代对象</p></li><li><p><code>yield*</code>操作符,在生成器中使用</p></li></ul><blockquote><p>迭代器使用<code>next()</code>方法在可迭代对象中遍历数据.</p></blockquote><ul><li>每成功调用<code>next()</code>都会返回一个<code>IteratorResult</code>对象,其中包含迭代器返回的下一个值</li><li><code>IteratorResult</code>包含两个属性:<code>done</code>和<code>value</code>.<ul><li>done是一个布尔值,表示是否<code>next()</code>还可以再次调用取得下一个值</li><li>value是包含可迭代对象的下一个值(<code>done:false</code>或者undefined),如果done位true表示结束</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let num: number[] &#x3D; [1, 2]let arr &#x3D; num[Symbol.iterator]()console.log(arr.next())&#x2F;&#x2F;&#123; value: 1, done: false &#125;console.log(arr.next())&#x2F;&#x2F;&#123; value: 2, done: false &#125;console.log(arr.next())&#x2F;&#x2F;&#123; value: undefined, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只要迭代器对象到达<code>done:true</code>状态,后续调用<code>next</code>都是一样的值</li></ul><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote><p>生成器可以在一个函数块内暂停和恢复代码执行的功能(自定义迭代器或者实现协程)</p></blockquote><ul><li>一般只需要在函数名前加一个<code>*</code>表示他是一个生成器.只要是可以定义函数的地方,就可以定义生成器</li><li>调用生成器函数会返回一个<strong>生成器对象</strong>.<ul><li>生成器对象一开始处于暂停执行的状态.与迭代器相似</li><li>生成器对象同样实现了<code>Iterator</code>接口,因此具有next()方法</li><li>在迭代器中,value值是函数的返回值.默认是undefined</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  return &quot;value&quot;&#125;console.log(gen().next)&#x2F;&#x2F;[Function: next]console.log(gen().next())&#x2F;&#x2F;&#123; value: &#39;value&#39;, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">生成器只会在初次调用<code>next()</code>方法后执行</span>.直接调用(例如<code>gen()</code>)并不会执行</li><li>生成器对象实现了<code>Iterable</code>接口,默认的迭代器是自引用的</li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>yield可以让生成器停止或者开始执行</p></blockquote><ul><li>生成器函数在遇到<code>yield</code>关键字之前会正常执行.遇到关键字之后,停止执行,函数作用域的状态会被保留</li><li>停止执行的生成器函数只能通过在生成器对象上调用<code>next()</code>方法来恢复执行</li></ul><blockquote><p>通过<code>yield</code>关键字退出的生成器函数会处于<code>done:false</code>状态.而<code>return</code>关键字退出会处于<code>done:true</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield &quot;done&quot;  yield &quot;data&quot;  return &quot;value&quot;&#125;let genObj &#x3D; gen()console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;done&#39;, done: false &#125;console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;data&#39;, done: false &#125;console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;value&#39;, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用yield实现输入输出</p></blockquote><ul><li>yield除了作为中间返回语句使用,还可以作为函数的中间参数使用.</li><li>上一次上生成器函数暂停的<code>yield</code>关键字会接收到传给<code>next()</code>方法的第一个值</li><li>但是第一次调用next()传入的值不会被使用,因为第一次是为了开始执行生成器函数</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  console.log(yield)  console.log(yield)&#125;let genObj &#x3D; gen()genObj.next(1)&#x2F;&#x2F;不会打印任何东西genObj.next(2)&#x2F;&#x2F;2genObj.next(3)&#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现输入和输出</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  return yield 1&#125;let genObj &#x3D; gen()console.log(genObj.next(3))&#x2F;&#x2F;&#123; value: 1, done: false &#125;console.log(genObj.next(2))&#x2F;&#x2F;&#123; value: 2, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>因为函数需要对整个表达式求值才能确定需要返回的值,所以在遇到yield关键字暂停并执行计算要产生的值<code>1</code></li><li>下一次调用<code>next()</code>会传入<code>2</code>,作为交给<code>yield</code>的值.确定位本次生成器函数要返回的值</li></ol><blockquote><p>产生可迭代对象:可以使用<code>*</code>加强yield的行为,让他可以迭代一个可迭代对象,从而一次产出一个值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield* [1, 2, 3]&#125;for (let x of gen()) &#123;  console.log(x)&#125;&#x2F;&#x2F;1  &#x2F;&#x2F;2  &#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际上<code>yield*</code>只是将一个可迭代的对象序列化为一连串的可以单独产出的值,所以这跟把<code>yield</code>凡在一个有循环里一样</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (let x of [1,2,3])&#123;    yield x  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提前终止生成器</p></blockquote><ul><li>一个实现<code>Iterator</code>接口的对象一定有next()方法,还有一个可选的<code>return()</code>方法用于提前终止迭代器.生成器除了有这两个方法,还有第三个方法<code>throw()</code></li></ul><ol><li><p><code>return()</code>:强制生成器进入关闭状态.提供给return()方法的值,就是迭代器对象的值</p><ul><li>在ts中,如果<code>reuturn()</code>需要传入参数,那么返回值return要定义好类型才能使用,否则<code>void</code></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield 1  return 3&#125;console.log(gen().return(4))&#x2F;&#x2F;&#123; value: 1, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>throw</code>:会在暂停的时候将一个提供的错误注入到生成器对象.如果错误未被处理,生成器将会关闭</p><ul><li>如果生成器函数内部处理了这个错误,那么生成器就不会关闭,而且还可以恢复执行</li><li>不过错误也会跳过相对应的yield.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (const x of [1, 2, 3]) &#123;    try &#123;      yield x    &#125; catch (e) &#123;&#125;  &#125;&#125;const g &#x3D; gen()console.log(g.next())&#x2F;&#x2F;&#123; value: 1, done: false &#125;g.throw(&quot;foo&quot;)console.log(g.next())&#x2F;&#x2F;&#123; value: 3, done: false &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>如果生成器对象还没有被执行,那么调用throw()抛出的错误不会在函数内部被捕获.因为这相当于在函数块外抛出了错误</p><ul><li>以下依然会抛出错误</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (const x of [1, 2, 3]) &#123;      try &#123;        yield x      &#125; catch (e) &#123;&#125;      yield x    &#125;&#125;const g &#x3D; gen()g.throw(&quot;foo&quot;)console.log(g.next())console.log(g.next())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>最后看一下Generator接口的写法</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;Generatorinterface Generator&lt;T &#x3D; unknown, TReturn &#x3D; any, TNext &#x3D; unknown&gt; extends Iterator&lt;T, TReturn, TNext&gt; &#123;    next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;    return(value: TReturn): IteratorResult&lt;T, TReturn&gt;;    throw(e: any): IteratorResult&lt;T, TReturn&gt;;    [Symbol.iterator](): Generator&lt;T, TReturn, TNext&gt;;&#125;&#x2F;&#x2F;Iteratorinterface Iterator&lt;T, TReturn &#x3D; any, TNext &#x3D; undefined&gt; &#123;    next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;    return?(value?: TReturn): IteratorResult&lt;T, TReturn&gt;;    throw?(e?: any): IteratorResult&lt;T, TReturn&gt;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Generator</code>泛型接收三个类型<ul><li><strong>T</strong>:yield后的参数类型</li><li><strong>Treturn</strong>:return后的返回值类型</li><li><strong>TNext</strong>:next()函数中的实参类型,不过如果指定了类型,可以不写,或者必须写对应的类型</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;迭代-iteration&quot;&gt;&lt;a href=&quot;#迭代-iteration&quot; class=&quot;headerlink&quot; title=&quot;迭代(iteration)&quot;&gt;&lt;/a&gt;迭代(iteration)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;循环时迭代的基础:循环可以指定</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>函数柯里化&amp;偏函数&amp;惰性函数</title>
    <link href="http://mail.zyjcould.ltd/2022/02/24/han-shu-ke-li-hua-pian-han-shu-duo-xing-han-shu/"/>
    <id>http://mail.zyjcould.ltd/2022/02/24/han-shu-ke-li-hua-pian-han-shu-duo-xing-han-shu/</id>
    <published>2022-02-24T14:34:17.000Z</published>
    <updated>2022-03-19T08:12:04.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><blockquote><p>什么是函数柯里化?</p><p>在计算机中,柯里化是将使用多个参数的一个函数转换成一些列使用一个参数的函数</p></blockquote><ul><li>例如:</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(a:number,b:number) &#123;  return a+b&#125;&#x2F;&#x2F;执行add函数,依次传入两个参数add(1,2)&#x2F;&#x2F;如果有一个carry函数,可以做到柯里化let addCurry &#x3D; curry(add)addCurry(1)(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>柯里化的用途可以理解为参数复用,本质上是降低通用性,提高适用性</p></blockquote><ul><li>例如有一段这样的数据</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const person &#x3D; [&#123;name:&quot;zhangsan&quot;&#125;,&#123;name:&quot;lisi&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>使用map函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let names &#x3D; person.map(function(item)&#123;  return item.name&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果对象中有多个属性,那就要写多个map才行</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let prop &#x3D;curry((key,obj)&#x3D;&gt;&#123;  obj[key]&#125;)let name &#x3D; person.map(prop(&quot;name&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>这样就体现出柯里化的重要性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function curry&lt;T&gt;(fn: Function): Function &#123;  return function (...args: T[]) &#123;    if (args.length &lt; fn.length) &#123;      return curry(fn.bind(this, ...args))    &#125; else &#123;      return fn(...args)    &#125;  &#125;&#125;function add(a: number, b: number, c: number) &#123;  return a + b + c&#125;let curryAdd &#x3D; curry(add)console.log(curryAdd(1, 3)(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fn.length</code>就是被柯里化函数的</li><li><code>...args</code>是被柯里化函数的返回值(curryAdd)传入的个数.理想状态是只传一个</li><li><code>curryAdd</code>本质上来讲就是curry函数的返回值,只有curryAdd有实参,args才会有值</li></ul><ol><li><p>执行<code>let curryAdd = curry(add)</code>,返回一个闭包</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function (...args: T[]) &#123;    if (args.length &lt; fn.length) &#123;      return curry(fn.bind(null, ...args))    &#125; else &#123;      return fn(...args)    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行<code>curryAdd(1,3)</code>当前的<code>fn.length</code>就是add形参的数量3大于实参的数量2</p><ul><li>同样返回了和1一样的一个闭包,<span style="color">但是fn发生了改变,传入的是<code>fn.bind(null, ...args)</code></span></li><li>执行一个递归,由于bind函数是柯里化的,这里的<code>fn.length</code>在结束的时候就变成了1</li></ul></li><li><p>执行<code>[curryAdd(1,3)](3)</code>当前的<code>fn.length</code>由于是会执行else的内容</p><ul><li><code>add.bind(this, 1 , 3)(3)</code>:这样就利用bind完成了一个柯里化的过程</li></ul></li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type IPerson &#x3D; &#123;  name: string  age: number&#125;const person: IPerson[] &#x3D; [  &#123; name: &quot;zhangsan&quot;, age: 12 &#125;,  &#123; name: &quot;lisi&quot;, age: 100 &#125;,]let prop &#x3D; curry((key: keyof IPerson, obj: IPerson) &#x3D;&gt; &#123;  return obj[key]&#125;)console.log(person.map(prop(&quot;name&quot;)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="偏函数-Partial-Function"><a href="#偏函数-Partial-Function" class="headerlink" title="偏函数(Partial Function)"></a>偏函数(Partial Function)</h2><blockquote><p>在计算机科学中，偏函数是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p><p>什么是元？元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(a, b) &#123;    return a + b;&#125;&#x2F;&#x2F; 执行 add 函数，一次传入两个参数即可add(1, 2) &#x2F;&#x2F; 3&#x2F;&#x2F; 假设有一个 partial 函数可以做到局部应用var addOne &#x3D; partial(add, 1);addOne(2) &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>和函数柯里化的区别</p></blockquote><ol><li>柯里化是将一个多参数函数转换成多个单参数函数,也就是将一个n元函数转换成n个一元函数</li><li>偏函数则是固定一个函数的一个或者多个参数,也就是将一个n元函数转换成一个n-x元函数</li></ol><ul><li>柯里化和偏函数的关系:<strong>柯里化通过偏函数来实现</strong></li></ul><blockquote><p>当然也可以使用<code>bind</code>函数来实现偏函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(a: number, b: number, c: number) &#123;  return a + b + c&#125;let bindOne &#x3D; test.bind(null, 1)console.log(bindOne(2, 3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是这会直接改变this的指向</li></ul><blockquote><p>手动实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function partical(fn: Function, ...args: any[]): Function &#123;  return function (...moreArgs: any[]) &#123;    return fn(...args, ...moreArgs)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><blockquote><p>惰性函数就是说函数执行一次后，之后调用函数都是相同的作用，直接返回第一次执行函数.很多时候只需要执行一次，因为之后每次调用函数执行的结果都一样。所以如果函数语句不必每次执行，我们可以使用称之为惰性函数的技巧来进行优化。</p></blockquote><ul><li>如果我们现在需要写一个 foo 函数，这个函数返回首次调用时的 Date 对象，注意是首次</li></ul><ol><li><p>闭包的写法</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let foo: () &#x3D;&gt; Function &#x3D; function () &#123;  let time: Date &#x3D; new Date()  return function () &#123;    if (time) time    return time  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>惰性函数:惰性函数就是解决每次都要进行判断的这个问题，解决原理很简单，重写函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let foo: () &#x3D;&gt; Function | Date &#x3D; function () &#123;  let time: Date &#x3D; new Date()  foo &#x3D; function () &#123;    return time  &#125;  return foo()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="惰性求值-Lazy-evaluation"><a href="#惰性求值-Lazy-evaluation" class="headerlink" title="惰性求值(Lazy evaluation)"></a>惰性求值(Lazy evaluation)</h3><blockquote><p>按需求值机制,只有当需要计算所得值时才会计算</p></blockquote><ul><li>利用生成器机制可以很容易写出</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const rand &#x3D; function* () &#123;  while (true) &#123;    yield Math.random()    &#125; &#125;const randIter &#x3D; rand()randIter.next()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;柯里化&quot;&gt;&lt;a href=&quot;#柯里化&quot; class=&quot;headerlink&quot; title=&quot;柯里化&quot;&gt;&lt;/a&gt;柯里化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是函数柯里化?&lt;/p&gt;
&lt;p&gt;在计算机中,柯里化是将使用多个参数的一个函数转换成一些列使用一个参数的函</summary>
      
    
    
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/categories/TS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>cookie,session和token</title>
    <link href="http://mail.zyjcould.ltd/2022/02/23/cookie-session-he-token/"/>
    <id>http://mail.zyjcould.ltd/2022/02/23/cookie-session-he-token/</id>
    <published>2022-02-23T07:51:42.000Z</published>
    <updated>2022-03-20T06:35:04.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于HTTP是无状态的,当关闭网页的时候,服务器并不能意识到还是你来访问的</p></blockquote><ul><li><p>这就涉及到如何让浏览器记住这些信息(例如用户的账号和密码)</p><ol><li>保证密码和账号不易被破解并且完美保存</li><li>保证http无状态的问题,并且在每一次请求中加入这些信息保持登录</li></ol></li><li><p>可以事先每次http请求都自带数据给服务器的技术–&gt;cookie</p></li></ul><h2 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie&amp;Session"></a>Cookie&amp;Session</h2><p><img src="./cookie.png" alt="cookie"></p><ol><li>浏览器发送http请求后,服务器会进行cookie设置.<code>Set-Cookie</code></li><li><code>Cookie</code>中有<code>value</code>和<code>name</code>两个重要属性</li><li>浏览器会将cookie保存起来,并且在以后的每一个请求自动附上这个Cookie</li></ol><ul><li>并且打开浏览器就可以看到cookie,并且如果将用户密码等重要信息放在浏览器就很不安全</li></ul><blockquote><p>Session,浏览器和服务器是在进行会话,然而比较模糊的就是会话时间.因为关闭浏览器的行为可能是不小心的</p></blockquote><p><img src="./session.png" alt="session"></p><ul><li>所以很多网站会给每个用户的会话设定会话时间(结束会话的时间)和唯一的ID,并且这些session一般都是存储在数据库中的</li></ul><ol><li>当使用用户名密码发送到服务器,认证成功后,会创建一个SessionID和会话结束时间,还有其它参数</li><li>服务器会将<code>SessionID和会话结束时间</code>包含在cookie中发送给浏览器<ul><li>服务器在发送cookie之前会对这个含有Session ID的cookie进行签名</li></ul></li><li>浏览器会将包含SessionID的Cookie进行保存(并没有保存账号密码)</li></ol><ul><li>浏览器会利用cookie的特点,每次访问都会带有sessionid,直到有效期失效后会自行删除cookie</li></ul><blockquote><p>如果有大量用户访问服务器的时候,服务器依旧使用基于cookie的session,就需要存储大量<code>SessionID</code>在服务器中.</p><p>如果有多台服务器的情况,服务器中的SessionID还要分配给其它服务器才能保证用户避免再次输入用户名和密码</p></blockquote><h2 id="JWT-Json-Web-Token"><a href="#JWT-Json-Web-Token" class="headerlink" title="JWT(Json Web Token)"></a>JWT(Json Web Token)</h2><p><img src="./token.png" alt="Token"></p><ol><li>用户第一次登录网页,服务器会生成一个JWT,服务器不需要保存JWT,只需要保存<strong>JWT签名的密文</strong></li><li>接着把JWT发送给服务器,浏览器可以以<code>Cookie</code>或者<code>Storage</code>的形式进行存储</li></ol><ul><li>token验证登录<blockquote><p>三段式加密字符串:header(算法).payload(数据).signature(签名信息)</p><blockquote><ul><li>第一段:头,签证:安全信息验证,你的口令,进行不可逆加密</li><li>第二段:你要保存的信息:将<code>header</code>和<code>payload</code>base64编码后进行算法运算得到签名信息</li><li>第三段:额外信息:不可逆加密</li></ul><blockquote><p> 这一段字符串由后端发给前端.在登陆过以后,生成一个token给前端,前端保存这个token如果前端需要登录后查看页面,或者登陆后发送的请求,只要你把token带回来,解密一下</p></blockquote></blockquote></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Session是由服务器诞生并且保存在服务器中的,由服务器主导</li><li>Cookie是一种数据载体,把session保存在cookie中,送到客户端中,就可以跟随每个http发送</li><li>Token诞生在服务器,但保存在浏览器中,可以放在Cookie或者Storage中.持有Token就像持有令牌可以访问服务器</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于HTTP是无状态的,当关闭网页的时候,服务器并不能意识到还是你来访问的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这就涉及到如何让浏览器记住这些信息(例如用户的账号和密码)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证密码和账号不易被破解并</summary>
      
    
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/categories/config/"/>
    
    
    <category term="config" scheme="http://mail.zyjcould.ltd/tags/config/"/>
    
    <category term="HTTP" scheme="http://mail.zyjcould.ltd/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Github-cli</title>
    <link href="http://mail.zyjcould.ltd/2022/02/21/github-cli/"/>
    <id>http://mail.zyjcould.ltd/2022/02/21/github-cli/</id>
    <published>2022-02-21T02:29:42.000Z</published>
    <updated>2022-03-19T08:12:04.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="githubCli"><a href="#githubCli" class="headerlink" title="githubCli"></a><a href="https://cli.github.com/">githubCli</a></h2><blockquote><p>简单来讲,gihub是一个基于可视化的操作存储库.而githubcli就是使用命令操作存储库</p></blockquote><ul><li><p>下载完之后,可能有一系列玄学问题.重启一下可以解决80%</p></li><li><p>使用<code>gh [cli命令] -help</code>可以查询使用方法</p></li></ul><h3 id="gh-auth"><a href="#gh-auth" class="headerlink" title="gh auth"></a>gh auth</h3><blockquote><p>githubcli通过帮助您通过基于浏览器的<code>OAuth</code>登录GitHub或接受个人访问令牌,此交互式命令可初始化身份验证状态</p></blockquote><ul><li><p><code>-h,--hostname &lt;string&gt;</code>:要用于进行身份验证的 GitHub 实例的主机名</p></li><li><p><code>gh auth login</code>:授权githubcli登录这个账户</p></li><li><p><code>gh auth logout</code>:登出github</p></li><li><p><code>gh auth refresh</code>:刷新github账户</p></li><li><p><code>gh auth status</code>:查看githubcli登录状态</p><ul><li><code>-t</code>:显示身份验证令牌</li></ul></li></ul><h3 id="gh-ssh-key"><a href="#gh-ssh-key" class="headerlink" title="gh ssh-key"></a>gh ssh-key</h3><blockquote><p><code>gh ssh-key add [&lt;key-file&gt;] [flags]</code>:将 SSH 密钥添加到您的 GitHub 帐户</p></blockquote><ul><li><code>-t,--title &lt;string&gt;</code>:新密钥的标题</li></ul><blockquote><p><code>gh ssh-key list</code>:列出 GitHub 帐户中的 SSH 密钥</p></blockquote><h3 id="browse"><a href="#browse" class="headerlink" title="browse"></a>browse</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gh browse <span class="token punctuation">[</span><span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-b,--branch &lt;string&gt;</code>:选择其他分支打开浏览器</li><li><code>-c,--commit</code>:打开上次提交</li><li><code>-n,--no-browser</code>:打印目标URL,不打开浏览器</li><li><code>-p,--projects</code>:开放存储库项目</li><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>:使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li><li><code>-s,--settings</code>:打开存储库设置</li><li><code>-w,--wiki</code>:开放存储库维基</li></ul><blockquote><p>如果想要打开其它存储库,需要使用<code>-R</code>.如果直接接url,<code>gh browse url</code>,如果是相对url会叠加到当前库的url中</p></blockquote><ul><li>正确的使用方法是:<code>gh browse -R Jack-Zhang-1314/JS_Webpack</code></li><li>并且以上的flags是可以叠加的</li></ul><h3 id="codespace-代码空间"><a href="#codespace-代码空间" class="headerlink" title="codespace(代码空间)"></a><a href="https://docs.github.com/en/codespaces/getting-started/quickstart">codespace(代码空间)</a></h3><blockquote><p>代码空间是浏览器中的集成开发环境(IDE).代码空间包括为特定仓库开发所需的一切,其中包括具有语法突出显示和自动完成功能的文本编辑器,终端,调试工具和Git命令,所有这些都集成在GitHub中.您也可以在代码空间中安装<code>Visual Studio Code</code>扩展以添加更多功能.</p></blockquote><ul><li>代码空间使开发人员更容易加入新公司或开始为开源项目做出贡献. 项目维护员可以配置仓库,以便在为仓库创建代码空间时自动包含项目的依赖项. 减少配置环境所用的时间,可以更快地开始编码.</li><li>代码空间允许您在云端开发,而不是本地开发. 开发者可以随时随地任何机器(包括平板电脑或 Chromebooks)上参与项目开发,无需维护知识产权的本地副本.</li></ul><blockquote><p>目前代码空间只有付费的组织才可以使用.个人和自由组织暂时都不能使用</p></blockquote><h3 id="gh-config"><a href="#gh-config" class="headerlink" title="gh config"></a>gh config</h3><ul><li><code>gh config get &lt;key&gt; [flags]</code>:输出指定配置的键<ul><li><code>-h,--host &lt;string&gt;</code>获取主机设置</li></ul></li><li><code>gh config list</code>:输出所有的配置</li><li><code>gh config set &lt;key&gt; &lt;value&gt; [flags]</code>:使用给定键的值设置配置<ul><li><code>-h,--host &lt;string&gt;</code>获取主机设置</li></ul></li></ul><h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a><a href="https://gist.github.com/">Gist</a></h3><blockquote><p>GitHub有一个隐藏得很好的衍生产品github Gist.这是一种更快,更简单的在线共享代码的方式.与Pastebin一样,Gist是一个通过互联网共享文本的工具.但它提供了额外的功能,并且特别得到了Git强大的版本控制的支持</p></blockquote><ul><li><p><code>gh gist clone &lt;gist&gt; [&lt;directory&gt;] [-- &lt;gitflags&gt;...]</code>:克隆gist</p><ul><li>例如<code>gh gist clone git@gist.github.com:ea351c91acc4f4b0395c6e6241b866bf.git</code></li></ul></li><li><p><code>gh gist create [&lt;filename&gt;... | -] [flags]</code>:创建一个gist</p><ul><li><code>-d,--desc &lt;string&gt;</code>:gist的说明</li><li><code>-f,--filename &lt;string&gt;</code>:创建gist时传入的文件</li><li><code>-p,--public</code>:使gist公开,默认是机密的</li><li><code>-w,--web</code>:创建gist并打开Web浏览器</li><li>例如<code>gh gist create test.md -p -w</code></li></ul></li><li><p><code>gh gist list [flags]</code>:获取自己的gist</p><ul><li><code>-L,--limit &lt;int&gt;</code>:要获取的最大数量</li><li><code>--public</code>:仅显示公共gist</li><li><code>--secret</code>:仅显示秘密的gist</li></ul></li><li><p><code>gh gist delete &#123;&lt;id&gt; | &lt;url&gt;&#125;</code>:删除gist</p></li><li><p><code>gh gist edit &#123;&lt;id&gt; | &lt;url&gt;&#125; [&lt;filename&gt;] [flags]</code>:编辑gist</p><ul><li><code>-a,--add &lt;string&gt;</code>:将新文件添加到gist</li><li><code>-d,--desc &lt;string&gt;</code>:gist的新描述</li><li><code>-f,--filename &lt;string&gt;</code>:选择要编辑的文件</li><li>例如:<code>gh gist edit ea351c91acc4f4b0395c6e6241b866bf -f test.md</code></li></ul></li><li><p><code>gh gist view [&lt;id&gt; | &lt;url&gt;] [flags]</code>:显示gist</p><ul><li><code>-f,--filename &lt;string&gt;</code>:显示gist中的单个文件</li><li><code>--files</code>:从gist中列出文件名,不显示其他内容  </li><li><code>-r,--raw</code>:打印原始内容而不是渲染之后的gist(例如md)</li><li><code>-w,--web</code>:在浏览器中打开要点</li><li>例如:<code>gh gist view ea351c91acc4f4b0395c6e6241b866bf --files</code></li></ul></li></ul><h3 id="gh-repo"><a href="#gh-repo" class="headerlink" title="gh repo"></a>gh repo</h3><blockquote><p><code>gh repo archive [&lt;repository&gt;] [flags]</code>存档仓库.<code>-y</code>跳过确认</p></blockquote><ul><li>存档仓库：您可以存档仓库，将其设为对所有用户只读，并且指出不再主动维护它。 您也可以取消存档已经存档的仓库。</li><li>在仓库存档后，便无法添加或删除协作者或团队。 具有仓库访问权限的贡献者只能对项目复刻或标星。</li><li>当仓库存档后，其议题、拉取请求、代码、标签、重要事件、项目、wiki、版本、提交、标记、分支、反应和注解都会变成只读。 要更改存档的仓库，必须先对仓库取消存档</li></ul><blockquote><p><code>gh repo clone &lt;repository&gt;</code>克隆仓库</p></blockquote><ul><li>在本地克隆 GitHub 存储库</li></ul><blockquote><p><code>gh repo create [&lt;name&gt;] [flags]</code>:创建存储库</p></blockquote><ul><li><code>-c,--clone</code>:将新存储库克隆到当前目录</li><li><code>-d,--description &lt;string&gt;</code>:存储库的描述</li><li><code>--private</code>:将新存储库设为私有</li><li><code>--public</code>:公开新存储库</li><li><code>--push</code>:将本地提交推送到新存储库</li><li><code>-r,--remote &lt;string&gt;</code>:指定新存储库的远程名称</li><li><code>-s,--source &lt;string&gt;</code>:指定要用作源的本地存储库的路径</li><li><code>-g,--gitignore &lt;string&gt;</code>:为存储库指定 gitignore 模板</li><li><code>-h,--homepage &lt;URL&gt;</code>:存储库主页网址</li><li><code>--disable-issues</code>:禁用新存储库中的问题</li><li><code>--disable-wiki</code>:在新存储库中禁用 wiki</li><li><code>--internal</code>:将新存储库设为内部存储库</li><li><code>-l,--license &lt;string&gt;</code>:为存储库指定开源许可证</li><li><code>-t,--team &lt;name&gt;</code>:要授予访问权限的组织团队的名称</li><li><code>-p,--template &lt;repository&gt;</code>基于模板存储库创建新存储库</li></ul><ol><li>使用交互的方式创建存储库<code>gh repo create</code></li><li>使用非交互的方式创建<ul><li>直接创建远程仓库<code>--public --private --internal --clone</code></li><li>将本地仓库推到新的远程仓库<code>--source--push</code></li></ul></li></ol><blockquote><p><code>gh repo list [&lt;owner&gt;] [flags]</code>列出用户或组织拥有的存储库</p></blockquote><ul><li><code>-l,--language &lt;string&gt;</code>:按主要编码语言筛选</li><li><code>-L,--limit &lt;int&gt;</code>:要列出的存储库的最大数量</li><li><code>--archived</code>:仅显示已存档的存储库</li><li><code>--no-archived</code>:省略已存档的存储库</li><li><code>--private</code>:仅显示私有仓库</li><li><code>--public</code>:仅显示公共存储库</li><li><code>--fork</code>:仅显示fork</li><li><code>--source</code>:仅显示非分叉</li><li><code>-q,--jq &lt;expression&gt;</code>:使用 jq 表达式筛选 JSON 输出</li><li><code>--json &lt;fields&gt;</code>:输出具有指定字段的 JSON</li><li><code>-t,--template &lt;string&gt;</code>:使用 Go 模板设置 JSON 输出的格式</li><li><code>--topic &lt;string&gt;</code>:按主题筛选</li></ul><blockquote><p><code>gh repo view [&lt;repository&gt;] [flags]</code>:显示 GitHub 存储库的描述和自述文件.如果没有参数,显示当前仓库的</p></blockquote><ul><li>[-b,–branch <string> | -q,–jq <expression> | -t,–template <string> | -w,–web]</li></ul><blockquote><p><code>gh repo deploy-key</code>,部署密钥</p></blockquote><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>:选择其它的仓库或者主机,使用者<ul><li><code>gh repo deploy-key add &lt;key-file&gt; [flags]</code>:增加密钥<ul><li><code>-w,--allow-write</code>:允许密钥的写入访问权限</li><li><code>-t,--title &lt;string&gt;</code>:新密钥的标题</li></ul></li><li><code>gh repo deploy-key delete &lt;key-id&gt;</code>:删除密钥</li><li><code>gh repo deploy-key list</code>:查看所有密钥</li></ul></li></ul><blockquote><p><code>gh repo delete [&lt;repository&gt;] [flags]</code>删除存储库</p></blockquote><ul><li><code>--confirm</code>,确认删除,不带提示</li></ul><blockquote><p><code>gh repo rename [&lt;new-name&gt;] [flags]</code>重新命名仓库名称</p></blockquote><ul><li>[-y,–confirm | -R,–repo &lt;[HOST&#x2F;]OWNER&#x2F;REPO&gt;]</li></ul><blockquote><p><code>gh repo edit [&lt;repository&gt;] [flags]</code>:编辑存储库</p></blockquote><ul><li><code>--add-topic &lt;strings&gt;</code>添加存储库主题</li><li><code>--remove-topic &lt;strings&gt;</code>:删除存储库主题</li><li><code>--visibility &lt;string&gt;</code>:将存储库的可见性更改为 {<code>public</code>、<code>private</code>、<code>internal</code>}</li><li><code>--allow-forking</code>允许fork组织存储库</li><li><code>--default-branch &lt;name&gt;</code>:设置存储库的默认分支名称</li><li><code>--delete-branch-on-merge</code>:合并拉取请求时删除头分支</li><li><code>-d,--description &lt;string&gt;</code>:存储库的描述</li><li><code>--enable-issues</code>:在存储库中启用问题</li><li><code>-h,--homepage &lt;URL&gt;</code>:设置存储库主页网址</li><li><code>--enable-auto-merge</code>:启用自动合并功能</li><li><code>--enable-merge-commit</code>:通过合并提交启用合并拉取请求</li><li><code>--enable-rebase-merge</code>:拉取请求存在合并冲突,会重新定位合并冲突</li><li><code>--enable-squash-merge</code>:拉取请求的提交将压缩到单个提交中</li><li><code>--enable-wiki</code>:在存储库中启用 wiki</li><li><code>--enable-projects</code>:在存储库中启用项目</li><li><code>--template</code>:使存储库可用作模板存储库</li></ul><blockquote><p><code>gh repo fork [&lt;repository&gt;] [-- &lt;gitflags&gt;...] [flags]</code>:创建存储库的分支</p></blockquote><ul><li><code>--clone</code>:克隆到本地 {true|false}</li><li><code>--fork-name &lt;string&gt;</code>:指定分叉存储库的名称</li><li><code>--org &lt;string&gt;</code>:在组织中创建分支</li><li><code>--remote</code>:为分叉添加远程 {true|false}</li><li><code>--remote-name &lt;string&gt;</code>:指定新的远程仓库名称</li></ul><h3 id="gh-issue"><a href="#gh-issue" class="headerlink" title="gh issue"></a>gh issue</h3><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li></ul><blockquote><p><code>gh issue list [flags]</code>:列出和筛选此存储库中的问题</p></blockquote><ul><li><code>-a,--assignee &lt;string&gt;</code>:按回答问题的受让人(assignee)</li><li><code>-A,--author &lt;string&gt;</code>:按问题的作者筛选</li><li><code>-l,--label &lt;strings&gt;</code>:按标签筛选</li><li><code>-L,--limit &lt;int&gt;</code>:要获取的最大问题数</li><li><code>--mention &lt;string&gt;</code>:按提及筛选</li><li><code>-m,--milestone &lt;number&gt;</code>:按里程碑编号或”标题”筛选</li><li><code>-S,--search &lt;query&gt;</code>:查询的搜索问题</li><li><code>-s,--state &lt;string&gt;</code>:按状态筛选<code>&#123;open|closed|all&#125;</code></li><li>[-t,–template <string> | -q,–jq <expression> | –json <fields>]:输出格式</li><li><code>-w,--web</code>:打开浏览器以列出问题</li></ul><blockquote><p><code>gh issue view &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>:显示有关问题的标题、正文和其他信息。</p></blockquote><ul><li><code>-c,--comments</code>:查看问题评论</li><li>[-q,–jq <expression>|–json <fields> |-t,–template <string>]:输出格式</li><li><code>-w,--web</code>:在浏览器中打开问题</li></ul><blockquote><p><code>gh issue create [flags]</code>创建新问题</p></blockquote><ul><li><code>-a,--assignee &lt;login&gt;</code>:通过登录名分配人员。使用”@me”进行自我分配。</li><li><code>-b,--body &lt;string&gt;</code>:提供问题的内容。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-l,--label &lt;name&gt;</code>:按名称添加标签</li><li><code>-m,--milestone &lt;name&gt;</code>:按名称将问题添加到里程碑</li><li><code>-p,--project &lt;name&gt;</code>:按名称将问题添加到项目</li><li><code>--recover &lt;string&gt;</code>:从失败的创建运行中恢复输入</li><li><code>-t,--title &lt;string&gt;</code>:提供标题。否则将提示一个。</li><li><code>-w,--web</code>:打开浏览器以创建问题</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gh issue create -t <span class="token string">"测试"</span> -b <span class="token string">"问题的内容"</span> -a <span class="token string">"@me"</span> -w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将标题设置为测试,添加内容,受让人是我自己,在浏览器打开</li></ul><blockquote><p><code>gh issue edit &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>:编辑问题</p></blockquote><ul><li><code>[-t | -b | -F | -m]</code>:与create一样</li><li><code>--add-assignee &lt;login&gt;</code>:通过登录名添加分配的用户。使用”@me”来分配自己。</li><li><code>--add-label &lt;name&gt;</code>:按名称添加标签</li><li><code>--add-project &lt;name&gt;</code>按名称将问题添加到项目</li><li><code>--remove-assignee &lt;login&gt;</code>:通过登录名删除分配的用户。使用”@me”取消分配自己。</li><li><code>--remove-label &lt;name&gt;</code>:按名称删除标签</li><li><code>--remove-project &lt;name&gt;</code>:按名称从项目中删除问题</li></ul><blockquote><p><code>gh issue delete &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>删除问题</p><p><code>gh issue close &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>关闭问题</p><p><code>gh issue reopen &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>:重新打开问题</p></blockquote><p>…</p><blockquote><p><code>gh issue comment &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>创建新问题评论</p></blockquote><ul><li><code>-b,--body &lt;string&gt;</code>提供正文。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-e,--editor</code>:使用编辑器添加正文</li><li><code>-w,--web</code>:在浏览器中添加正文</li></ul><blockquote><p><code>gh issue status [flags]</code>:问题状态</p></blockquote><ul><li>[-t,–template <string> | -q,–jq <expression> | –json <fields>]:输出格式</li></ul><blockquote><p><code>gh issue transfer &#123;&lt;number&gt; | &lt;url&gt;&#125; &lt;destination-repo&gt;</code>将问题转到另一个库</p></blockquote><h3 id="gh-pr"><a href="#gh-pr" class="headerlink" title="gh pr"></a>gh pr</h3><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li></ul><blockquote><p>gh pr list [flags]</p></blockquote><ul><li><code>[-a | -A | -L | -l | -S | -s | --json | -q | -t | -w]</code>查看issue</li><li><code>-B,--base &lt;string&gt;</code>:按基本分支筛选</li><li><code>-d,--draft</code>:按草稿状态筛选</li><li><code>-H,--head &lt;string&gt;</code>:按头分支筛选</li></ul><blockquote><p><code>gh pr view [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:显示有关拉取请求的标题、正文和其他信息</p></blockquote><ul><li><code>[ --json | -q | -t ]</code>:输出格式</li><li><code>-c,--comments</code>:查看拉取请求注释</li></ul><blockquote><p><code>gh pr status [flags]</code>:查看拉取请求的状态</p></blockquote><ul><li><code>[ --json | -q | -t ]</code>:输出格式</li></ul><blockquote><p><code>gh pr close &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125; [flags]</code>:关闭pr</p></blockquote><ul><li><code>-d,--delete-branch</code>:关闭后删除本地和远程分支</li></ul><blockquote><p><code>gh pr reopen &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125;</code>:重新打开和拉取请求</p></blockquote><p>…</p><blockquote><p><code>gh pr checkout &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125; [flags]</code>:在git中拉取请求到本地</p></blockquote><ul><li><code>-b,--branch &lt;string&gt;</code>:远程分支要使用的本地分支名称(默认是主分支)</li></ul><blockquote><p><code>gh pr review [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:审阅当前的拉取请求</p></blockquote><ul><li><code>-a,--approve</code>:批准拉取请求</li><li><code>-b,--body &lt;string&gt;</code>:指定审阅的正文</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本</li><li><code>-c,--comment</code>:对拉取请求发表评论</li><li><code>-r,--request-changes</code>:请求对拉取请求进行更改</li></ul><blockquote><p><code>gh pr comment [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:创建新的 PR 注释(评论)</p></blockquote><ul><li><code>-b,--body &lt;string&gt;</code>:提供正文。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-e,--editor</code>:使用编辑器添加正文</li><li><code>-w,--web</code>:打开浏览器</li></ul><blockquote><p><code>gh pr ready [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;]</code>:将拉取请求标记为已就绪(可供审核)</p></blockquote><p>…</p><blockquote><p><code>gh pr merge [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:在 GitHub 上合并拉取请求</p></blockquote><ul><li><code>--admin</code>:使用管理员权限合并不符合要求的拉取请求</li><li><code>--auto</code>:仅在满足必要要求后自动合并</li><li><code>-b,--body &lt;text&gt;</code>:合并提交的正文文本</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-d,--delete-branch</code>:合并后删除本地和远程分支</li><li><code>--disable-auto</code>:禁用此拉取请求的自动合并</li><li><code>-m,--merge</code>:将提交与基本分支合并</li><li><code>-r,--rebase</code>:将提交重新定位到基础分支</li><li><code>-s,--squash</code>:将提交压缩到一个提交中，然后将其合并到基础分支中</li><li><code>-t,--subject &lt;text&gt;</code>:合并提交的主题文本</li></ul><blockquote><p><code>gh pr create [flags]</code>:创建一个pr</p></blockquote><ul><li><p>[-a | -b | -F | -l | -m | -P | -t | -w]</p></li><li><p><code>-B,--base &lt;branch&gt;</code>:要将代码合并到其中的分支</p></li><li><p><code>-d,--draft</code>:将拉取请求标记为草稿</p></li><li><p><code>-f,--fill</code>:不要提示标题&#x2F;正文，只使用提交信息</p></li><li><p><code>-H,--head &lt;branch&gt;</code>:包含拉取请求提交的分支（默认值：当前分支）</p></li><li><p><code>--no-maintainer-edit</code>:禁用维护者修改拉取请求的功能</p></li><li><p><code>--recover &lt;string&gt;</code>:从失败的创建运行中恢复输入</p></li><li><p><code>-r,--reviewer &lt;handle&gt;</code>:按句柄请求人员或团队进行审核</p></li></ul><blockquote><p><code>gh pr diff [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code></p></blockquote><p><code>--color &lt;string&gt;</code>:在差异输出中使用颜色：{always|never|auto}<br><code>--patch</code>:以补丁格式显示差异</p><blockquote><p><code>gh pr edit [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:编辑拉取请求。</p></blockquote><p>–add-assignee <login>| –remove-assignee <login> | –add-label <name> | –remove-label <name> | –add-reviewer <login> | –remove-reviewer <login> | –add-project <name> | –remove-project <name> | -b,–body <string> | -F,–body-file <file> | -m,–milestone <name> | -t,–title <string></p><ul><li><code>-B,--base &lt;branch&gt;</code>:更改此拉取请求的基本分支</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;githubCli&quot;&gt;&lt;a href=&quot;#githubCli&quot; class=&quot;headerlink&quot; title=&quot;githubCli&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://cli.github.com/&quot;&gt;githubCli&lt;/a&gt;&lt;/h2&gt;&lt;blockq</summary>
      
    
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/categories/git/"/>
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件</title>
    <link href="http://mail.zyjcould.ltd/2022/02/15/dom-shi-jian/"/>
    <id>http://mail.zyjcould.ltd/2022/02/15/dom-shi-jian/</id>
    <published>2022-02-15T13:11:41.000Z</published>
    <updated>2022-04-08T02:05:13.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><img src="./DOM%E4%BA%8B%E4%BB%B6.png" alt="DOM事件"></p><h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><blockquote><p>使用 <code>对象.事件=函数</code>的形式只能同时为一个元素的一个事件绑定一个响应函数.不能绑定多个,如果绑定多个,则后边会覆盖前边的</p></blockquote><ul><li><code>addEventListener()</code>:通过这个方法也可以为元素绑定响应函数<ul><li>参数<ol><li><strong>事件的字符串,不要on</strong></li><li>回调函数,当事件触发时,该事件触发时该函数会被调用</li><li>是否在捕获阶段触发事件,需要一个布尔值,<span style="color:red">默认值false(冒泡阶段调用)</span></li></ol></li><li>注意:<ul><li>使用<code>addEventListener()</code>可以同时为一个元素的相同事件同时绑定多个响应函数.</li><li>这样当事件触发时,响应函数将会按照函数的绑定顺序执行</li></ul></li></ul></li><li><code>removeEventListener()</code>:使用addEventListener()绑定的事件只能通过<code>removeEventListener()</code>来移除.并且如果addEventListener()中的第二个参数是匿名参数将无法移除<ul><li>参数和<code>addEventListener()</code>相同</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">ale</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> ale<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>ale<span class="token punctuation">,</span>fasle<span class="token punctuation">)</span>    <span class="token comment">//函数调用式</span>    <span class="token keyword">function</span> <span class="token function">bond</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>    <span class="token function">bond</span><span class="token punctuation">(</span>btn01<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="event对象"><a href="#event对象" class="headerlink" title="event对象"></a>event对象</h3><blockquote><p>event对象是传给事件处理程序的唯一参数.不管任何方式都会指定<code>event</code>(类似arguments)</p></blockquote><ul><li><code>event.type</code>:获得触发事件的类型</li></ul><blockquote><p><code>currentTarge</code>和<code>targe</code>.前者是当前事件处理程序的所在元素.并且始终等于this对象,而target只包含事件的实际目标</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarge <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>targe <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件处理程序添加到父节点</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarge <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>targe <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>event.preventDefault()</code>:用于阻止特定事件的默认动作.比如链接的默认行为是在被单机时导航到href属性指定的url</li><li><code>event.stopPropagation()</code>:立即阻止事件流在DOM结构中传播.取消后续事件捕获或者冒泡</li></ul><h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><blockquote><p>W3C</p></blockquote><ol><li>捕获阶段:-在捕获阶段时,从最外层的祖先元素,向目标元素进行事件捕获,但是默认此时不会触发事件</li><li>目标阶段:-事件捕获到目标元素,捕获结束开始再目标元素上触发事件</li><li>冒泡阶段:-事件从目标元素向他的祖先元素传递,依次触发祖先元素上的事件<ul><li>注意:<ol><li>如果希望在捕获阶段就触发事件,可以将addEventListener()的第三个参数设置为true</li><li>一般情况下我们不希望再捕获阶段触发时间,所以这个一般都是false</li></ol></li></ul></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box3</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box1的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box2<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box2的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box3<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box3的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的冒泡-Bubble"><a href="#事件的冒泡-Bubble" class="headerlink" title="事件的冒泡(Bubble)"></a>事件的冒泡(Bubble)</h3><ol><li>所谓的冒泡指的就是事件的向上传导,当后代的事件被触发时,其祖先元素的相同事件也会被触发</li><li>在开发中大部分情况冒泡都是有用的</li><li>如果不希望发生事件冒泡可以通过事件对象来取消冒泡</li></ol><ul><li>解决:将事件对象的cancelBubble设置为true,即可取消冒泡.<code>event.cancelBubble=true</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#s1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为s1绑定一个单机响应函数</span>    <span class="token keyword">let</span> s1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是span的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取消冒泡</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是div的单机响应函数"</span><span class="token punctuation">)</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是body的单机响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        我是box1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            我是span        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><blockquote><ul><li>指将事件统一绑定给元素的共同的祖先,这样当后代元素上的事件触发时,会一直冒泡到祖先元素.从而通过祖先元素的响应函数来处理事件</li><li>事件委派是<strong>利用了冒泡</strong>,通过委派可以减少事件的绑定次数,提高程序的性能</li></ul></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点击按钮以后添加超链接</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">)</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创键一个li</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='javascript:;'class='link'>新建超链接一&lt;/a>"</span><span class="token punctuation">;</span>      <span class="token comment">//将li添加到ul中</span>      ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">//我们希望只绑定一次事件,即可应用到多个元素上,即使元素是后添加的.我们可以尝试将其绑定给元素的共同祖先元素</span>    ul<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//target:-event中的target表示的触发对象</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token operator">==</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><ul><li><input checked="" disabled="" type="checkbox"> 用户界面事件(UIEvent):涉及BOM交互的通用浏览器事件</li><li><input checked="" disabled="" type="checkbox"> 焦点事件(FocusEvent):元素获得或失去焦点时触发</li><li><input checked="" disabled="" type="checkbox"> 鼠标事件(MouseEvent):鼠标在页面上执行某些操作触发</li><li><input checked="" disabled="" type="checkbox"> 滚轮事件(WheelEvent):使用鼠标滚轮或者类似设备触发</li><li><input checked="" disabled="" type="checkbox"> 键盘事件(InputEvent):在文档中输入文本时触发</li><li><input disabled="" type="checkbox"> 合成事件(CompositionEvent):使用某种IME(输入法编辑器)输入字符时触发</li></ul><h3 id="用户界面事件"><a href="#用户界面事件" class="headerlink" title="用户界面事件"></a>用户界面事件</h3><blockquote><p>load事件,在window对象上,load事件会在整个页面(包括所有的外部资源,js文件和css文件)加载完成后触发</p></blockquote><ul><li>使用<code>window.onload</code>或者使用<code>addEventListener()</code></li></ul><blockquote><p><code>unload</code>:与事件load相对.会在文档卸载完成后触发.unload事件一般是在从一个页面导航到另一个页面时触发,常用于清理引用,以避免内存泄露</p></blockquote><ul><li>使用<code>window.onunload</code>或者使用<code>addEventListener()</code></li></ul><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><ul><li><code>blur</code>:当元素失去焦点时触发.不冒泡</li><li><code>focus</code>:当元素获得焦点时触发.不冒泡</li><li><code>focusin</code>:当元素获得焦点时触发.是<code>focus</code>的冒泡版</li><li><code>focusout</code>:当元素失去焦点时触发.是<code>blur</code>的通用版</li></ul><blockquote><p>文本框自动获取元素</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">loseFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setFocus()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Set focus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 或者直接使用autofocus --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标和滚轮事件"><a href="#鼠标和滚轮事件" class="headerlink" title="鼠标和滚轮事件"></a>鼠标和滚轮事件</h3><ul><li><code>click</code>:用户单机鼠标主键(通常是左键)或者按回车键时触发.</li><li><code>dblclick</code>:用户双机鼠标主键(通常是左键).</li><li><code>mousedown</code>:用户按下任意鼠标键触发</li><li><code>mouseenter</code>:用户把光标从元素的外部移动到元素的内部触发.该事件不冒泡,也不会在光标经过后代元素触发</li><li><code>mouseleave</code>:用户把光标从元素的内部移动到元素的外部触发.该事件不冒泡,也不会在光标经过后代元素触发</li><li><code>mousemove</code>:鼠标在元素上移动时反复触发</li><li><code>mouseout</code>:鼠标光标从一个元素移动到另一个元素时触发.移到的元素可以是原始元素的外部元素也可以是子元素</li><li><code>mouseover</code>:用户把鼠标光标从元素的外部移动到元素的内部时触发</li><li><code>mouseup</code>:用户释放鼠标时触发</li></ul><blockquote><p>点击事件的触发顺寻</p></blockquote><ol><li>mousedown</li><li>mouseup</li><li>click</li><li>mousedown</li><li>mouseup</li><li>click</li><li>dblclick</li></ol><blockquote><p>客户端坐标:被保存在<code>event.clientX</code>(鼠标指针的水平坐标)和&#96;&#96;event.clientY&#96;(鼠标指针的垂直坐标)</p></blockquote><ul><li>这两个属性表示事件发生时鼠标光标在视口中的位置</li></ul><blockquote><p>页面坐标:页面坐标时事件发生在页面上的坐标<code>event.pageX</code>和<code>event.pageY</code>可以获取.</p></blockquote><ul><li>这个属性返回的是鼠标在页面上的位置,并不是像客户端坐标一样返回的是视口左边与上边的距离</li></ul><blockquote><p>屏幕坐标:相对于屏幕,而不是相对于浏览器视口.所以通常屏幕坐标大于等于客户端坐标</p></blockquote><ul><li><code>event.screenX</code>和<code>event.screenY</code>来获取坐标位置</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#areaDiv</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#showMsg</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> areaDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"areaDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> showMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    areaDiv<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>      <span class="token keyword">let</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>      <span class="token comment">//在showMsg中显示鼠标的坐标</span>      showMsg<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"y="</span> <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>areaDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>onmousewheel</code>鼠标滚轮滚动的事件,会在滚轮滚动时触发,但是火狐不支持<ul><li><code>event.wheelDelta</code>可以获取鼠标滚轮滚动的方向</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取id为box1的div</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为box1绑定一个鼠标滚轮滚动的事件</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousewheel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断鼠标滚轮滚动的方向</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向上滚,box1变短</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向下滚,box1变长</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/*       当滚动条滚动时,如果浏览器有滚动条,滚动条会随之滚动      这是浏览器的默认行为,如果不希望发生,则取消默认行为      */</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><code>keydown</code>-按键被按下<ul><li><span style="color:red">注意:</span><ol><li>对于onkeydown来说如果一直按着某个按键不松手,则事件会一直触发</li><li>当onkeydown连续触发时,第一次和第二次之间隔时间会稍微长一点,防止误操作</li></ol></li></ul></li><li><code>keyup</code>-按键被松开:键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</li></ul><blockquote><p>键码<code>keyCode</code></p></blockquote><ul><li>event对象的<code>keyCode</code>属性会保存一个键码.对于键盘上特定的键.例如A键的键码是<code>65</code></li></ul><blockquote><p><code>key</code>在DOM3中,key属性用于替代keyCode.同样属于event对象的属性</p></blockquote><ul><li>按下字符键时,key的值等于文本字符(如<code>K</code>或者<code>M</code>).如果按下的是非字符键,key的值就是键名(如<code>Shift</code>)</li></ul><blockquote><p>修饰键:通过event对象暴露.<code>event.altKey</code>,<code>event.ctrlKey</code>等等.来判断按下键是否属于这个键</p></blockquote><ul><li><code>altKey &amp; ctrlKey &amp; shiftKey</code>:这个用来判断alt ctrl 和shift是否被按下.如果按下则返回true,否则返回false</li></ul><blockquote><p><code>textInput</code>事件,在字符串输入到可编辑区域时触发.</p></blockquote><ul><li><code>textInput</code>主要关注字符.所以在event对象上提供了一个data属性.data值始终是要插入的字符</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"textInput"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>同时event上还有一个<code>inputMethod</code>属性,表示向控件输入文本的手段</p></li><li><p>0:不能确定是什么手段</p></li><li><p>1:表示键盘</p></li><li><p>2:表示粘粘</p></li><li><p>3:表示拖放操作</p></li><li><p>4:表示IME</p></li><li><p>5:表示表单选项</p></li><li><p>6:表示手写</p></li><li><p>7:表示语音</p></li><li><p>8:表示组合方式</p></li><li><p>9:表示脚本</p></li></ul><h3 id="其它事件"><a href="#其它事件" class="headerlink" title="其它事件"></a>其它事件</h3><blockquote><p><code>onchange</code>:用于在 input,textarea,select,radio 等元素中监听的变化</p></blockquote><ul><li>当元素的值发生改变时.会发生<code>onchange</code>事件。对于单选框和复选框.在被选择的状态改变时.发生<code>onchange</code>事件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>document.getElementById("input").onchange = function (e) &#123;  let file = e.target.files[0]  let img = new Image()  img.src = URL.createObjectURL(file)  document.body.appendChild(img)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件对象&quot;&gt;&lt;a href=&quot;#事件对象&quot; class=&quot;headerlink&quot; title=&quot;事件对象&quot;&gt;&lt;/a&gt;事件对象&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;./DOM%E4%BA%8B%E4%BB%B6.png&quot; alt=&quot;DOM事件&quot;&gt;&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/categories/JS/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>nuxt</title>
    <link href="http://mail.zyjcould.ltd/2022/02/12/nuxt/"/>
    <id>http://mail.zyjcould.ltd/2022/02/12/nuxt/</id>
    <published>2022-02-12T09:21:52.000Z</published>
    <updated>2022-03-19T08:12:04.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>npx nuxi init nuxt-app</code>:首先得初始化一个nuxt3的项目</p></blockquote><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><blockquote><p>Nuxt 会自动将 <code>Vue Router</code> 和 <code>map</code> 目录集成到应用程序的路由中(pages)</p></blockquote><ol><li>&lt;NuxtWelcome&gt;:nuxt的欢迎页面</li><li>&lt;NuxtPage&gt;:展示页面,相当于&lt;router-view&gt;</li><li>&lt;NuxtLink&gt;:导航链接,相当于&lt;router-link&gt;</li><li>&lt;NuxtChild&gt;:嵌套路由中显示子组件</li></ol><blockquote><p>动态路由:在pages中使用<code>[]</code>表示动态的路由</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> pages/---<span class="token operator">|</span> index.vue---<span class="token operator">|</span> users-<span class="token punctuation">[</span>group<span class="token punctuation">]</span>/-----<span class="token operator">|</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span>.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>index.vue</code>中,写入动态部分</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;NuxtLink to&#x3D;&quot;&#x2F;user-admin&#x2F;1&quot;&gt;user-admin&#x2F;1&lt;&#x2F;NuxtLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在全局也可以拿到动态路由数据</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;&#123;&#123; $route.params.group &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在script中使用<code>useRoute()</code>函数也可以拿到动态路由的值</li></ul><blockquote><p>嵌套路由:由嵌套多个层深的组件组成(其中嵌套的文件夹parent同级下需要一个<code>parent.vue</code>)</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> pages/---<span class="token operator">|</span> parent/------<span class="token operator">|</span> child.vue---<span class="token operator">|</span> parent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>parent.vue</code>中使用&lt;NuxtChild&#x2F;&gt;显示<code>child.vue</code>中的内容</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;parent&lt;&#x2F;h1&gt;    &lt;NuxtChild &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依然需要在<code>index.vue</code>中使用路由链接</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;NuxtLink to&#x3D;&quot;&#x2F;parent&#x2F;child&quot;&gt;parent&lt;&#x2F;NuxtLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="布局-layouts"><a href="#布局-layouts" class="headerlink" title="布局(layouts)"></a>布局(layouts)</h2><blockquote><p>在nuxt中自定义的布局框架,可以在整个应用程序中使用.可以将重读的UI提取到这个此文件中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> layouts/---<span class="token operator">|</span> default.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用<code>default.vue</code>用于应用中的所有页面除了(app.vue).<code>app.vue</code>依然会是所有页面的入口</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div&gt;  &lt;h1&gt;默认布局&lt;&#x2F;h1&gt;  &lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义布局:如果不想在所有页面设置属性,就需要在某个页面设置属性(<code>layout</code>).并且不能使用<code>default.vue</code>,而应该使用别的,例如<code>custom.vue</code>.</p></blockquote><ul><li>例如我们自定义一个<code>custom.vue</code>之后就可以在有需要的页面使用</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">definePageMeta(&#123;  layout: &#39;custom&#39;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用插槽:可以对页面进行完全的控制.需要使用&lt;NuxtLayout&gt;并且<code>layout:false</code></p></blockquote><ul><li>需要使用的<code>layout</code>的页面(类似于父页面)</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  hhh  &lt;NuxtLayout name&#x3D;&quot;custom&quot;&gt;    &lt;template #header&gt;      &lt;h1&gt;这不好吧&lt;&#x2F;h1&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;NuxtLayout&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;definePageMeta(&#123;  layout: false,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>layout</code>的插槽页面<code>custom</code>(类似于子页面)</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;特殊的页面&lt;&#x2F;h1&gt;    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件-components"><a href="#组件-components" class="headerlink" title="组件(components)"></a>组件(components)</h2><blockquote><p>放在该目录的所有组件可以直接将器导入其它页面或者组件中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">|</span> components/--<span class="token operator">|</span> TheHeader.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;TheHeader&gt;&lt;&#x2F;TheHeader&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是嵌套目录,那么组件的名称需要加入文件名称</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> components/---<span class="token operator">|</span> test/-----<span class="token operator">|</span> hao.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#96;&#96;&#96;vue&lt;template&gt;  &lt;TheHeader&gt;&lt;&#x2F;TheHeader&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不需要在<code>script</code>中使用import导入,直接可以使用</li></ul><blockquote><p>懒加载:将将前缀(<code>Lazy&#39;</code>)添加到组件的名称中.例如<code>&lt;LazyTheHeader&gt;</code></p></blockquote><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><blockquote><p><code>useFetch</code>,<code>useLazyFetch</code>,<code>useAsyncData</code>,<code>useLazyAsyncData</code>仅在生命周期或者setup中可以使用</p></blockquote><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><blockquote><p>在nuxt项目的根目录,nuxt会自动读取<code>server/api</code>下文件的promise或者JSON数据(后端服务器)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const todos &#x3D; [  &#123; id: 1, title: &#39;nuxt3&#39;, completed: false &#125;,  &#123; id: 2, title: &#39;vue3&#39;, completed: true &#125;,]export default () &#x3D;&gt; todos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData"></a>useAsyncData</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123;  data: Ref&lt;DataT&gt;,  pending: Ref&lt;boolean&gt;,  refresh: (force?: boolean) &#x3D;&gt; Promise&lt;void&gt;,  error?: any&#125; &#x3D; useAsyncData(  key: string,  fn: () &#x3D;&gt; Object,  options?: &#123; lazy: boolean, server: boolean &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数参数</p></blockquote><ol><li><code>key</code>:保证请求数据不会重复</li><li><code>fn</code>:返回值的异步函数</li><li><code>options</code>:<ol><li><code>lazy</code>:是否在加载路由后解析异步函数，而不是阻塞导航(默认为false,卡顿现象)</li><li><code>default()</code>:一个工厂函数，用于在异步函数解析之前设置数据的默认值 (配合<code>lazy:true</code>)</li><li><code>server</code>:是否在服务器端获取数据(默认为true),用户可以直接浏览到页面</li><li><code>transform()</code>:一个函数，可用于在解析后改变fn结果</li><li><code>pick</code>:仅从 fn 结果中选取此数组中的指定键.<span style="color:red">只能适用于对象</span></li></ol></li></ol><blockquote><p>返回值</p></blockquote><ol><li><code>data</code>:传入的异步函数的结果</li><li><code>pending</code>:指示数据是否仍在提取(配合<code>lazy:true</code>,可以写一些加载提示器)</li><li><code>refresh</code>:可用于强制刷新数据的函数</li><li><code>error</code>:错误对象</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; data: todos &#125; &#x3D; await useAsyncData(&#39;todos&#39;, () &#x3D;&gt; $fetch(&#39;&#x2F;api&#x2F;todo&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="useLazyAsyncData"><a href="#useLazyAsyncData" class="headerlink" title="useLazyAsyncData"></a>useLazyAsyncData</h3><blockquote><p>此方法仅是将<code>useAsyncData</code>中的<code>lazy</code>设置为true(异步函数不会阻止导航).这得考虑data为null的情况(或者使用<code>default</code>给data设置一个默认值)</p></blockquote><h3 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch"></a>useFetch</h3><blockquote><p><code>useFetch</code>是对<code>useAsyncData</code>的包装,自动生成key同时推断响应类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123;  data: Ref&lt;DataT&gt;,  pending: Ref&lt;boolean&gt;,  refresh: (force?: boolean) &#x3D;&gt; Promise&lt;void&gt;,  error?: any&#125; &#x3D; useFetch(url: string, options?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Options:<ol><li><a href="https://github.com/unjs/ohmyfetch"><code>ohmyfetch</code></a><ul><li><code>method</code>:请求方法</li><li><code>params</code>:查询参数</li><li><code>headers</code>:请求标头</li><li><code>baseURL</code>:请求的基本 URL</li></ul></li><li><code>useAsyncData</code>中的也可以使用</li></ol></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; data: todos &#125; &#x3D; await useFetch(&#39;&#x2F;api&#x2F;todo&#39;,&#123;pick:[&quot;data&quot;],transform(input)&#123;   return input&#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h2><blockquote><p>一般在<code>composables</code>中创建<code>useState()</code></p></blockquote><h3 id="composables"><a href="#composables" class="headerlink" title="composables"></a>composables</h3><blockquote><p>只有目录顶层的文件(或任何子目录中的索引文件)才会被认定为可组合的文件</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">composables <span class="token operator">|</span> - useFoo.ts <span class="token operator">|</span> - useBar <span class="token operator">|</span> --- supportingFile.ts <span class="token operator">|</span> --- index.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以直接在该目录下使用useState状态管理(不需要任何导入)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const useCounter &#x3D; () &#x3D;&gt; useState(&#39;counter&#39;, () &#x3D;&gt; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在组件中使用,不需要任何导入</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const counter &#x3D; useCounter()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h2><blockquote><p>可以使用文件名或后缀来仅在服务器端(<code>.server</code>)或客户端(<code>client</code>)加载插件.</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">plugins <span class="token operator">|</span> - myPlugin.ts <span class="token operator">|</span> - myOtherPlugin <span class="token operator">|</span> --- supportingFile.ts <span class="token operator">|</span> --- componentToRegister.vue <span class="token operator">|</span> --- index.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建一个简单的插件</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineNuxtPlugin &#125; from &#39;#app&#39;;export default defineNuxtPlugin((nuxtApp) &#x3D;&gt; &#123;  return &#123;    provide: &#123;      hello: () &#x3D;&gt; &#39;world&#39;,    &#125;,  &#125;;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>导入插件时会自动加上<code>$</code>符号区分</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; $hello &#125; &#x3D; useNuxtApp();console.log($hello());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="按需引入组件库"><a href="#按需引入组件库" class="headerlink" title="按需引入组件库"></a>按需引入组件库</h3><blockquote><p>全局挂载组件<code>nuxtApp.vueApp.use</code></p></blockquote><ul><li><code>npm i vue-devui</code></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineNuxtPlugin &#125; from &#39;#app&#39;;import &#123; Button &#125; from &#39;vue-devui&#39;;import &#39;vue-devui&#x2F;button&#x2F;style.css&#39;;export default defineNuxtPlugin((nuxtApp) &#x3D;&gt; &#123;  nuxtApp.vueApp.use(Button);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a><a href="https://pinia.vuejs.org/ssr/nuxt.html">pinia</a></h2><ul><li>下载:<code>npm install pinia @pinia/nuxt</code></li><li>在<code>nuxt.config.ts</code>中添加模块,如果不想使用vuex可以将<code>disableVuex</code>改成false</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">buildModules: [[&#39;@pinia&#x2F;nuxt&#39;, &#123; disableVuex: true &#125;]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在根目录下新建<code>store/counter.ts</code>就可以使用了</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineStore &#125; from &#39;pinia&#39;;export const useStore &#x3D; defineStore(&#39;counter&#39;, &#123;  state() &#123;    return &#123;      count: 0,    &#125;;  &#125;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npx nuxi init nuxt-app&lt;/code&gt;:首先得初始化一个nuxt3的项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;pages&quot;&gt;&lt;a href=&quot;#pages&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="vue" scheme="http://mail.zyjcould.ltd/categories/vue/"/>
    
    
    <category term="JS" scheme="http://mail.zyjcould.ltd/tags/JS/"/>
    
    <category term="TS" scheme="http://mail.zyjcould.ltd/tags/TS/"/>
    
    <category term="vue" scheme="http://mail.zyjcould.ltd/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>gitDependabot</title>
    <link href="http://mail.zyjcould.ltd/2022/02/11/gitdependabot/"/>
    <id>http://mail.zyjcould.ltd/2022/02/11/gitdependabot/</id>
    <published>2022-02-11T08:46:29.000Z</published>
    <updated>2022-03-19T08:12:04.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>dependabot</code>会在您的 GitHub 仓库自动创建一个 PR 来更新依赖文件，并说明依赖更新内容，用户自己选择是否 <code>merge</code> 该 PR</p></blockquote><ul><li>使用,仅需要在<code>.github</code>文件夹下写入配置文件<code>dependabot.yml</code></li></ul><h2 id="dependabot"><a href="#dependabot" class="headerlink" title="dependabot"></a><a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#about-the-dependabotyml-file">dependabot</a></h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># dependabot.yml file with</span><span class="token comment"># customized schedule for version updates</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">updates</span><span class="token punctuation">:</span>  <span class="token comment"># Keep npm dependencies up to date</span>  <span class="token punctuation">-</span> <span class="token key atrule">package-ecosystem</span><span class="token punctuation">:</span> <span class="token string">"npm"</span>    <span class="token key atrule">directory</span><span class="token punctuation">:</span> <span class="token string">"/"</span>    <span class="token comment"># Check the npm registry for updates at 2am UTC</span>    <span class="token key atrule">schedule</span><span class="token punctuation">:</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token string">"daily"</span>      <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token string">"02:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>version</code>:版本号</li></ol><h3 id="必须选项"><a href="#必须选项" class="headerlink" title="必须选项"></a>必须选项</h3><ol><li><code>package-ecosystem</code>:使用的包管理器,像<code>docker</code>,<code>npm</code>,<code>pip</code>等等</li><li><code>directory</code>:项目的根目录.使用<code>/</code>相当于检查除git action之外的所有目录</li><li><code>schedule</code>:每个包管理器定义检查新版本的频率<ul><li><code>interval</code>:更新的频率<ul><li>daily——在每个工作日运行，周一至周五。</li><li>weekly——每周运行一次。默认情况下，这是在星期一。要修改它，请使用schedule.day.</li><li>monthly——每月运行一次。这是一个月的第一天</li></ul></li><li><code>time</code>:指定的每天更新时间<ul><li><code>time: &quot;02:00&quot;</code>:每天两点更新</li></ul></li><li><code>day</code>:指定每周的更新时间<ul><li>monday</li><li>tuesday</li><li>wednesday</li><li>thursday</li><li>friday</li><li>saturday</li><li>sunday</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dependabot&lt;/code&gt;会在您的 GitHub 仓库自动创建一个 PR 来更新依赖文件，并说明依赖更新内容，用户自己选择是否 &lt;code&gt;merge&lt;/code&gt; 该 PR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/categories/git/"/>
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gitAction</title>
    <link href="http://mail.zyjcould.ltd/2022/02/09/gitaction/"/>
    <id>http://mail.zyjcould.ltd/2022/02/09/gitaction/</id>
    <published>2022-02-09T05:38:28.000Z</published>
    <updated>2022-03-19T08:12:04.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>github Action是github提供的持续集成的操作,可以抓取代码,运行测试,登录远程服务器,发布到第三方服务器等等</p></blockquote><h2 id="创建一个工作流程"><a href="#创建一个工作流程" class="headerlink" title="创建一个工作流程"></a>创建一个工作流程</h2><blockquote><p>基本概念</p></blockquote><ol><li><code>workflow</code>(工作流程):持续集成一次运行的过程,就是一个workflow</li><li><code>job</code>(任务):一个workflow由一个后者多个jobs构成,即一次CI&#x2F;CD可以完成多个任务</li><li><code>step</code>(步骤):每个job由多个step构成,一步步完成</li><li><code>action</code>(动作):每个step可以依次执行一个或者多个命令(action)</li></ol><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a><a href="https://docs.github.com/en/actions/using-workflows">workflow</a></h3><blockquote><p>一个库里可以有多个<code>workflow</code>文件.github只要发现<code>.github/workflows</code>目录里有<code>.yml</code>文件,就会自动运行该文件</p></blockquote><ol><li>创建<code>.github/workflows</code>目录</li><li>在<code>.github/workflows</code>目录中,创建一个名为<code>github-actions-demo.yml</code>的文件</li><li>然后就可以编辑yaml文件了</li></ol><blockquote><p><code>name</code>字段:是workflow的名称.如果省略该字段,默认为当前workflow的文件名</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>on</code>:指定触发<code>workflow</code>的条件,通常是某些事件</p></blockquote><ol><li>指定单个事件:<code>on: push</code></li><li>指定多个事件:<code>on:[push,pull_request]</code></li><li>指定事件流程</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用[活动类型]<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows</a>:更好地控制工作流的运行时间</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">label</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>created<span class="token punctuation">,</span> edited<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="push-x2F-pull-request"><a href="#push-x2F-pull-request" class="headerlink" title="push&#x2F;pull_request"></a>push&#x2F;pull_request</h4><blockquote><p>分支<code>branches</code>(包括分支),<code>branches-ignore</code>(排除分支)<span style="color:red">push ,pull_request</span>可用</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> main      <span class="token punctuation">-</span> <span class="token string">'mona/octocat'</span>      <span class="token punctuation">-</span> <span class="token string">'releases/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>main</code>:只有运行main分支才会触发</li><li><code>&#39;mona/octocat&#39;</code>:只有运行<code>mona/octocat</code>分支才会触发</li><li><code>&#39;releases/**&#39;</code>:运行以<code>releases</code>开头的分支就会触发</li></ul><blockquote><p>标记<code>tags</code>(包括标记),<code>tags-ignore</code>(排除标记)<span style="color:red">push</span>可用</p></blockquote><hr></hr><blockquote><p>路径<code>paths</code>(包括路径)<code>paths-ignore</code>(忽略路径)<span style="color:red">push ,pull_request</span>可用</p></blockquote><ul><li>只要推送带有js的文件,就会触发</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'**.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果推送的所有文件路径都和<code>paths-ignore</code>中的正则匹配,则不会触发</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">paths-ignore</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'docs/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h4><blockquote><p>定义工作流的时间表。可以使用 <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07"><code>POSIX cron</code></a> 语法将工作流安排在特定 UTC 时间运行。计划的工作流在默认分支或基本分支上的最新提交上运行。可以运行计划工作流的最短间隔为每 5 分钟一次</p></blockquote><ol><li>分钟 [0,59]</li><li>小时 [0,23]</li><li>本月的一天 [1,31]</li><li>一年中的月份 [1,12]</li><li>星期几([0,6] 与 0 &#x3D;星期日)</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>    <span class="token comment"># 每天的5.30和17.30触发</span>    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span>  <span class="token string">'30 5,17 * * *'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="workflow-call"><a href="#workflow-call" class="headerlink" title="workflow_call"></a>workflow_call</h4><p>…</p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><blockquote><p><code>workflow</code>中所有作业的步骤的环境变量.也可以设置仅可用于单个作业的步骤或单个步骤的环境变量<code>jobs.&lt;job_id&gt;.env</code>和<code>jobs.&lt;job_id&gt;.steps[*].env</code></p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># env</span><span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token key atrule">SERVER</span><span class="token punctuation">:</span> production<span class="token comment"># steps</span><span class="token key atrule">steps</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> My first action    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">FIRST_NAME</span><span class="token punctuation">:</span> Mona      <span class="token key atrule">LAST_NAME</span><span class="token punctuation">:</span> Octocat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><blockquote><p><code>jobs</code>是<code>workflow</code>中的主体字段,表示要执行一项或多项任务</p><p>每个任务都需要一项任务的<code>job_id</code></p></blockquote><h4 id="jobs-name"><a href="#jobs-name" class="headerlink" title="jobs..name"></a>jobs.<job_id>.name</h4><blockquote><p>name字段是对任务的说明</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">my_first_job</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> My first job  <span class="token key atrule">my_second_job</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jobs-needs"><a href="#jobs-needs" class="headerlink" title="jobs..needs"></a>jobs.<job_id>.needs</h4><blockquote><p>needs:指定当前任务的依赖关系,即运行顺序</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">job1</span><span class="token punctuation">:</span>  <span class="token key atrule">job2</span><span class="token punctuation">:</span>    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1  <span class="token key atrule">job3</span><span class="token punctuation">:</span>    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>job1</code>必须先于<code>job2</code>完成,而<code>job3</code>等待<code>job1和job2</code>的完成才能运行</li></ul><h4 id="jobs-runs-on"><a href="#jobs-runs-on" class="headerlink" title="jobs..runs-on"></a>jobs.<job_id>.runs-on</h4><blockquote><p>用于定义要在其上运行作业的计算机的类型</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="jobs-steps"><a href="#jobs-steps" class="headerlink" title="jobs..steps"></a>jobs.<job_id>.steps</h4><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>:步骤名称</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>:该步骤运行的命令或者 action</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>:该步骤所需的环境变量</li></ul><blockquote><p><code>uses</code>:选择一个别人写好的<code>action</code>,可以理解为若干 <code>steps.run</code>,有利于代码复用</p></blockquote><ul><li><p>例如下面的use就是<code>actions</code>用户(github官方的账号)的checkout仓库.<code>@v1</code>就是版本号,也可以接分支<code>@master</code></p></li><li><p>当前操作系统中安装 <code>node:16</code> 的 action 示例</p></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> use Node.js 16.x  <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1  <span class="token key atrule">with</span><span class="token punctuation">:</span>    <span class="token key atrule">node-version</span><span class="token punctuation">:</span> 16.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用docker镜像<ul><li>镜像中心:<code>docker://&#123;image&#125;:&#123;tag&#125;</code>,在当前的系统中运行了一个docker镜像.而不是在容器中运行<ul><li><code>container</code>是指定在容器中运行</li><li>以下就是将node指定在docker中运行</li></ul></li></ul></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">container</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span><span class="token number">16</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> action/checkout@v1     <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          node -v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自己发布的镜像:<code>docker://&#123;host&#125;/&#123;image&#125;:&#123;tag&#125;</code></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>//node<span class="token punctuation">:</span>alpine        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">args</span><span class="token punctuation">:</span> npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>with</code>:有的 Action可能会需要我们传入一些特定的值：比如上面的 node 版本啊之类的,这些需要我们传入的参数由 with 关键字来引入</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">with</span><span class="token punctuation">:</span>  <span class="token key atrule">node-version</span><span class="token punctuation">:</span> 16.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>run</code>:可以运行操作系统中原有的shell命令</p></blockquote><ul><li>单行命令:</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies  <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多行命令</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Clean install dependencies and build  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    npm ci    npm run build</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>指定运行的工作目录</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">run</span><span class="token punctuation">:</span> npm install<span class="token key atrule">working-directory</span><span class="token punctuation">:</span> ./temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>shell</code>:指定终端运行脚本命令(run)</p></blockquote><ul><li>可以是<code>bash</code>,<code>cmd</code>,<code>python</code>等看具体需求和操作系统</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><blockquote><p>部署hexo到服务器</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install nodejs        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3.0.0        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install pkg        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install          npm install hexo-cli -g</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build app        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> scp action        <span class="token key atrule">uses</span><span class="token punctuation">:</span> betanzos/scp<span class="token punctuation">-</span>upload@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token string">"public/"</span>          <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HOST <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SSH_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">remote_dir</span><span class="token punctuation">:</span> <span class="token string">"/www"</span>          <span class="token key atrule">recursive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中最要注意的点是ssh密钥的问题<ol><li>在本地生成密钥后,将公钥放入远程服务器的root下的<code>.ssh</code>文件夹自己生成的<code>authorized_keys</code>文件中</li><li>需要将私钥上传到secrets中,然后使用环境变量取得</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;github Action是github提供的持续集成的操作,可以抓取代码,运行测试,登录远程服务器,发布到第三方服务器等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建一个工作流程&quot;&gt;&lt;a href=&quot;#创建一个工作流程&quot; class</summary>
      
    
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/categories/git/"/>
    
    
    <category term="git" scheme="http://mail.zyjcould.ltd/tags/git/"/>
    
  </entry>
  
</feed>
