<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git回滚与撤销</title>
      <link href="/2022/04/30/git-hui-gun-yu-che-xiao/"/>
      <url>/2022/04/30/git-hui-gun-yu-che-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ol><li><p>存在工作目录.代码并没有提交到暂存区(没有进行<code>git add</code>操作).在工作树中修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要撤销的文件或者 .(当前目录)</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>filname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>代码提交到暂存区(进行了<code>git add</code>),但是想要撤销提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要从暂存区撤销的提交</span><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>filename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>代码已经提交(<code>git commit</code>)</p><ul><li>已经进行多次提交,但是在最后一次修改后,不再产生新的提交</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注释名为最后一次的</span><span class="token function">git</span> commit --amend -m <span class="token string">"最后一次的注释"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><blockquote><p>如果想撤销到其中某次commit</p></blockquote><ul><li>这些操作分别是对<strong>工作目录</strong>,<strong>暂存区</strong>,<strong>当前HEAD</strong>的位置的改变</li><li><code>git reset [--hard|soft|mixed|merge|keep] [commit|HEAD]</code><ol><li><code>--hard</code>:重设当前<code>HEAD</code>位置.并将之前commit以来的<strong>工作区目录</strong>和<strong>暂存区</strong>的改变都丢弃<ul><li>彻底回退到某一个版本.本地所欲的源码也会变为上一个版本的内容</li><li>例如<code>git reset --hard HEAD~1</code>:将代码回退到前一次提交,并且将之前的所有改变丢弃</li></ul></li><li><code>--soft</code>:只重设当前<code>HEAD</code>位置.所有更改的文件会回到<strong>工作区目录</strong>和<strong>暂存区</strong><ul><li><code>git status</code>可以查看回退的状态.只是回退了提交的信息,不会回退提交的内容.</li></ul></li><li><code>--mixed</code>:重设当前<code>HEAD</code>位置和<strong>暂存区</strong>位置.但是不会重设<strong>工作区</strong>的内容<ul><li><code>git status</code>:查看回退的状态.已经回退到初始状态(没有使用<code>git add</code>之前)</li><li>例如<code>git reset --mixed HEAD~1</code>:将代码回退到上一次提交.提交内容保留在工作区</li></ul></li></ol></li></ul><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><blockquote><p>如果已经使用<code>git push</code>,推送到远程仓库中.对已经提交到远程仓库的还原操作叫回滚</p></blockquote><ol><li>撤销本地仓库的提交<ul><li><code>revert</code>:放弃指定提交的修改,会生成一次新的提交,并且以前的历史记录都在<ul><li>例如:<code>git revert HEAD~1</code>.将代码回滚到上一次的提交,但是不会销毁之前提交,并且生成一个新的提交</li></ul></li><li><code>reset</code>:是指将HEAD指针指到指定提交,历史记录中不会出现放弃的提交记录(会销毁之前的提交)</li></ul></li><li>对远程仓库的提交进行回滚(撤销远程仓库的提交)<ul><li>需要强制将本地回退的代码推到远程仓库,进行回滚操作</li><li><code>git push origin 本地分支 --force-with-lease</code></li><li><code>--force-with-lease</code>并不会像<code>--force</code>强制将代码覆盖<ul><li>如果远端有其他人推送了新的提交,那么推送将被拒绝,并且和<code>--force</code>参数时的拒绝是一样的</li><li>如果远端没有其他人推送,会直接进行强制推送(<strong>回滚</strong>)</li></ul></li></ul></li></ol><blockquote><p>如果没有其他人推送提交时</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD~1<span class="token function">git</span> push origin 本地分支 --force-with-lease<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>当遇到其他人推送新的提交时(产生冲突),需要使用<code>git fetch</code></p></blockquote><ul><li>在<code>git fetch</code>之后需要合并fetch下的分支.需要考虑使用<code>rebase</code>和<code>merge</code>情况<ul><li><code>rebase</code>会将分支合并到一个分支,不会保留被合并分支的提交记录.保证主分支的纯粹<ul><li><img src="./rebase.png" alt=" "></li></ul></li><li><code>merge</code>会将分支合并到一个分支,会保留被合并分支的提交记录<ul><li><img src="./merge.png" alt=" "></li></ul></li></ul></li><li>在开发中尽量选择rebase合并分支,来保证主分支的清晰</li><li>继续推送以达到回滚的效果</li></ul><h3 id="merge和rebase"><a href="#merge和rebase" class="headerlink" title="merge和rebase"></a>merge和rebase</h3><ul><li><code>rebase</code>:下游分支更新上游分支内容的时候使用</li><li><code>merge</code>:上游分支合并下游分支内容的时候使用</li><li><code>git pull origin dev --rebase</code>更新当前分支的内容时一定要使用<code>--rebase</code>参数</li></ul><blockquote><p>例如现有上游分支<code>master</code>,基于<code>master</code>分支拉出来一个开发分支<code>dev</code>,在<code>dev</code>上开发了一段时间后要把<code>master</code>分支提交的新内容更新到 <code>dev</code>分支</p><p>此时切换到<code>dev</code>分支,使用<code>git rebase master</code>等<code>dev</code>分支开发完成了之后,要合并到上游分支<code>master</code>上的时候,切换到<code>master</code>分支,使用<code>git merge dev</code></p></blockquote><h3 id="撤销回退"><a href="#撤销回退" class="headerlink" title="撤销回退"></a>撤销回退</h3><p><img src="./resetback.png" alt=" "></p><blockquote><p>如果在回退的时候回退过了怎么办</p></blockquote><ol><li><p>使用<code>git reflog</code>找到当前的提交记录的<code>commit</code>值(hash值)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bf75e3e <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> dev, upstream/master, origin/test, origin/master, origin/dev, origin/HEAD<span class="token punctuation">)</span> HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>: reset: moving to HEAD~1e87c01a HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span>: reset: moving to HEAD~4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>git checkout bf75e3e</code>.检出需要撤销到某一版本的提交</p></li><li><p><code>git branch mer</code>为需要找回的版本创建新分支</p></li><li><p><code>git branch dev</code>&amp;&amp;<code>git rebase mer</code>切换分支并且合并分支</p></li><li><p><code>git push origin dev --force-with-lease</code>.强制推送到远程仓库,完成撤销的回退</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rollup</title>
      <link href="/2022/04/23/rollup/"/>
      <url>/2022/04/23/rollup/</url>
      
        <content type="html"><![CDATA[<h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><ul><li><code>-c == --config &lt;filname&gt;</code>,指定<code>rollup.config.js</code>配置文件</li><li><code>-i == --input &lt;dirname&gt;</code>:入口文件</li><li><code>-o == --file &lt;output&gt;</code>:单个输出文件</li><li><code>-f == --format &lt;format&gt;</code>:打包风格<ul><li>amd, cjs, es, iife, umd, system</li></ul></li><li><code>-d == --dir &lt;dirname&gt;</code>:将输出文件块打包到目录</li><li><code>-w == --watch</code>:执行监听</li><li><code>--environment &lt;values&gt;</code>:设置环境变量<ul><li><code>--envirment TEST:123</code>可以通过<code>process.env.TEST</code>来获取变量的值</li></ul></li><li><code>-p == --plugin &lt;plugin&gt;</code>:使用插件<ul><li>如果在项目中使用rollup,不使用全局的rollup命令.需要使用npx:<code>npx rollup -c rollup.config.js</code></li></ul></li></ul><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a><a href="https://rollupjs.org/guide/en/#configuration-files">配置项</a></h2><ul><li>如果想要不同的配置文件,可以使用一个数组,在数组中配置各个对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>input<span class="token operator">:</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>input<span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>input:指定打包文件的入口</li><li>output:指定输出文件的出口</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  input<span class="token operator">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//直接指定输出的文件夹</span>    file<span class="token operator">:</span> <span class="token string">"./dist/bundle.js"</span><span class="token punctuation">,</span>    format<span class="token operator">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span><span class="token string">"bundle"</span><span class="token punctuation">,</span>    banner<span class="token operator">:</span><span class="token string">"/* hello */"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>name:示bundles(捆绑包)的全局变量名称.例如<code>iife</code>,<code>umd</code>是必要的.同一页面上的其他脚本可以使用此变量名称来访问捆绑包的导出</p></li><li><p>banner:打包文件在最上行的介绍</p></li><li><p><code>output:[&#123;&#125;,&#123;&#125;...]</code>,<code>input</code>也可以写成数组的形式</p></li></ul><blockquote><p>多入口打包:input写成数组的形式</p></blockquote><ul><li>input可以写成数组的形式也可以写成对象的形式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./index.js"</span><span class="token punctuation">,</span> <span class="token string">"./test.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    dir<span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    format<span class="token operator">:</span> <span class="token string">"cjs"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>plugins:使用插件.例如<code>@rollup/plugin-json</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>rollup的插件是按照数组的加载顺序加载的</li><li>对于希望将依赖打包进自己的项目时,需要使用<code>@rollup/plugin-node-resolve</code>插件.并且最好放在第一个位置<ul><li>如果打包的依赖是只支持es项目,那么会和<code>@rollup/plugin-node-resolve</code>产生冲突.这时候最好需要下载<code>@rollup/plugin-commonjs</code></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>externals</code>:如果不想要将某个依赖打包进某个项目中,可以使用<code>externals</code></p><ul><li>可以是一个对象或者是数组.如果是数组,<code>[&quot;react&quot;]</code>默认的名字是<code>[&quot;React&quot;]</code>.如果不是这样命名的内库,可以使用对象的形式<code>&#123;&quot;react&quot;:&quot;React&quot;&#125;</code></li></ul></li><li><p><code>output</code>中的plugins.在编译之后启动,而不是编译之前.一般用于压缩代码.</p><ul><li>例如:<code>rollup-plugin-terser</code></li></ul></li></ul><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a><a href="https://github.com/rollup/plugins/tree/master/packages/alias">alias</a></h3><blockquote><p>用于别名的映射</p></blockquote><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a><a href="https://github.com/rollup/plugins/tree/master/packages/babel">babel</a></h3><blockquote><p>用于打包项目</p></blockquote><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a><a href="https://github.com/rollup/plugins/tree/master/packages/replace">replace</a></h3><blockquote><p>打包时变量替换(只能是数字或者字符串)</p></blockquote><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a><a href="https://github.com/rollup/plugins/tree/master/packages/typescript">typescript</a></h3><ul><li>使用typescript:<code>npm install @rollup/plugin-typescript tslib typescript --save-dev</code></li></ul><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a><a href="https://github.com/rollup/plugins/tree/master/packages/eslint">eslint</a></h3><ul><li>使用eslint:<code>yarn add -D @rollup/plugin-eslint eslint</code></li><li>eslint的一些插件<ul><li>eslint-config-standard</li><li>eslint-plugin-import</li><li>eslint-plugin-promise</li><li>eslint-plugin-node</li></ul></li></ul><h3 id="image"><a href="#image" class="headerlink" title="image"></a><a href="https://github.com/rollup/plugins/tree/master/packages/image">image</a></h3><ul><li>显示图像的 Base64 编码表示形式</li><li>静态文件可以使用:<code>rollup-plugin-copy</code></li></ul><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a><a href="https://github.com/rollup/plugins/tree/master/packages/strip">strip</a></h3><ul><li>打包时删除类似<code>debugger</code>,<code>assert.equal</code>和<code>console.log</code>函数的语句和函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLIP</title>
      <link href="/2022/04/19/flip/"/>
      <url>/2022/04/19/flip/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p><code>Element.getBoundingClientRect()</code>:返回元素的大小及其<strong>相对于视口</strong>的位置</p></blockquote><ul><li><p>如果是标准盒子模型,元素的尺寸等于<code>width/height + padding + border-width</code>的总和.如果<code>box-sizing: border-box</code>,元素的的尺寸等于<code>width/height</code>.</p></li><li><p><code>DOMRect</code>:返回一个DOMRect对象.(DOMRect)代表一个矩形,表示盒子的类型右返回它的属性和方法决定</p></li><li><p><img src="././rect.png" alt=" "></p></li><li><p><strong>原点</strong>:当前视口的左上角(0,0)</p><ul><li><code>x</code>:矩形盒子的左边框(border)距离视口的左边的距离(可能为负数:当视口在盒子右边的时候)</li><li><code>y</code>:矩形盒子的上边框距离视口上边的距离(可能为负数:当漱口在盒子下边的时候)</li><li><code>height</code>:矩形盒子的高度</li><li><code>width</code>:矩形盒子的宽度</li><li><code>left</code>:视口到矩形盒子左边框的距离</li><li><code>right</code>:视口到矩形盒子有边框的距离</li><li><code>top</code>:视口到矩形盒子上边框的距离</li><li><code>bottom</code>:视口到矩形盒子下边框的距离</li></ul></li></ul><blockquote><p><code>Element.getClientRects()</code>:方法返回一个指向客户端中每一个盒子的边界矩形的矩形集合</p></blockquote><ul><li>返回<code>ClientRectList</code>:这是一个DOMRect的集合对象,属性和<code>getBoundingClientRect()</code>返回的方法一样<ul><li>如果是块级元素,只会返回一个数组,数组的内容和<code>getBoundingClientRect</code>一样</li><li>实际上,该方法主要用于内联元素,内联元素有多少行,该方法返回的对象有多少个成员.这个方法主要用于判断<strong>行内元素</strong>是否换行,以及<strong>行内元素</strong>的每一行的位置偏移</li></ul></li></ul><blockquote><p><code>DocumentOrShadowRoot.elementFromPoint(x: number, y: number): Element</code>:方法返回给定坐标点下最上层的<code>element</code>元素</p></blockquote><ul><li><p><strong>DocumentOrShadowRoot</strong>为<code>document</code>或者<code>shadowRoot</code>的接口</p></li><li><p>如果指定的坐标点在文档的可视范围外,或者两个坐标都是负数,那么结果返回null</p></li><li><p>如果该位置有多个元素层叠,则返回最上层的元素</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest</title>
      <link href="/2022/04/16/jest/"/>
      <url>/2022/04/16/jest/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化一个test项目"><a href="#初始化一个test项目" class="headerlink" title="初始化一个test项目"></a>初始化一个test项目</h2><ol><li><code>npm i jest -D</code>:下载jest测试框架</li><li><code>npx jest --init</code>.初始化一个jest测试文件<ul><li>测试文件可以是ts或者js结尾的<code>jest.config.(js|ts)</code></li></ul></li><li>在<code>package.json</code>的脚本中写入<code>&quot;test&quot;:&quot;jest&quot;</code>配置<ul><li>jest是test本项目中的所有目录的测试文件</li></ul></li></ol><blockquote><p>进行一个commonjs模块的测试</p></blockquote><ol><li><p><code>math.js</code>文件中写入如下待测试代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> minus<span class="token punctuation">,</span> multi <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>math.test.js</code>导入测试代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> minus<span class="token punctuation">,</span> multi <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试加法 3 + 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试减法 3 - 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试乘法 3 * 3"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行<code>npm run test</code>可以看到终端有成功运行的样式</p></li></ol><h2 id="jest-config"><a href="#jest-config" class="headerlink" title="jest config"></a>jest config</h2><ol><li><p>jest可以直接使用命令行参数<code>--config &lt;path/to/file.js|cjs|mjs|json&gt;</code></p></li><li><p>jest可以直接在<code>package.json</code>中配置文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>直接使用<code>jest.config.(js|ts)</code>文件,在文件中配置</p></li></ol><blockquote><p>有如下的选项</p></blockquote><ul><li><p><code>automock</code>:<code>bool</code>默认值false.将所有的导入模块都自动mock</p><ul><li>但是当源文件下有<strong>mocks目录</strong>时,会自动mock.核心模块,如fs不会默认fock,需要手动设置<code>jest.mobk(&quot;fs&quot;)</code></li></ul></li><li><p><code>bail</code>:<code>number|bppl</code>.默认值是0.bail选项可以让你配置jest在经历几次失败后停止运行测试</p></li><li><p><code>browser</code>:<code>bool</code>默认值false.解析模块中是否遵循<code>package.json</code>中的<code>browser</code>字段</p><ul><li>有些模块导出的版本会不一样,取决于是在<strong>Node</strong>中还是<strong>浏览器</strong>中进行操作</li></ul></li><li><p><code>cacheDirectory</code>:<code>string</code>.默认值**&#x2F;tmp&#x2F;&lt;path&gt;**.用来储存依赖信息缓存目录</p></li><li><p><code>clearMocks</code>:<code>bool</code>.<strong>默认值false</strong>.在每个而是前自动清理mock的调用和实例instance</p><ul><li>相当于在每一个test之前调用<code>jest.clearAllMocks</code>,但不会删除已经有的mock实现</li></ul></li><li><p><code>collectCoverage</code>: <code>bool</code><strong>默认值false</strong>.是否打开代码覆盖率信息</p></li><li><p><code>collectCoverageFrom</code>:<code>array</code>.<strong>默认值undefined</strong>.表明哪些文件需要收集.如果文件匹配就会手机作为<code>coverage</code>的基数</p><ul><li>收集根目录下所有的js,jsx文件,同时排除node_modules下的所有文件</li><li>并且此参数需要<code>collectCoverage</code>被设置成true</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">collectCoverageFrom<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"**/*.&#123;js,jsx&#125;"</span><span class="token punctuation">,</span><span class="token string">"!**/node_modules/**"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>coverageDirectory</code>:<code>string</code>.<strong>默认值undefined</strong>,输出覆盖信息文件的目录名称</p></li><li><p><code>coveragePathIgnorePatterns</code>:<code>[array&lt;string&gt;]</code>.<strong>默认值[node_modules]</strong>.排除出coverage的文件列表.</p></li><li><p><code>coverageProvider</code>:<code>string</code>.有两个选项,<code>v8</code>或者是<code>babel</code>.声明到底用哪个provider来用于指导代码的覆盖测试</p></li><li><p><code>coverageThreshold</code>:<code>object</code>.<strong>默认值undefined</strong>.该阈值作为覆盖最小阈值来设置.</p><ul><li>可以被设置为<code>global</code>,或者是目录及文件路径</li><li>如果没有达到阈值,则jest失败,如果给了一个正数,就表示最小的百分比值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">coverageThreshold<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    global<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"branches"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"functions"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"lines"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      <span class="token string">"statements"</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>dependencyExtractor</code>:<code>string</code>.<strong>默认值undefined</strong>.允许等地依赖提取器的使用,必须满足是一个node modules,同时导出的object中包含<code>extract</code>函数</p></li><li><p><code>displayName</code>:<code>string | object</code>.<strong>默认值undefined</strong>.允许在测试的时候打印显示标签.这里有多个repo和多个jest配置文件的时候很好用</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//string</span>displayName<span class="token operator">:</span> <span class="token string">'CLIENT'</span><span class="token comment">//object</span>displayName<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'CLIENT'</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>errorOnDeprecated</code>:<code>bool</code>.<strong>默认值false</strong>.针对国企的API抛出提示性的错误</p></li><li><p><code>extensionsToTreatAsEsm</code>:<code>Array&lt;string&gt;.</code><strong>默认值[]</strong>.将mjs字段视作esm模块.</p><ul><li>如果有其他文件使用ESM运行,需要在此处指定其文件的扩展名称</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">extensionsToTreatAsEsm<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>extraGlobals</code>:<code>array&lt;string&gt;</code><strong>默认值undefined</strong>.测试文件在<a href="https://nodejs.org/api/vm.html">vm</a>中运行,会减慢全局上下文的属性的调用速度</p></li><li><p><code>forceCoverageMatch</code>:<code>array&lt;string&gt;</code>.在收集代码覆盖率的时候,通常会忽略测试文件.使用此选项,可以在coverage包含被忽略的文件</p></li><li><p><code>globals</code>:<code>object</code>.<strong>默认值{}</strong>.全局变量,需要在所有的测试环境中都可以使用</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">globals<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token string">"__DEV__"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>rootDir</code>:<code>string</code>.默认值<strong>jest配置文件的根目录</strong>.如果未找到则为<code>pwd</code></p><ul><li>通常可以设置为<code>src</code>或者<code>lib</code>为根目录,对应于代码在存储库中的存储位置</li></ul></li><li><p><code>roots</code>:<code>array&lt;string&gt;</code>.<strong>默认值[“<rootDir>“]</strong>.Jest 应用于在其中搜索文件的目录路径列表</p><ul><li>根据<code>rootDir</code>决定根目录所在的位置</li></ul></li><li><p><code>moduleFileExtensions</code>:<code>array&lt;string&gt;</code>.<strong>默认值[“js”, “jsx”, “ts”, “tsx”, “json”, “node”]</strong></p><ul><li>模块使用的文件扩展数组.如果未指定文件扩展名的模块,则这些事jest将俺从左到有顺序查找的扩展名.建议将常用的扩展名放置左侧</li></ul></li><li><p><code>moduleNameMapper</code>:<code>object&lt;string,string | array&lt;string&gt;&gt;</code>.正则表达式到模块名称或模块名称数组的映射(设置别名)</p></li><li><p><code>modulePathIgnorePatterns</code>:<code>object&lt;string&gt;</code>.<strong>默认值[]</strong>.定模块的路径与任何模式匹配,则它在测试环境中将不可用</p><ul><li>一个正则表达式模式字符串数组,这些字符串与所有模块路径匹配,然后这些路径将被视为对模块加载程序<strong>可见</strong></li><li>这些模式字符串与完整路径匹配<code>[&quot;&lt;rootDir&gt;/build/&quot;]</code></li></ul></li><li><p><code>transform</code>:<code>[object&lt;string, pathToTransformer | [pathToTransformer, object]&gt;]</code>.默认值<code>&#123;&quot;\\.[jt]sx?$&quot;: &quot;babel-jest&quot;&#125;</code></p><ul><li>从正则表达式到转换器路径的映射.这些编译器将<code>JavaScript</code>的未来版本编译为当前版本,或者可以配合ts,webpack使用</li></ul></li><li><p><code>transformIgnorePatterns</code>:<code>array&lt;string&gt;</code>.文件路径与任何模式匹配的时候,忽略这些匹配的文件</p><ul><li><strong>默认值:[“&#x2F;node_modules&#x2F;“, “\.pnp\.[^\/]+$”]</strong></li></ul></li></ul><h2 id="jest中es-ts的配置项"><a href="#jest中es-ts的配置项" class="headerlink" title="jest中es,ts的配置项"></a>jest中es,ts的配置项</h2><blockquote><p><code>npx jest --coverage</code>代码覆盖率</p></blockquote><ul><li>代码覆盖率会在控制台显示一个图表信息.并且有一个默认叫做<code>coverage</code>的文件夹.文件夹中的html文件就是对覆盖率的阐述</li><li>覆盖率就是编写的测试代码对原来的功能代码的占比,全部test,则为100%</li><li><span style="color:red">在配置文件中,初始化的时可以开启代码覆盖率的选项</span>,而不必使用cli的时候添加<code>--coverage</code><ol><li><code>collectCoverage: true</code>:是否打开代码覆盖率</li><li><code>coverageDirectory: &quot;coverage&quot;</code>:代码覆盖率生成的文件目录名称.可以自定义</li><li><code>coverageProvider: &quot;v8&quot;</code>:有两个选项,<code>v8</code>或者是<code>babel</code>.声明到底用哪个provider来用于指导代码的覆盖测试</li></ol></li></ul><blockquote><p><a href="https://jestjs.io/docs/ecmascript-modules">配置esm模块进行测试</a></p></blockquote><ol><li><p>首先需要在<code>package.json</code>中加入<code>&quot;type&quot;:modules</code>.不需要改<code>.js</code>为<code>.mjs</code></p></li><li><p>对于<code>jest.config.js</code>文件,不能使用默认的<code>module.exports</code>导出</p><ul><li>需要使用esm的方式导出配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行需要使用<code>NODE_OPTIONS=--experimental-vm-modules</code>这种形式设置环境变量</p><ul><li>在脚本中配置此环境变量并没有成功</li><li>这里我是直接使用<code>NODE_OPTIONS=--experimental-vm-modules npx jest</code>命令来运行此测试</li></ul></li></ol><blockquote><p>如果是ts项目,建议直接使用vitest直接进行TDD开发</p></blockquote><ul><li>vitest基于vite开发,完全适用于<code>vite.config.ts</code>配置</li><li>下载<code>npm i vitest -D</code></li></ul><ol><li><p>基于<code>vite.config.ts</code>配置vitest</p><ul><li>如果你使用<code>vite</code>的<code>defineConfig</code>你还需要将三斜线指令写在配置文件的顶部</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;&#x2F; &lt;reference types&#x3D;&quot;vitest&quot; &#x2F;&gt;import &#123; defineConfig &#125; from &#39;vite&#39;export default defineConfig(&#123;  test: &#123;    &#x2F;&#x2F; ...  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于<code>vitest.config.ts</code>配置vitest.</p><ul><li>此优先级高于<code>vite.config.ts</code>,可以直接使用vitest中的<code>defineConfig</code>配置</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineConfig &#125; from &#39;vitest&#x2F;config&#39;export default defineConfig(&#123;  test: &#123;    &#x2F;&#x2F; ...  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排除默认选项,自己配置测试的选项</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; configDefaults, defineConfig &#125; from &#39;vitest&#x2F;config&#39;export default defineConfig(&#123;  test: &#123;    exclude: [...configDefaults.exclude, &#39;packages&#x2F;template&#x2F;*&#39;],  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm中的bin</title>
      <link href="/2022/04/16/npm-zhong-de-bin/"/>
      <url>/2022/04/16/npm-zhong-de-bin/</url>
      
        <content type="html"><![CDATA[<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><blockquote><p>bin文件是一个二进制的脚本文件</p></blockquote><ul><li><p>一般文件内会有以下的字样等等,这就是平时运行的脚本文件的解释程序(<code>Shebang</code>)</p><ul><li><code>#!/usr/bin/env node</code>这段话的意思就是启用node进行脚本的解释程序</li><li><code>#!/bin/sh</code>:使用sh进行脚本的执行程序</li><li>并且在windows中同样可以使用(windows会忽略shengban,会根据程序的脚本名来指定运行的解释程序)</li></ul></li><li><p>可以查看一下typescript中的脚本配置</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"./bin/tsc"</span><span class="token punctuation">,</span>    <span class="token property">"tsserver"</span><span class="token operator">:</span> <span class="token string">"./bin/tsserver"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p>创建一个node的项目并且创建一个bin目录(用于存放脚本文件)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── bin│   └── vli.js├── index.js└── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>package.json</code>配置bin字段,用于打包生成脚本命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"v-vli"</span><span class="token operator">:</span><span class="token string">"./bin/vli.js"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在脚本文件中写入需要的命令<code>vli.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token keyword">function</span> <span class="token function">run</span> <span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'-v'</span> <span class="token operator">||</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'--version'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  version is 0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'-h'</span> <span class="token operator">||</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'--help'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  usage:\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  -v --version [show version]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打成全局包才可以使用该命令,打成全局包的命令<code>npm install . -g</code>或者<code>npm link</code></p></li><li><p>使用<code>v-cli -v</code>就可以查看输出的脚本命令了</p></li></ol><h2 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h2><blockquote><p><code>npm link</code>将npm模块链接到对应的运行项目中去,方便地对模块进行调试和测试</p></blockquote><ol><li>如果他是一个<code>bin</code>(二进制文件):他会被链接到全局的<code>&#123;prefix&#125;/bin</code>目录(node的全局目录)下,生成一个脚本文件,供全局使用</li><li>如果他是一个<code>lib</code>(库文件),他会被连接到<code>&#123;prefix&#125;/lib/node_modules/&lt;package&gt;</code>(node的全局目录),生成一个链接文件</li><li>一个文件项目中可能包含多个bin文件,一般通常只有一个lib文件</li></ol><ul><li>通过<code>npm config get prefix</code>命令获取到prefix的值</li></ul><blockquote><p><code>npm unlink &lt;package&gt;</code>:解除链接</p></blockquote><ol><li>如果是bin文件,解除的是bin配置的脚本名称,而不是项目的包名<ul><li>例如上面的脚本<code>npm unlink v-vli</code>.将全局的<code>v-vli</code>脚本移除</li></ul></li><li>如果是<code>lib</code>文件,他本质就是一个软链接,直接移除项目的包名<ul><li><code>npm unlink &lt;package&gt;</code>:将lib下的全局链接移除</li></ul></li></ol><blockquote><p>例子:例如需要开发一个module模块,并且在本地example项目中需要使用module包</p></blockquote><ol><li>在<code>module</code>中使用<code>npm link</code>被链接到全局的lib目录下</li><li>在<code>example</code>项目中使用<code>npm link module</code>后,此项目会软链接到<code>example/node_modules</code></li><li>这种软链接的形式,在module的修改同样会同步到<code>example/modules</code>中的软链接部分</li></ol>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布npm</title>
      <link href="/2022/04/15/fa-bu-npm/"/>
      <url>/2022/04/15/fa-bu-npm/</url>
      
        <content type="html"><![CDATA[<h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><ol><li><p>首先需要登录自己的npm账号<code>npm login</code></p></li><li><p>初始化一个项目<code>npm init</code></p><ul><li>最重要的两个字段<code>name</code>和<code>version</code></li></ul><blockquote><p><code>name</code></p></blockquote><ul><li>不要在name中包含js,node字样</li><li>这个名字最终会是URL的一部分,命令行的参数,目录名,所以不能以点号或下划线开头</li><li>这个名字可能在require()方法中被调用,所以应该尽可能短</li><li>并且包的名字不能与npm中的其他包的名字一致</li></ul><blockquote><p><code>version</code>:版本号.版本号基本是由三位数字组成</p></blockquote><ul><li><code>MAJOR</code>:进行不兼容的API更改时的版本</li><li><code>MINOR</code>:以向后兼容的方式添加功能时的版本</li><li><code>PATCH</code>:向后兼容的错误修复程序的版本</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token number">1</span>   .   <span class="token number">0</span>   .   <span class="token number">0</span><span class="token punctuation">[</span>MAJOR<span class="token punctuation">]</span>.<span class="token punctuation">[</span>MINOR<span class="token punctuation">]</span>.<span class="token punctuation">[</span>PATCH<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&lt;</span>newversion<span class="token operator">></span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token punctuation">[</span>--preid-<span class="token operator">&lt;</span>prerelease-id<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">|</span> from-git<span class="token punctuation">]</span><span class="token string">'npm [-v | --version]'</span> to print <span class="token function">npm</span> version<span class="token string">'npm view &lt;pkg> version'</span> to view a package<span class="token string">'s published version'</span><span class="token function">npm</span> ls' to inspect current package/dependency versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>major</td><td>重大更新版本</td><td>npm version major</td><td>0.2.0 -&gt;1.0.0</td></tr><tr><td>minor</td><td>主要更新版本</td><td>npm version minor</td><td>0.2.0 -&gt;0.3.0</td></tr><tr><td>patch</td><td>补丁更新版本</td><td>npm version patch</td><td>0.2.0 -&gt;0.2.1</td></tr><tr><td>premajor</td><td>重大更新预发布版本</td><td>npm version premajor</td><td>0.2.0 -&gt;1.0.0-0</td></tr><tr><td>preminor</td><td>主要更新预发布版本</td><td>npm version preminor</td><td>0.2.0 -&gt;0.3.0-0</td></tr><tr><td>prepatch</td><td>补丁更新预发布版本</td><td>npm version prepatch</td><td>0.2.0 -&gt;0.2.1-0</td></tr><tr><td>prerelease</td><td>预发布版本</td><td>npm version prerelease</td><td>当前版本不是预发布版本的会出错</td></tr><tr><td>from-git</td><td>取git的tag作为版本号设置至<code>package.json</code></td><td>npm version from-git</td><td>git的tag标签没有设置的情况下,会抛出错误</td></tr></tbody></table><blockquote><p><code>description</code>:对包进行描述,便于<code>npm search</code></p><p><code>repository</code>:本项目中代码的源地址位置</p></blockquote><ol><li><p>可以分层写出项目地址</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/npm/cli.git"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时可以指定仓库名的形式</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"npm/npm"</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"github:user/repo"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><code>keywords</code>:将关键字放入其中.它是一个字符串数组.便于使用<code>npm search</code></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"test"</span><span class="token punctuation">,</span>   <span class="token string">"npm"</span><span class="token punctuation">,</span>   <span class="token string">"app"</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>homepage</code>:项目的主页.用于展示项目</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/owner/project#readme"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>main</code>:程序的主要入口点.一般用于require的引入</p></blockquote><ul><li>也就是说,如果您的包被命名为foo,并且用户安装了它,然后会执行<code>require(&quot;foo&quot;)</code>,则将返回主模块的exports 对象</li></ul><blockquote><p><code>module</code>:一般是esm模块的入口点,用于import的引入</p></blockquote><ul><li>如果包module被命名为foo,用户安装之后,然后执行<code>import...from &quot;foo&quot;</code>,会返回主模块</li></ul><blockquote><p><code>author</code>:作者信息</p></blockquote><ol><li><p>每个字段的形式分开展现</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Barney Rubble"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span> <span class="token operator">:</span> <span class="token string">"b@rubble.com"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span> <span class="token operator">:</span> <span class="token string">"http://barnyrubble.tumblr.com/"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以<code>author</code>合并展示</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Barney Rubble &lt;b@rubble.com> (http://barnyrubble.tumblr.com/)"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><code>license</code>:许可证.让人知道使用的权利和限制的</p></blockquote><ul><li><a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository">参考github</a></li></ul></li></ol><h3 id="发布javascript版本的包"><a href="#发布javascript版本的包" class="headerlink" title="发布javascript版本的包"></a>发布javascript版本的包</h3><ol><li><p><code>name</code>:字段必须是仓库拥有者的名称,即<code>npm login</code>的名称</p><ul><li>由于作用域内包安装到作用域文件夹中,因此在代码中需要作用域时,必须包含作用域的名称</li><li>每个 npm 用户&#x2F;组织都有自己的作用域,只有你可以在作用域中添加包</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@myorg/mypackage'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>npm publish</code>:npm中发布<strong>公共的作用域包</strong>需要使用<code>npm publish --access=public</code>(私有是收费的)</p></li><li><p><code>npm unpublish 包名</code>:即可将 npm 上的包删除</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> publish <span class="token punctuation">[</span><span class="token operator">&lt;</span>tarball<span class="token operator">>|</span><span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--tag <span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--access <span class="token operator">&lt;</span>public<span class="token operator">|</span>restricted<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--otp otpcode<span class="token punctuation">]</span> <span class="token punctuation">[</span>--dry-run<span class="token punctuation">]</span>Publishes <span class="token string">'.'</span> <span class="token keyword">if</span> no argument suppliedSets tag <span class="token string">'latest'</span> <span class="token keyword">if</span> no --tag specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;folder&gt;</code>:包含<code>package.json</code>文件的文件夹</li><li><code>&lt;tarball&gt;</code>:指向gzip压缩tar存档的url或文件路径,其中包含一个包含package.json文件的文件夹.</li><li><code>[--tag &lt;tag&gt;]</code>:使用给定标记注册已发布的包,以便安装此版本.默认情况下,更新并安装标记(参考<code>npm-dist-tag</code>)</li><li><code>[--access &lt;public|restricted&gt;]</code>:告知注册表此包是应发布为公共包还是受限制程序包.仅适用于作用域内包,缺省为<code>restricted --access</code>.如果没有付费帐户,则必须发布<code>public</code>方式才能发布作用域内的程序包.</li><li><code>[--otp &lt;otpcode&gt;]</code>:启用了双因素身份验证,则可以使用此代码提供来自身份验证器的代码.否则系统将提示<code>auth-and-writes</code></li><li><code>[--dry-run]</code>:截至npm@6,除了实际发布到注册表之外,是否所有发布都会执行.报告将要发布的内容的详细信息.</li><li><code>[--workspaces]</code>:在发布时启用工作区上下文.将发布所有工作区包.</li><li><code>[--workspace]</code>:启用工作区上下文,并将结果限制为此配置项指定的结果.将仅发布给定工作区中的包.</li></ul><blockquote><p>发布一个公共的包,不包含私有作用域</p></blockquote><ol><li>设置npm的proxy代理<code>npm config set proxy=&quot;代理地址(如127.0.0.1:7890)&quot;</code></li><li>检查自己的包名,不能与其他人的包名一样</li><li>使用<code>npm publish</code>发布自己的包</li></ol><h3 id="打包typescript版本的包"><a href="#打包typescript版本的包" class="headerlink" title="打包typescript版本的包"></a>打包typescript版本的包</h3><ol><li>下载<code>npm install typescript -D</code></li><li>初始化一个<code>tsconfig.json</code>文件<code>tsc --init</code></li><li>在scripts中添加脚本:<code>npx tsc -p .</code>.打包当前目录下的所有文件</li></ol><blockquote><p>一些typescript中特有的配置</p></blockquote><ol><li><p><code>package.json</code>中的<code>types</code>字段</p><ul><li>这是一个只在TypeScript中生效的字段,如果您的包有一个main.js文件,您还需要在<code>package.json</code>文件中指明主声明文件.将types属性设置为指向捆绑(bundled指main.js)的声明文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"./lib/main.d.ts"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>package.json</code>中的<code>typesVersions</code>字段</p><ul><li>控制typescript的版本号</li></ul> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"typesVersions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">">=3.1"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ts3.1/*"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>.d.ts</code>文件中的<code>/// &lt;reference types=&quot;...&quot; /&gt;</code></p><ul><li>当前库依赖于全局库,会导入全局库的<code>.d.ts</code>的名称</li><li>在声明文件里包含<code>/// &lt;reference types=&quot;node&quot; /&gt;</code>，表明这个文件使用了<code>@types/node/index.d.ts</code>里面声明的名字.并且,这个包要在编译阶段与声明文件一起被包含进来</li><li>解析@types包的名字的过程与解析import语句里模块名的过程类似.所以可以简单的把三斜线类型引用指令想像成针对包的import声明</li><li>对于那些<strong>在编译阶段生成的声明文件</strong>,编译器会自动地添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>;当且仅当结果文件中使用了引用的<code>@types</code>包里的声明时才会在生成的声明文件里添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>语句</li></ul></li></ol><blockquote><p>配置<code>tsconfig.json</code>.</p></blockquote><ol><li>初始化一个tsconfig.json文件:<code>npx tsc --init</code></li><li>介绍几个重要的配置项<ul><li><code>target</code>: 将项目打包成目标兼容的版本</li><li><code>module</code>: 指定要用的模块化标准</li><li><code>lib</code>: lib用于指定要包含在编译中的库文件<ul><li>例如dom中的一些类型所需要的声明文件.或者使用<code>Array&lt;T&gt;</code>指定数组类型</li><li><a href="https://stackoverflow.com/questions/43874096/difference-in-the-lib-property-in-tsconfig-json-between-es6-and-es2017">可以看下这篇文章</a></li></ul></li><li><code>declaration</code>: 为ts或者js项目生成定义文件(<code>.d.ts</code>)</li><li><code>sourceMap</code>: 为源码生成映射文件,方便调试</li><li><code>rootDir</code>: 指定根目录的源文件位置</li><li><code>outDir</code>: 指定根目录的打包位置</li><li><code>esModuleInterop</code>: 是commonjs模块兼容esm模块(意味着两者的方式都可以导出)<ul><li>参考:<a href="https://zhuanlan.zhihu.com/p/148081795">https://zhuanlan.zhihu.com/p/148081795</a></li></ul></li></ul></li></ol><ul><li>最终形成的tsconfig.json文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2016"</span><span class="token punctuation">,</span>      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">,</span>                                    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>                                     <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                  <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>     <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                 <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于<code>package.json</code>文件最好把项目放置在源文件<code>src</code>中,此时只需要配置打包生成的目录上传包就可以了</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/index.js"</span><span class="token punctuation">,</span><span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"dist/index.d.ts"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>video</title>
      <link href="/2022/04/06/video/"/>
      <url>/2022/04/06/video/</url>
      
        <content type="html"><![CDATA[<h2 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h2><blockquote><p>&lt;video&gt;实现了HTMLVideoElement这个接口.该接口继承了<code>HTMLMediaElement</code>和<code>HTMLElement</code>的属性和方法</p></blockquote><ul><li>浏览器并不都是支持相同的视频格式,你可以在&lt;source&gt;中提供多个源,浏览器会使用他所支持的那个<ul><li>&lt;video&gt;标签的中间内容,是针对浏览器不支持此内容的降级处理</li></ul></li></ul><blockquote><p>&lt;video&gt;标签的属性</p></blockquote><ol><li><code>src</code>:该属性指向你想要嵌入的网页当中的视频,与&lt;img&gt;标签的src相同</li><li><code>width</code>和<code>height</code>:设置视频的宽度和高度</li><li><code>controls</code>:<code>bool</code>.浏览器提供的控件界面,用户可以通过控件视频的回放功能</li><li><code>autoplay</code>:<code>bool</code>.设置此元素视频会自动播放.但是也必须设置<code>muted</code></li><li><code>muted</code>:<code>bool</code>.默认值是false,意味着视频播放的时候音频也会播放.设置为true,音频会初始化为静音<ul><li>浏览器为了用户的体验考虑,限制了音视频的自动播放,最大限度地减少广告或者噪音等骚扰</li></ul></li><li><code>loop</code>:<code>bool</code>.指定后,会在视频结尾的地方自动返回视频开始的地方</li><li><code>poster</code>:视频播放前显示的图像.封面图像</li><li><code>preload</code>:浏览器是否需要缓存该视频<ul><li><code>none</code>:浏览器不会缓存该视频</li><li><code>auto</code>:当页面加载后缓存该视频</li><li><code>metadata</code>:仅缓存原视频的数据</li></ul></li><li><code>controlslist</code>(实验):用户在显示其自己的控件集时选择要在媒体元素上显示的控件<ul><li><code>nodownload</code>:禁止下载.隐藏下载的小控件</li><li><code>nofullscreen</code>:隐藏全屏小控件</li><li><code>noremoteplayback</code>:隐藏小窗口控件</li></ul></li></ol><h3 id="HTMLVideoElement"><a href="#HTMLVideoElement" class="headerlink" title="HTMLVideoElement"></a>HTMLVideoElement</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pau<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂停播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zyjcould.ltd/mv/player.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该接口提供了用于操作视频对象的特殊属性和方法</p></blockquote><ul><li>由于不同的浏览器会支持不同的媒体格式.因此在提供媒体文件的时候,提供一种所有浏览器都支持的格式,或者提供格式不同的多个视频源来支持不同浏览器.</li></ul><blockquote><p>除了继承父对象<code>HTMLMediaElement</code>的属性之外,同时自己也实现了自身的属性</p></blockquote><ol><li><code>height,width,preload</code>:看上文</li><li><code>videoWidth,videoHeight</code>:只读.以<code>css pixels</code>单位给出的视频资源本身的大小.这个值考虑了大小,对比度,明度等等.而height,width只给出视频显示区域的大小</li></ol><h4 id="HTMLMediaElement对象的属性"><a href="#HTMLMediaElement对象的属性" class="headerlink" title="HTMLMediaElement对象的属性"></a><code>HTMLMediaElement</code>对象的属性</h4><ul><li>除了支持<strong>src,controls,autoplay,muted,loop,poster等</strong>之外还支持以下属性(并不完全)</li><li>详细请看:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement">https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement</a></li></ul><ol><li><p><code>duration</code>:只读.媒体以秒为单位的总长度时间.视频的总时长</p><ul><li>如果媒体不可用,则为0</li><li>如果媒体可用,但时间长度未知,值为NAN(可能未完全加载媒体)</li><li>如果媒体是以stream形式传输并且没有预定长度,则值为Inf</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>currentTime</code>:获取当前位置的播放时间,或者设置从某个位置开始播放</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>currentTime <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>volume</code>:音量.表示音频的音量.值从0.0(静音)到1.0(最大音量)</p><ul><li><code>muted</code>属性和<code>volume</code>属性没有关联关系,改变其中一个值另一个也不会改变</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>ended</code>:只读.表示媒体是否已经播放完毕</p></li><li><p><code>error</code>:只读,返回一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaError"><code>MediaError</code></a>.表示对象最近的错误,没有错误返回error</p></li><li><p><code>paused</code>:指示媒体元素是否被暂停</p></li><li><p><code>defaultPlaybackRate</code>:控制媒体的播放速度.</p><ul><li>1.0表示正常的播放速度,如果值小于1.0,则播放速度会比”正常速度”慢,如果值大于1.0,则播放速度会比”正常速度”快</li><li>如果是<code>0.0</code>是一个无效的值,并且会抛出错误</li></ul></li></ol><blockquote><p><code>TimeRangs</code>:该接口用来表示一组时间范围,主要目的是跟踪供&lt;audio&gt;和&lt;video&gt;元素加载使用的媒体哪些部分已经被缓冲</p></blockquote><ul><li><p>一个TimeRangs对象包括一个或多个时间范围,其中每个都由一个开始偏移量和结束偏移量指定</p><ul><li>可以将你想要检索的时间范围的索引值传递给end()和start()方法来引用每个时间范围</li></ul></li><li><p>视频一般情况下只有一个时间段,即<code>TimeRanges.length</code>值为1;如果进行了跳跃观看(例如3-&gt;4分钟这个时间段),并且跳跃内容并没有缓冲完毕,则会出现两个时间段,这时TimeRanges的length为2</p><ul><li>TimeRanges个数会随着跳跃观看未缓冲完成的内容而增加,随着缓冲的完成而减少,最少为1个,即从开头到结尾</li><li>参考:<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges">https://developer.mozilla.org/zh-CN/docs/Web/Guide/Audio_and_video_delivery/buffering_seeking_time_ranges</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------------------------------------------<span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>                    <span class="token operator">|</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>     <span class="token operator">|</span>------------------------------------------------------<span class="token number">0</span>             <span class="token number">5</span>                    <span class="token number">15</span>          <span class="token number">19</span>    <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>属性值:<code>length</code>:返回对象中时间范围的个数</p></li><li><p>方法:</p><ul><li><code>end(index)</code>:指定索引的范围的开始时间</li><li><code>start(index)</code>:指定索引的范围的结束时间</li></ul></li><li><p>以下三个属性皆实现了<code>TimeRangs</code>这个接口</p><ol><li><code>buffered</code>:只读.buffered属性会告诉浏览器哪一部分的媒体已经被下载(返回一个TimeRangs对象)</li><li><code>played</code>:只读.媒体可被播放的范围</li><li><code>seekable</code>:(如果有)用户可以试图找到的寻求范围</li></ol></li><li><p>何通过TimeRanges来判断video是否已经完全加载</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> buf <span class="token operator">=</span> video<span class="token punctuation">.</span>bufferedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// only one range</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> v<span class="token punctuation">.</span>duration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token comment">// The one range starts at the beginning and ends at</span>    <span class="token comment">// the end of the video, so the whole thing is loaded</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>readyState</code>:媒体的就绪状态</p></blockquote><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>HAVE_NOTHING</td><td>0</td><td>没有关于媒体资源的可用信息</td></tr><tr><td>HAVE_METADATA</td><td>1</td><td>已检索到足够的媒体资源,因此已初始化元数据属性寻求将不再引发异常</td></tr><tr><td>HAVE_CURRENT_DATA</td><td>2</td><td>数据可用于当前播放位置,但不足以实际播放多个帧</td></tr><tr><td>HAVE_FUTURE_DATA</td><td>3</td><td>当前播放位置以及至少一点点未来的数据是可用的(换句话说,至少两帧视频)</td></tr><tr><td>HAVE_ENOUGH_DATA</td><td>4</td><td>有足够的数据可用,下载速率足够高,媒体可以不间断地播放到底</td></tr></tbody></table><blockquote><p><code>networkState</code>:获取媒体时的网络状态</p></blockquote><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>NETWORK_EMPTY</td><td>0</td><td>还没数据.readyState是HAVE_NOTHING</td></tr><tr><td>NETWORK_IDLE</td><td>1</td><td>是有效的并且已经选择了一个资源,但是还没有使用网络</td></tr><tr><td>NETWORK_LOADING</td><td>2</td><td>正在下载HTMLMediaElement 数据.</td></tr><tr><td>NETWORK_NO_SOURCE</td><td>3</td><td>没有找到 HTMLMediaElement src</td></tr></tbody></table><h4 id="HTMLMediaElement方法"><a href="#HTMLMediaElement方法" class="headerlink" title="HTMLMediaElement方法"></a>HTMLMediaElement方法</h4><blockquote><p>由于HTMLVideoElement本身的方法还在实验性中,这里使用HTMLMediaElement父元素的方法</p></blockquote><ul><li><code>play()</code>:开始播放</li><li><code>pause()</code>:暂停播放</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">pay<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pau<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  video<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>canPlayType(in DOMString type)</code>:返回以下属性<ul><li><code>probably</code>:如果指定的类型似乎可以播放</li><li><code>maybe</code>:如果不播放就无法判断该类型是否可播放</li><li><code>空字符串</code>:如果指定的类型肯定不能播放</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">canPlayType</span><span class="token punctuation">(</span><span class="token string">'video/webm'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//maybe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>load()</code>:重置媒体元素并重新选择媒体资源.任何未决事件都将被丢弃.获取多少媒体数据仍受<code>preload</code>属性的影响<ul><li>此方法可用于在删除任何<code>src</code>属性和&lt;source&gt;来放资源</li><li>通常不需要使用此方法,除非需要在动态更改后重新扫描&lt;source&gt;元素</li></ul></li></ul><h2 id="video事件"><a href="#video事件" class="headerlink" title="video事件"></a>video事件</h2><ol><li><p><code>loadstart</code>:浏览器开始寻找指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//由于没有视频资源,所以duration是null</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadstart"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>durationchange</code>:时长变化的时候.音频&#x2F;视频的时长数据发生变化时触发,时长由NaN变为音频&#x2F;视频的实际时长</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"durationchange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"durationchange"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token comment">//视频总时长</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>loadedmetadata</code>:元数据加载的时候.音频&#x2F;视频的元数据已加载时触发,元数据包括:时长,尺寸(仅视频)以及文本轨道</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadedmetadata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadedmetadata"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token comment">//视频总时长</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>progress</code>:浏览器下载监听.当浏览器正在下载指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>loadeddata</code>:视频的首帧已经加载时,但没有足够的数据来播放指定音频&#x2F;视频的下一帧时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loadeddata"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>canplay</code>:可播放监听.当浏览器能够开始播放指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"canplay"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"canplay"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>canplaythrough</code>:可流畅播放.在不停下来进行缓冲的情况下持续播放指定的音频&#x2F;视频时触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"canplaythrough"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"canplaythrough"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>play</code>:播放监听.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"play"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>pause</code>:暂停监听</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>seeking</code>:当用户开始移动&#x2F;跳跃到音频&#x2F;视频中新的位置时触发</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"seeking"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"seeking"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="11"><li><code>seeked</code>:当用户已经移动&#x2F;跳跃到视频中新的位置时触发</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"seeked"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"seeked"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="12"><li><code>waiting</code>:视频加载等待.当视频由于需要缓冲下一帧而停止,等待时触发<ul><li>当触发play事件的时候,如果视频还没有加载好,就会触发waiting</li></ul></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"waiting"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"waiting"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="13"><li><code>playing</code>:当视频在已因缓冲而暂停或停止后已就绪时触发</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"playing"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"playing"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="14"><li><code>timeupdate</code>:当播放位置已更改,播放时间更新</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"timeupdate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"timeupdate"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="15"><li><code>ended</code>:播放结束的时候</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"ended"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ended"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="16"><li><code>error</code>:播放错误</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="17"><li><code>volumechange</code>:当音量更改时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'volumechange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'volumechange'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="18"><li><code>stalled</code>:当浏览器尝试获取媒体数据,但数据不可用时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'stalled'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stalled'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="19"><li><code>ratechange</code>:当视频的播放速度已更改时</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'ratechange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ratechange'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="20"><li><code>emptied</code>:媒体内容为空时触发.例如,当这个<code>media</code>已经加载完成(或者部分加载完成).<code>load()</code>被用来进行重新加载</li></ol><blockquote><p>注意点:</p></blockquote><ul><li>你可以用CSS属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position"><code>object-position</code></a> 来调整视频在元素内部的位置,它可以控制视频尺寸适应于元素外框的方式.</li><li>如果想在视频里展示字幕或者标题,你可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track"><code>&lt;track&gt;</code></a> 元素和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API">WebVTT</a> 格式的基础上使用 JavaScript 来实现.详情请见 <a href="https://developer.mozilla.org/en-US/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/Adding_captions_and_subtitles_to_HTML5_video">Adding captions and subtitles to HTML5 video</a></li></ul><h2 id="画中画"><a href="#画中画" class="headerlink" title="画中画"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PictureInPictureWindow">画中画</a></h2><ul><li><p>HTML中的属性:</p><ul><li><code>autoPictureInPicture</code>:该属性指示视频是否应自动进入或离开画中画模式<ul><li>如果是<code>true</code>:视频在更改选项卡和&#x2F;或应用程序时应自动进入或离开画中画模式</li></ul></li><li><code>disablePictureInPicture</code>:阻止用户代理(<code>User-Agent</code>)是否应该向用户建议画中画功能,或者请求它自动<ul><li>如果是<code>true</code>,表示用户代理(请求头中的<a href="https://developer.mozilla.org/en-US/docs/Glossary/User_agent"><code>User-Agent</code></a>)不应向用户建议该功能(就是画中画不能播放)</li></ul></li></ul></li><li><p>方法:</p><ol><li><code>HTMLVideoElement.requestPictureInPicture()</code>:异步请求,以画中画模式显示视频<ul><li>如果成功进入画中画了.会触发<code>enterpictureinpicture</code>事件,让它知道它现在处于画中画状态</li><li>返回一个<code>PictureInPictureWindow</code>对象</li></ul></li><li><code>Document.exitPictureInPicture()</code>将此文档中包含的视频(当前处于浮动状态)从画中画模式中取出,从而恢复屏幕的先前状态<ul><li>返回值一个Promise,一旦用户代理完成退出画中画模式,就会解析.如果发生错误,那么会调用promise处理</li><li>语法:<code>exitPromise = document.exitPictureInPicture();</code></li></ul></li></ol></li><li><p>属性:<code>Document.pictureInPictureEnabled</code>.指示画中画模式是否可用.默认情况下,画中画模式可用</p></li><li><p>事件:</p><ul><li><code>enterpictureinpicture</code>:当视频成功进入画中画模式时,将触发该事件.<code>enterpictureinpicture</code>此事件不可取消,也不会冒泡</li><li><code>leavepictureinpicture</code>:当视频元素成功离开画中画模式时,将触发该事件.<code>leavepictureinpicture</code>此事件不可取消,也不会冒泡</li></ul></li><li><p><code>PictureInPictureWindow</code>接口是一个对象,它可以通过编程的方式获得浮动视频窗口的宽度和高度,并调整浮动视频窗口的大小.</p><ul><li>使用<code>HTMLVideoElement.requestPictureInPicture()</code>返回一个具有此接口的promise</li><li><code>width,height</code>:只读.返回小窗口的高度和宽度</li><li><code>resize</code>:监听小窗口调整大小的事件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'enterpictureinpicture'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> smallWindow <span class="token operator">=</span> event<span class="token punctuation">.</span>pictureInPictureWindow<span class="token punctuation">;</span>  <span class="token comment">// smallWindow就是一个PictureInPictureWindow对象</span>  smallWindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//event.targe就是smallWidth</span>    <span class="token comment">// event.target.width是小视频窗口的宽度</span>    <span class="token comment">// event.target.width是小视频窗口的高度</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现画中画"><a href="#实现画中画" class="headerlink" title="实现画中画"></a>实现画中画</h3><blockquote><p>实现画中画不可缺少的就是观察者模式(IntersectionObserver)的使用<br>.<br>如果对观察者不熟,可以看<a href="https://juejin.cn/post/7075666393508773895">https://juejin.cn/post/7075666393508773895</a></p></blockquote><ul><li><p>第一种方式使用vue的<code>teleport</code>组件<a href="http://mail.zyjcould.ltd/player/#/player">http://mail.zyjcould.ltd/player/#/player</a>.</p></li><li><p><a href="https://github.com/Jack-Zhang-1314/player">仓库地址</a></p></li><li><p>第二种就是使用<code>autoPictureInPicture</code>实现小窗口传送</p></li><li><p>由于谷歌浏览器原生的政策,画中画暂时还是不能使用原生很好的支持</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zyjcould.ltd/mv/player.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">autoPictureInPicture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span>    <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> v <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#video"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observe</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jinru"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v<span class="token punctuation">.</span><span class="token function">requestPictureInPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>readyState <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">exitPictureInPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token parameter">value</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token parameter">error</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>第一个错误是由于为使用用户手势,也就是必须要点击视频(可以是任何位置)才可以触发小窗口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Uncaught <span class="token punctuation">(</span>in promise<span class="token punctuation">)</span> DOMException: Failed to execute <span class="token string">'requestPictureInPicture'</span> on <span class="token string">'HTMLVideoElement'</span><span class="token builtin class-name">:</span> Must be    handling a user gesture <span class="token keyword">if</span> there isn't already an element <span class="token keyword">in</span> Picture-in-Picture.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二个错误,是因为,用户代理事件是有生命周期的,触发小窗口切换来回之后(或者在可能是5s)内会死亡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DOMException: Failed to execute <span class="token string">'exitPictureInPicture'</span> on <span class="token string">'Document'</span><span class="token builtin class-name">:</span> There is no Picture-in-Picture element <span class="token keyword">in</span>    this document.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>这里有详解的错误原因</li><li><a href="https://stackoverflow.com/questions/56252108/why-video-requestpictureinpicture-works-only-once">https://stackoverflow.com/questions/56252108/why-video-requestpictureinpicture-works-only-once</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL</title>
      <link href="/2022/03/28/url/"/>
      <url>/2022/03/28/url/</url>
      
        <content type="html"><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><blockquote><p>URL用于解析,构造,规范化和编码urls.如果浏览器不支持<code>new URL()</code>构造函数.可以使用<code>new window.URL()</code></p></blockquote><h3 id="new-URL"><a href="#new-URL" class="headerlink" title="new URL()"></a>new URL()</h3><blockquote><p>构造函数:new URL(url[,base])</p></blockquote><ul><li><code>url</code>:表示绝对或者相对的url.如果是绝对的url,无论baseurl有没有参数都会被忽略.如果是相对的url,则参数会添加到baseurl后</li><li><code>base</code>:可选的,表示基准的url.只有url是带协议才可以生效.<span style="color:red">否则报一个TypeError</span></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> baseurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/laji"</span><span class="token comment">//忽略参数</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/zhenlan"</span><span class="token punctuation">,</span>baseurl<span class="token punctuation">)</span><span class="token comment">//https://www.baidu.com/zhenlan</span><span class="token comment">//TypeError</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment">//https://www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性</p></blockquote><ul><li><code>hash</code>:返回包含URL标识中的’#’和fragment标识符</li><li><code>host</code>:返回一个主机信息.即<code>hostname</code>,如果URL接口有端口号(如果是默认端口号,则不会包含),也会包含端口号</li><li><code>hostname</code>:不包含端口号的主机信息</li><li><code>href</code>:返回一个完整的url</li><li><code>origin</code>:只读属性.<ul><li>如果是<code>http</code>或者是<code>https</code>,返回<code>协议名+&#39;://&#39;+域名+&#39;:&#39;+端口号</code></li><li>如果是ftp协议,视浏览器而定</li><li>如果是<code>blob:</code>协议,返回的是<code>blob:</code>紧跟的源地址<ul><li><code>&quot;blob:https://mozilla.org&quot;</code>返回<code>https://mozilla.org</code></li></ul></li></ul></li><li><code>pathname</code>返回一个初始<code>/</code>和URL的路径(如果没有路径,则为空字符串)</li><li><code>port</code>:如果url中包含明确的端口信息,则返回一个端口号.否则返回<code>&quot;&quot;</code></li><li><code>protocol</code>:返回一个url的协议值</li><li><code>search</code>:返回一个查询字符串.<code>?</code>紧跟的</li><li><code>searchParams</code>:返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">URLSearchParams</a>.这个对象包含当前URL中解码后的GET查询参数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://developer.mozilla.org:3300/en-US/docs/Web/API/URL/href?q=123#Examples'</span><span class="token punctuation">)</span><span class="token keyword">const</span> hash <span class="token operator">=</span> url<span class="token punctuation">.</span>hash <span class="token comment">//#Examples</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>host <span class="token comment">//developer.mozilla.org:3300</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>hostname <span class="token comment">//developer.mozilla.org</span><span class="token keyword">const</span> host <span class="token operator">=</span> url<span class="token punctuation">.</span>href <span class="token comment">//https://developer.mozilla.org:3300/en-US/docs/Web/API/URL/href#Examples</span><span class="token keyword">const</span> origin <span class="token operator">=</span> url<span class="token punctuation">.</span>origin <span class="token comment">//https://developer.mozilla.org</span><span class="token keyword">const</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span>pathname <span class="token comment">///en-US/docs/Web/API/URL/href</span><span class="token keyword">const</span> port <span class="token operator">=</span> url<span class="token punctuation">.</span>port <span class="token comment">//3300</span><span class="token keyword">const</span> protocol <span class="token operator">=</span> url<span class="token punctuation">.</span>protocol <span class="token comment">//https</span><span class="token keyword">const</span> search <span class="token operator">=</span> url<span class="token punctuation">.</span>search <span class="token comment">//?q=123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>username</code>:包含域名前指定的username</li><li><code>password</code>:返回域名之前指定的密码</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://anonymous:flabada@developer.mozilla.org/en-US/docs/Web/API/URL/password'</span><span class="token punctuation">)</span><span class="token keyword">const</span> password <span class="token operator">=</span> url<span class="token punctuation">.</span>password <span class="token comment">//flabada</span><span class="token keyword">const</span> username <span class="token operator">=</span> url<span class="token punctuation">.</span>username <span class="token comment">//anonymous</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>静态方法</p></blockquote><ol><li><code>URL.createObjectURL(object)</code>:创建一个表示参数中给出的对象的URL<ul><li>这个新的URL对象表示指定的<code>File</code>对象或<code>Blob</code>对象</li><li><code>object</code>:用于创建URL的<code>File</code>对象,<code>Blob</code>对象或者<code>MediaSource</code>对象</li><li>返回一个用于指定源的URL</li></ul></li><li><code>URL.revokeObjectURL(objectURL)</code>:释放一个之前已经存在的,通过调用<code>URL.createObjectURL()</code>创建的URL对象<ul><li><code>objectURL</code>:通过调用<code>URL.createObjectURL()</code>方法产生的URL对象</li></ul></li><li><code>URL.toString()</code>与<code>URL.toJSON()</code>与<code>url.href</code>一样,返回序列化的url</li></ol><h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/append">URLSearchParams</a></h3><blockquote><p>接口定义了一些实用的方法来处理URL的查询字符串</p></blockquote><h4 id="new-URLSearchParams"><a href="#new-URLSearchParams" class="headerlink" title="new URLSearchParams()"></a>new URLSearchParams()</h4><blockquote><p><code>URLSearchParams()</code>构造器创建并返回一个新的<code>URLSearchParams</code>对象.并且会忽略<code>?</code></p></blockquote><ul><li><code>const URLSearchParams = new URLSearchParams(init)</code></li><li><code>init</code>:需要USVString(对应 unicode 标量值的所有可能序列的集合)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">'?foo=1&amp;bar=2'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"foo"</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">"bar"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法</p></blockquote><ul><li><code>append(name, value)</code>:可以插入一个新搜索参数</li><li><code>getAll(name)</code>:以数组的形式返回与指定搜索参数对应的所有值</li><li><code>get(name)</code>:返回第一个与搜索参数对应的值</li><li><code>has(name)</code>:返回一个布尔值,表示查找的键名是否存在</li><li><code>set()</code>:设置和搜索参数相关联的值.如果设置前已经存在匹配的值,该方法会删除多余的,如果将要设置的值不存在,则创建它</li><li><code>delete(name)</code>:可以删除指定名称的所有搜索参数</li><li><code>sort()</code>:对对象中的所有键&#x2F;值对进行排序.按unicode编码</li><li><code>entries()</code>:返回一个<code>iterator</code>,允许遍历该对象中包含的所有键&#x2F;值对</li><li><code>forEach(callback)</code>:该回调函数可以接收到3个参数value,key,searchParams</li><li><code>keys()</code>:返回一个iterator,遍历器允许遍历对象中包含的所有键</li><li><code>values()</code>:返回一个iterator,遍历器允许遍历对象中包含的所有值</li><li><code>toString()</code>:返回适用在URL中的查询字符串</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'https://example.com?foo=1&amp;bar=2'</span><span class="token punctuation">)</span><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">//['1', '4']</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">//'1'</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//foo=1&amp;bar=2&amp;foo=4</span>params<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//foo=2&amp;bar=2</span>params<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token comment">//bar=2</span>params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//entries</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>  <span class="token comment">//bar 2</span>  <span class="token comment">//foo 4   </span><span class="token punctuation">&#125;</span><span class="token comment">//forEach</span>params<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//bar 2</span>  <span class="token comment">//foo 4  </span><span class="token comment">//keys()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//bar foo</span><span class="token comment">//values()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2 4</span>params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//'bar=2&amp;foo=4'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drag</title>
      <link href="/2022/03/28/drag/"/>
      <url>/2022/03/28/drag/</url>
      
        <content type="html"><![CDATA[<h2 id="draggable"><a href="#draggable" class="headerlink" title="draggable"></a>draggable</h2><blockquote><p>该属性是一个<strong>全局属性</strong>.是枚举类型,用于表示元素是否允许使用拖放操作</p></blockquote><ul><li><code>true</code>:可以拖动</li><li><code>false</code>:禁止拖动</li><li><code>auto</code>:跟随浏览器定义是否可以拖动</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTML拖拽API"><a href="#HTML拖拽API" class="headerlink" title="HTML拖拽API"></a>HTML拖拽API</h2><blockquote><p>拖放(<code>Drag</code>和<code>Drop</code>)接口使应用能够在浏览器使用拖放功能,并且继承了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">DOM event model</a>以及从<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent">mouse events</a>继承而来,得到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent">drag events</a>.</p></blockquote><h3 id="DragEvent"><a href="#DragEvent" class="headerlink" title="DragEvent"></a>DragEvent</h3><blockquote><p><code>DragEvent</code>的所有事件都是全局事件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//可以直接在document上使用</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">"drag"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在操作期间,有一些事件的类型可能会被多次触发(例如<code>drag</code>和<code>dragover</code>)</li></ul><table><thead><tr><th>事件</th><th>On型事件处理程序</th><th>触发时刻</th></tr></thead><tbody><tr><td>dragstart</td><td>ondragstart</td><td>当用户开始拖拽一个元素或选中的文本时触发</td></tr><tr><td>drag</td><td>ondrag</td><td>当拖拽元素或选中的文本时触发或者到达可放置区域触发</td></tr><tr><td>dragend</td><td>ondragend</td><td>当拖拽操作结束时触发(<strong>比如松开鼠标按键或敲Esc键</strong>)</td></tr><tr><td>dragexit</td><td>ondragexit</td><td>当元素变得不再是拖拽操作的选中目标时触发(官网并没有详细说明)</td></tr><tr><td>dragenter</td><td>ondragenter</td><td>当拖拽元素或选中的文本<strong>刚进入</strong>到一个可释放目标时触发</td></tr><tr><td>dragover</td><td>ondragover</td><td>当元素或选中的文本被<strong>拖入到一个可释放目标内时触发</strong>(每100毫秒触发一次)</td></tr><tr><td>dragleave</td><td>ondragleave</td><td>当拖拽元素或选中的文本离开一个可释放目标时触发</td></tr><tr><td>drop</td><td>ondrop</td><td>当元素放置在可放置区域时触发(此时可以取消浏览器的默认行为)</td></tr></tbody></table><ul><li><p>被拖动的元素事件有:<code>drag</code>,<code>dragstart</code>,<code>dragend</code>,<code>dragexit</code></p></li><li><p>目的地对象事件有:<code>dragenter</code>,<code>dragover</code>,<code>dragleave</code>,<code>drop</code></p></li><li><p><code>dragenter</code>和<code>dragover</code>事件的默认行为是拒绝接受任何被拖放的元素.</p><ul><li>需要使用<code>event.preventDefault()</code>阻止默认行为</li></ul></li><li><p>默认触发的顺序就是:<code>dragstart-&gt;dragenter-&gt;dragleave-&gt;dragend</code></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>153<span class="token punctuation">,</span> 80<span class="token punctuation">,</span> 202<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 3px solid <span class="token function">rgb</span><span class="token punctuation">(</span>40<span class="token punctuation">,</span> 180<span class="token punctuation">,</span> 127<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drag"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//console.log(e.target, "drop")</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragstart"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragend"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragend"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragexit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragexit"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragenter"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//e.preventDefault()</span>    <span class="token comment">//console.log(e.target, "dragover")</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragleave"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">"dragleave"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataTransfer"><a href="#DataTransfer" class="headerlink" title="DataTransfer"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a></h4><ul><li><code>DataTransfer()</code>是一个构造函数,返回一个新的<code>DataTransfer</code>对象</li></ul><blockquote><p><code>DataTransfer</code>对象用于保存拖动并放下(drag and drop)过程中的数据.它可以报存一项或者多项的数据和每个拖拽项的类型(MIME类型)</p></blockquote><ul><li><p><code>DataTransfer</code>对象包含拖拽事件的状态(例如事件的拷贝(copy)或者移动(move)).并且可以向拖拽数据中添加或删除项目的方法</p></li><li><p>在<code>DragEvent</code>接口有一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent/DragEvent">构造函数</a>和一个<code>dataTransfer</code>(dataTransfer属性就是一个DataTransfer对象)属性</p></li></ul><blockquote><p>方法</p></blockquote><ol><li><code>getData(format)</code>:接受指定类型的拖放.如果拖放行为没有操作任何数据,会返回一个空字符串<ul><li>数据类型:<code>text/plain</code>,<code>text/uri-list</code></li></ul></li><li><code>setData()</code>:设置拖放操作的drag data到指定的数据和类型(一般设置MIME类型)<ul><li>如果给定类型的数据不存在,则将其添加到拖动数据存储的末尾,使得<code>types</code>列表中的最后一个项目将是新类型</li><li>如果数据已经存在,则会替换当前位置的数据</li></ul></li><li><code>setDragImage(img, xOffset, yOffset)</code>:设置为自定义图像.通常在<code>dragstart</code>中使用此方法<ul><li>图像通常是一个&lt;image&gt;元素,也可以是&lt;canvas&gt;或者其他图像元素</li><li><code>xOffset</code>指示相对于图片的横向偏移量;<code>yOffset</code>指向相对于图片的纵向偏移量</li></ul></li><li><code>clearData([format])</code>:删除给定类型的拖动操作的.如果该数据不存在,不会进行任何操作<ul><li><code>format</code>:如果不指定数据类型,为空字符串或者空白.则会删除所有数据类型</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用dragover阻止浏览器的默认行为.</span><span class="token comment">//不能使用drapstart.drop需要拖拽元素在目标元素内才能完全触发</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">,</span> <span class="token string">"www.google.com"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://zyjcould.ltd/erciyuan/diana.png"</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setDragImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ele <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"drop"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性</p></blockquote><ol><li><p><code>dropEffect</code>:用于控制在拖放过程中给用户的反馈(视觉上的),他会影响过程中光标手势.并且始终设置成effectAllowed的可能值之一</p><ul><li><code>copy</code>:操作用于指示被拖动的数据将从当前位置复制到放置位置</li><li><code>move</code>:操作用于指定被拖动的数据将被移动</li><li><code>link</code>:操作用于指示将在源和放置位置之间创建某种形式的关系或连接</li><li><code>none</code>:项目可能禁止拖放</li></ul></li><li><p><code>effectAllowed</code>:指定拖放操作所允许的一个效果</p><ul><li><code>none</code>:此项表示不允许放下</li><li><code>copy</code>:源项目的复制项可能会出现在新位置</li><li><code>copyLink</code>:允许 copy 或者 link 操作</li><li><code>copyMove</code>:允许 copy 或者 move 操作</li><li><code>link</code>:可以在新地方建立与源的链接</li><li><code>linkMove</code>:允许 link 或者 move 操作</li><li><code>move</code>:一个项目可能被移动到新位置</li><li><code>all</code>允许所有的操作</li><li><code>uninitialized</code>效果没有设置时的默认值,则等同于all</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>effectAllowed <span class="token operator">=</span> <span class="token string">"move"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ev<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">"move"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fills</code>:属性在拖动操作中表示<strong>文件列表</strong>.如果操作不包含文件,则此列表为空</p><ul><li>所有type属性(attribute)为file的&lt;input&gt;元素都有一个files属性(property),用来存储用户所选择的文件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileItem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>types</code>:只读属性.返回一个我们在事件中设置的拖动数据格式(setData()).格式顺序与拖动操作中包含的数据顺序相同</p></li><li><p><code>items</code>:DataTransfer的items属性只读,是拖动操作中<code>DataTransferItem</code>的<code>DataTransferItemList</code>.</p><ul><li>一个<code>DataTransferItemList</code>对象,包含了表示拖动操作中被拖动项的DataTransferItem对象,每一个拖动项对应一个列表项</li><li>该列表包含了操作中每一项目的对应项,如果操作没有项目,则列表为空</li></ul></li></ol><h5 id="DataTransferItem"><a href="#DataTransferItem" class="headerlink" title="DataTransferItem"></a>DataTransferItem</h5><blockquote><p>每个<code>DataTransfer</code>都包含一个items属性,这个属性是DataTransferItem对象的list(列表).即(DataTransferItemList)</p></blockquote><ul><li><code>DataTransferItem</code>描述了一个拖拽项.在一个拖拽中,每一个<code>drag event</code>都有一个dataTransfer属性,它包含存有拖拽属性的<code>list</code>,每一项都是一个DataTransferItem</li></ul><blockquote><p>属性</p></blockquote><ol><li><code>kind</code>:拖拽项的种类,<code>string</code>或者是<code>file</code></li><li><code>type</code>:拖拽想的类型.一般是MIME类型</li></ol><ul><li><p>由于items并不是一个数组,这里使用的是<code>Array.from()</code>转换</p><ul><li>阻止了浏览器默认直接大开图片,拖动图片或者其他类型文件.可以在控制台看到打印</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>方法</p></blockquote><ol><li><code>getAsFile()</code>:<code>DataTransferItem</code>是一个文件,那此方法将返回拖拽项数据的File对象.否则返回null</li><li><code>getAsString(callback)</code>:当<code>kind</code>属性是一个普通Unicode字符串时,该方法会用<code>DataTransferItem</code>对象的kind属性作为实参来执行传入的回调函数<ul><li>该回调函数有权访问<code>DataTransferItem</code>的字符串数据</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> file <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAsFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>      <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      img<span class="token punctuation">.</span>src <span class="token operator">=</span> url      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拖拽实现图片的上传功能</li></ul><h5 id="DataTransferItemList"><a href="#DataTransferItemList" class="headerlink" title="DataTransferItemList"></a>DataTransferItemList</h5><blockquote><p><code>DataTransferItemList</code>对象是<code>DataTransferItem</code>对象的列表.该属性可以向列表中添加拖拽项,从列表中移除拖拽项和清空列表中所有的拖拽项</p></blockquote><ul><li><code>DataTransferItemList</code>对象就是每个<code>DragEvent</code>属性都有的<code>dataTransfer</code>属性中的<code>items</code>属性</li></ul><blockquote><p>属性</p></blockquote><ul><li><code>length</code>:李彪拖动项的数量</li></ul><blockquote><p>方法</p></blockquote><ol><li><code>add()</code>指定数据创建新的<code>DataTransferItem</code>,并将其添加到拖动的<code>DataTransferItemList</code>中<ul><li><code>add(data, type)</code>.type是MIME类型.例如<code>text/html</code>或者<code>text/plain</code></li><li><code>add(file)</code>.文件对象,不需要给出任何类型</li><li>如果该项目成功添加到DataTransferItemList中,则返回一个新创建的 <code>DataTransferItem</code>对象.如果关键的DataTransfer对象没有数据存储,则返回null</li></ul></li><li><code>remove(index)</code>:方法从列表中指定删除指定索引处的<code>DataTransferItem</code>.如果越界,则不会更改列表</li><li><code>clear()</code>:将<code>DataTransferItemList</code>中的所有<code>DataTransferItem</code>删除</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><code>DataTransfer</code>和<code>DataTransferItem</code>接口的一个主要的不同是前者使用同步的<code>getData()</code>方法去得到拖拽项的数据,而后者使用异步的<code>getAsString()</code>方法得到拖拽项的数据</li><li>使用<code>e.preventDefault()</code>这个属性可以取消一些不必要的浏览器的默认事件</li></ol><h2 id="mouse"><a href="#mouse" class="headerlink" title="mouse"></a>mouse</h2><blockquote><p>使用<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>配合绝对定位<code>absolute</code>来进行拖拽</p></blockquote><p><img src="./mouse.png" alt="mouse"></p><ol><li><code>mousedown</code>:这个阶段首先确定的就是鼠标相对于盒子内部的距离<code>ol = pageX-offsetLeft</code><ul><li>不光是<code>pageX</code>,也可以使用<code>clientX</code>.在合适的情况下选择合适的属性</li></ul></li><li><code>mousemove</code>:在执行阶段,目标是算出偏移量的距离.使用<code>pageX-ol</code>.<ul><li>ol就是鼠标距离拖拽目标的距离(是固定的)</li></ul></li><li><code>mouseup</code>:在抬起阶段,解绑mousemove事事件.</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  box1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bl <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetLeft    br <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetTop    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> bl <span class="token operator">+</span> <span class="token string">"px"</span>      box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> br <span class="token operator">+</span> <span class="token string">"px"</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Observer</title>
      <link href="/2022/03/15/observer/"/>
      <url>/2022/03/15/observer/</url>
      
        <content type="html"><![CDATA[<h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><blockquote><p>网页开发中经常会和用户交互而使用一些监听事件(例如onclick,onchange等).如果对于一些用户不直接触发的元素(例如渐变等),那就需要使用Observer去监听</p></blockquote><ul><li>浏览器为我们提供了五种<code>Observer</code>(观察者)来监听这些变动:<code>MutationObserver</code>,<code>IntersectionObserver</code>,<code>PerformanceObserver</code>,<code>ResizeObserver</code>,<code>ReportingObserver</code></li><li>以下观察者api都是构造函数</li><li>观察者属于微任务,并且优先级小于Promise</li></ul><h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><blockquote><p><code>IntersectionObserver</code>(交叉观察者)用于观察一个元素是否在视窗可见.构造函数创建并返回一个新的<code>IntersectionObserver</code>对象</p><p>如果未指定或为空字符串,则缺省的值为属性的默认值</p><p>一般用于<strong>无限滚动</strong>,<strong>图片懒加载</strong>,<strong>埋点</strong>,<strong>控制动画&#x2F;视频执行</strong></p></blockquote><ul><li>无论是使用视口(body)还是其他元素作为根,API 的工作方式都相同,并且会<strong>异步</strong>查询观察目标元素的可见性发生变化,就会执行提供的回调函数</li><li>通过提供一种新方法来<strong>异步</strong>查询元素相对于其他元素或全局视口的位置</li><li><strong>异步处理</strong>消除了昂贵的<code>DOM</code>和样式查询,连续轮询以及使用自定义插件的需求</li><li>Intersection Observer的三个步骤<ol><li>创建观察者</li><li>定义回调事件</li><li>定义要观察的目标对象</li></ol></li></ul><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ol><li><code>IntersectionObserver.observe(target)</code>:告诉要观察的目标元素</li><li><code>IntersectionObserver.takeRecords()</code>:从IntersectionObserver的通知队列中删除所有待处理的通知,并将它们返回到IntersectionObserver对象的新Array对象中</li><li><code>IntersectionObserver.unobserve()</code>指定停止观察特定目标元素</li><li><code>IntersectionObserver.disconnect()</code>:停止IntersectionObserver对象观察任何目标</li></ol><h4 id="创建观察者"><a href="#创建观察者" class="headerlink" title="创建观察者"></a>创建观察者</h4><ul><li>接收一个回调函数.只要目标元素发生变化就会触发回调函数</li><li>第二个参数是一个可选项</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  root<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#scrollArea'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rootMargin<span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>  <span class="token comment">//阈值为1.0表示当100%的目标在选项指定的元素中可见时,将调用回调</span>  <span class="token comment">//每个阈值是观测目标的交集区域与边界框区域的比率</span>  threshold<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>option字段</p></blockquote><ol><li><code>root</code>:用作检查<strong>目标可见性的视口的元素</strong>.必须是目标的祖先.<span style="color:red">如果未指定或缺省为浏览器视口(html)</span></li><li><code>rootMargin</code><strong>根周围的边距</strong>(默认全部为0).语法类似于<code>margin</code>可以是百分比或者像素,用于在计算交集之前增大或缩小根元素边界框的矩形偏移量,有效的扩大或者缩小根的判定范围从而满足计算要求.(top,right,bottom,left)</li><li><code>threshold</code>:阈值.<strong>单个数字或数字数组</strong>.默认值为 0(这意味着只要有一个像素可见,就会运行回调)阈值是监听对象的交叉区域和边界区域的比例,每当监听对象超过阈值就会触发回调<ul><li>如果只想检测可见性何时超过 50% 标记,则可以使用值 0.5.</li><li>如果希望每次可见性每次超过 25% 时都运行回调,则应指定数组 [0, 0.25, 0.5, 0.75, 1]</li><li>如果值为 1.0 表示在每个像素可见之前,不会认为阈值已通过.</li></ul></li></ol><h4 id="监听观察的目标对象"><a href="#监听观察的目标对象" class="headerlink" title="监听观察的目标对象"></a>监听观察的目标对象</h4><blockquote><p>开启对目标对象的监听,如果没有</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>callback是添加监听后,当监听目标发生滚动变化时触发的回调函数.</p></blockquote><ul><li>第一个参数<code>entries</code>(数组),即<code>IntersectionObserverEntry</code>实例.描述了目标元素与root的交叉状态.</li></ul><table><thead><tr><th>属性</th><th align="center">说明</th></tr></thead><tbody><tr><td>boundingClientRect</td><td align="center">返回包含目标元素的边界信息,返回结果与element.getBoundingClientRect() 相同</td></tr><tr><td><strong>intersectionRatio</strong></td><td align="center">返回目标元素出现在可视区的比例</td></tr><tr><td>intersectionRect</td><td align="center">用来描述root和目标元素的相交区域</td></tr><tr><td><strong>isIntersecting</strong></td><td align="center">返回一个布尔值,下列两种操作均会触发回调:1.如果目标元素出现在root可视区,返回true.2. 如果从root可视区消失,返回false</td></tr><tr><td>rootBounds</td><td align="center">用来描述交叉区域观察者(intersection observer)中的根.</td></tr><tr><td>target</td><td align="center">目标元素:与根出现相交区域改变的元素 (Element)</td></tr><tr><td>time</td><td align="center">返回一个记录从 IntersectionObserver 的时间原点到交叉被触发的时间的时间戳</td></tr></tbody></table><ul><li>第二个参数就是<code>IntersectionObserver</code>这个实例对象本身.可以使用实例上的方法.</li></ul><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span>    <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observe</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src        observe<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> rootMargin<span class="token operator">:</span> <span class="token string">"0px 600px 0px -600px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// observe遍历监听所有img节点</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=></span> observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先说一下<code>dataset</code>属性,可以在很多网站中看到这个data-为前缀的属性</p></blockquote><ul><li>dataset:浏览器很早就支持以键(data)-值命名的自定义属性了</li><li>设置属性:<code>Element.dataset.dart=&quot;dark&quot;</code>.例如上图代码(<code>item.target.dataset.dart=&quot;dark&quot;</code>)在挂载到标签时,会自动加上<code>data</code>这个键.就像这样<code>data-dart=&quot;dark&quot;</code></li><li>获取属性:<code>Element.dataset.src</code>,不需要加上<code>data-</code>前缀</li><li>删除属性:<code>delete Element.dataset.src</code></li><li>当然我们完全可以使用<code>getAttribute</code>等属性来进行自定义操作</li></ul><blockquote><p><code>HTMLCollectionOf&lt;&gt;</code>和<code>NodeListOf&lt;&gt;</code>的区别</p></blockquote><ul><li>参考:<a href="https://dom.spec.whatwg.org/#interface-htmlcollection">DOM 标准 (whatwg.org)</a></li><li>由于是历史遗留的产物,<code>HTMLCollectionOf</code>他返回的是一个集合,并不支持任何数组的高级api<ul><li>并且一切由<code>getElements...</code>返回的节点都是动态的集合类型,没有实现forEach等方法</li><li>动态的:如果基本的文档改变时.所有<code>HTMLCollection</code>对象会立即改变</li></ul></li><li><code>NodeListOf</code>是静态的.实现了所有的高级数组都有的api,<code>forEach</code>等<ul><li>了解了这些,使用元素选择的时候也可以使用<code>querySelectAll()</code>来选择元素.他会返回一个NodeListOf的类型</li></ul></li></ul><blockquote><p>理解可视区</p></blockquote><ul><li>重要的一点就是可视区的理解<ul><li><strong>intersectionRatio</strong>对应的是<code>threshold</code></li><li><strong>isIntersecting</strong>对应的是<code>rootMargin</code></li></ul></li><li>只要理解了<code>rootMargin</code>就很容易理解threshold的概念</li><li>理解margin,由于文档流的缘故,在设置margin的<code>top</code>或者<code>bottom</code>任意值的时候会移动盒子.如果设置<code>left</code>或者<code>right</code>必须同时设置才会改变盒子原来的位置,只设置一个值只会撑大盒子</li><li>例如上面图中设置的整体元素会向左移动600px.并且目标元素是相对于视口来说,但是理论上所有的图片都应该移动到视口之外的位置.并且不可以看到图片的懒加载.但是由于浏览器本身有一定的默认值,我们会得到最后一个图片是触发观察者实现懒加载的</li><li>明白了这个,就可以明白<code>threshold</code>,只有目标元素的可见性达到视口的一定比例(threshold的属性值)之后才可以触发观察者模式</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="IntersectionObserver" src="https://codepen.io/jack-zhang-1314/embed/YzYXYrV?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/YzYXYrV">  IntersectionObserver</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><h3 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h3><ul><li><code>Mutation Observer</code>是<strong>异步</strong>触发,DOM的变动并不会马上触发,而是要等到当前所有DOM&#96;操作都结束才触发</li><li>可以通过配置项,监听目标DOM下子元素的变更记录</li><li>构造函数返回一个新的,包含监听 DOM 变化回调函数的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver"><code>MutationObserver</code></a> 对象</li><li>使用用途<ul><li>一般用于更高性能的数据绑定及响应</li><li>实现视觉差滚动</li><li>图片预加载</li><li>实现富文本编辑器</li></ul></li></ul><h4 id="Mutation实例方法"><a href="#Mutation实例方法" class="headerlink" title="Mutation实例方法"></a>Mutation实例方法</h4><ol><li><code>MutationObserver.observe(dom,options)</code>:阻止<code>MutationObserver</code> 实例继续接收的通知,直到再次调用其<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver/observe"><code>observe()</code></a>方法,该观察者对象包含的回调函数都不会再被调用</li><li><code>MutationObserver.takeRecords()</code>:从MutationObserver的通知队列中删除所有待处理的通知,并将它们返回到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationRecord"><code>MutationRecord</code></a>(保存每次的变化信息)对象的新<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a></li><li><code>MutationObserver.disconnect()</code>:停止MutationObserver对象观察任何目标</li></ol><h4 id="Mutation创建观察者和监听目标对象"><a href="#Mutation创建观察者和监听目标对象" class="headerlink" title="Mutation创建观察者和监听目标对象"></a>Mutation创建观察者和监听目标对象</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MutationObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>MutationObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第一个参数是一个dom对象,被观察子节点(目标元素)的父节点</li><li>第二个参数options是一个[MutationObserverInit | MDN (mozilla.org)](https:&#x2F;&#x2F;  developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;conflicting&#x2F;Web&#x2F;API&#x2F;MutationObserver&#x2F;observe_2f2addbfa1019c23a6255648d6526387)对象<ul><li><code>attributeFilter</code>:(无默认值)要监视的特定属性名称的<strong>数组</strong>(如<code>[&#39;src&#39;,&#39;class&#39;]</code>).如果未包含此属性,则对所有属性的更改都会触发变动通知</li><li><code>attributes</code>:默认值false.设置true观察受监视元素的属性值变更</li><li><code>characterData</code>:无默认值.设为true监视指定目标节点或者子节点树中节点所包含的字符数据的变化</li><li><code>characterDataOldValue</code>:无默认值.设为true,是否观察文本的内容(文本节点)</li><li><code>childList</code>:默认值为false.设为true,监视木匾检点添加或删除新的子节点(不包括修改子节点以及子节点后代的变化).如果<code>subtree</code>为true,则包含子节点</li><li><code>subtree</code>:默认值为false,设置true,将监视范围扩展到目标节点以及子节点</li></ul></li><li>属性特定项<ul><li>其中调用 <code>observe()</code>方法时<code>childList</code>,<code>attributes</code>,<code>characterData</code> 或者<code>attributeOldValue</code>,<code>characterDataOldValue</code>两组中,至少有一个必须为 <code>true</code>,否则会抛出异常</li><li><code>attributeFilter/attributeOldValue</code> &gt; <code>attributes</code></li><li><code>characterDataOldValue</code> &gt; <code>characterData</code></li><li>避免重复的特定项,不需要同时设置同样的效果</li></ul></li></ul><h4 id="mutation回调函数"><a href="#mutation回调函数" class="headerlink" title="mutation回调函数"></a>mutation回调函数</h4><blockquote><p>同样是接收两个参数</p></blockquote><ul><li>第一个参数是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationRecord"><code>MutationRecords</code></a>,依然是一个数组.其中每个<code>MutationRecord</code>对象,记录着<code>DOM</code>每次发生变化的变动记录.<code>MutationRecord</code>对象包含了DOM的相关信息</li></ul><table><thead><tr><th>属性</th><th align="left">描述</th></tr></thead><tbody><tr><td><strong>target</strong></td><td align="left">被修改影响的目标 dom 节点</td></tr><tr><td><strong>type</strong></td><td align="left">变化的类型，也就是MutationObserverInit对象中的三种<code>attributes</code>,<code>characterData</code>或<code>childList</code>,并且返回该类型</td></tr><tr><td><strong>attributeName</strong></td><td align="left">针对<code>attributes</code>类型的变化时,返回被修改属性的名字(或者null)</td></tr><tr><td><strong>attributeNamespace</strong></td><td align="left">针对命名空间的<code>attributes</code>类型的变化.返回被修改属性的命名空间,或者null</td></tr><tr><td><strong>oldValue</strong></td><td align="left">如果在<code>MutationObserverInit</code>对象中启用(<code>attributeOldValue</code>或<code>characterDataOldValue</code>为true).则<code>attributes</code>或<code>characterData</code>的变化事件会返回变化之值或数据.<code>childList</code>类型的变化始终将这个属性设置为null</td></tr><tr><td><strong>addedNodes</strong></td><td align="left">针对<code>childList</code>的变化,返回包含变化中添加节点的<code>NodeList</code>,没有节点被添加,返回空<code>NodeList</code>数组</td></tr><tr><td><strong>previousSibling</strong></td><td align="left">对于<code>childList</code>变化.返回被添加或移除的节点之前的兄弟节点,或者null</td></tr><tr><td><strong>nextSibling</strong></td><td align="left">对于<code>childList</code>变化,返回被添加或移除的节点之后的兄弟节点.或者null</td></tr><tr><td><strong>removedNodes</strong></td><td align="left">对于<code>childList</code>变化,返回被移除的节点(没有则为null)</td></tr></tbody></table><ul><li>第二个参数就是<code>MutationObserver</code>这个实例对象本身.可以使用实例上的方法.</li></ul><blockquote><p><a href="https://juejin.cn/post/7036733000565915655"><code>MutationObserver</code>的引用</a></p></blockquote><ul><li><code>MutationObserver</code>对要观察的目标节点的引用属于<strong>弱引用</strong>,所以不会妨碍垃圾回收程序回收目标节点</li><li>目标节点对于<code>MutationObserver</code>是强引用.如果目标节点从DOM中被移除,随后被垃圾回收,则关联的 MutationObserver 也会被垃圾回收</li></ul><blockquote><p><code>MutationRecord</code>的引用</p></blockquote><ul><li><p><code>MutationRecord</code>实例至少包含对已有DOM节点的一个引用,即里面的target属性,如果变化是<code>childList</code>类型,则会包含多个节点的引用</p></li><li><p>记录队列和回调处理的默认行为是耗尽这个队列,处理每个<code>MutationRecord</code>,然后让它们超出作用域并被垃圾回收</p><ul><li><code>MutationObserver</code>核心是异步回调与记录队列模型.为了在大量变化事件发生时不影响性能,每次变化的信息<strong>由oberver实例决定</strong>.保存在<strong>MutationRecord</strong>实例中,然后添加到记录队列</li><li>记录队列对每个 <strong>MutationObserver</strong> 实例都是唯一的,是所有 <strong>DOM</strong> 变化事件的有序列表(DOM变化事件都会以数组的形式存在MutationRecord中),多次修改的信息会在一次回调中执行</li></ul></li><li><p>有时候需要保存某个观察者的完整变化记录,那么就保存所有的<code>MutationRecord</code> 实例,也就会保存它们引用的节点,而这会妨碍这些节点被回收</p></li><li><p>如果需要尽快地释放内存,可以从每个<code>MutationRecord</code>中抽取出最有用的信息,保存到一个新对象,然后释放<code>MutationRecord</code>中的引用</p></li></ul><h3 id="ResizeObserver-尚在开发"><a href="#ResizeObserver-尚在开发" class="headerlink" title="ResizeObserver(尚在开发)"></a>ResizeObserver(尚在开发)</h3><ul><li><p><strong><code>ResizeObserver</code></strong> 构造器创新一个新的<code>ResizeObserver</code>对象,用于接收<code>Element</code>内容区域的改变或<code>SVGElement</code>的边界框改变改变</p></li><li><p>用途:更智能的响应式布局(取代@media)以及响应式组件</p></li><li><p>由于resize事件会监听视窗的变化而不是元素的大小发生变化.可能一秒内会触发几十次,导致性能问题</p></li></ul><h4 id="Resize实例方法"><a href="#Resize实例方法" class="headerlink" title="Resize实例方法"></a>Resize实例方法</h4><ol><li><code>observe(target,options?)</code>:用于指定观察一个指定的<code>Element</code>或者<code>SVGElement</code></li><li><code>disconnect()</code>:停止和取消目标对象上所有对<code>Element</code>或者<code>SVGElement</code>监视</li><li><code>unobserve()</code>:用于结束一个指定的<code>Element</code>或者<code>SVGElement</code>监视</li></ol><h4 id="创建Resize实例"><a href="#创建Resize实例" class="headerlink" title="创建Resize实例"></a>创建Resize实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ResizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>options<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>options是一个指定观察设置的可选参数对象.目前只有一个可设置的选项<ul><li><code>box</code>:设置观察者将以哪种盒子模型来观察变动</li><li>可以设置为<code>content-box</code>(默认值),<code>border-box</code>或者<code>device-pixel-content-box</code></li></ul></li></ul><h4 id="Resize回调函数"><a href="#Resize回调函数" class="headerlink" title="Resize回调函数"></a>Resize回调函数</h4><ul><li><p>只接收一个<code>ResizeObserverEntry</code>实例<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserverEntry">ResizeObserverEntry - Web API 接口参考(mozilla.org)</a></p></li><li><p>目前只接受两个属性</p><ol><li><code>target</code>:当前改变尺寸大小的元素的引用</li><li><code>contentRect</code>:对改变尺寸大小的元素的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRectReadOnly"><code>DOMRectReadOnly</code></a>引用(包含x,y(坐标),width,height,top,right,bottom,left属性)</li></ol></li></ul><h3 id="PerformanceObserver"><a href="#PerformanceObserver" class="headerlink" title="PerformanceObserver"></a>PerformanceObserver</h3><blockquote><p><strong><code>PerformanceObserver</code></strong> 用于监测性能度量事件,在浏览器的性能时间轴记录下一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry">performance entries</a> 的时候将会被通知</p></blockquote><ul><li><p>用途:更细颗粒的性能监控.分析新跟那个对业务的影响(交互快&#x2F;慢是否会影响销量)</p></li><li><p>尽可能使用<code>PerformanceObserver</code>,而不是通过<code>Performance</code>获取性能参数及指标</p><ul><li><p>避免不知道性能事件啥时候会发生,需要重复轮训<code>timeline</code>获取记录。</p></li><li><p>避免产生重复的逻辑去获取不同的性能数据指标</p></li><li><p>避免其他资源需要操作浏览器性能缓冲区时产生竞态关系</p></li></ul></li></ul><blockquote><p>实例方法和MutationsObserver一样,但是<code>observe()</code>只接受<code>options</code></p></blockquote><h4 id="创建Performance实例"><a href="#创建Performance实例" class="headerlink" title="创建Performance实例"></a>创建Performance实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> PerformanceObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>PerformanceObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"measure"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>options</code>只接收一个entryTypes的键,值为一个性能检测数组</li></ul><table><thead><tr><th align="left">属性</th><th align="left">别名</th><th align="left">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left"><code>frame</code>, <code>navigation</code></td><td align="left">&#96;PerformanceFrameTiming, PerformanceNavigationTiming</td><td align="left">URL</td><td align="center">文件的地址</td></tr><tr><td align="left"><code>resource</code></td><td align="left">PerformanceResourceTiming</td><td align="left">URL</td><td align="center">文件请求资源解析的URL.只有在资源加载完毕后才会创建</td></tr><tr><td align="left"><code>mark</code></td><td align="left">PerformanceMark</td><td align="left">DOMString</td><td align="center">通过调用创建标记使用的名称.会在资源获取开始时创建(<code>performance.mark(name)</code>)</td></tr><tr><td align="left"><code>measure</code></td><td align="left">PerformanceMeasure</td><td align="left">DOMString</td><td align="center">通过调用创建度量时使用的名称.会在对资源操作时创建(<code>performance.measure(name)</code>)</td></tr><tr><td align="left"><code>paint</code></td><td align="left">PerformancePaintTiming</td><td align="left">DOMString</td><td align="center">渲染时间点的信息接口.找出那些花费太多时间去绘制的区域</td></tr></tbody></table><h4 id="Performance回调函数"><a href="#Performance回调函数" class="headerlink" title="Performance回调函数"></a>Performance回调函数</h4><blockquote><p>回调函数只接受一个参数,该参数是<code>PerformanceObserverEntryList</code>对象.该对象有三个接口</p></blockquote><ol><li><code>getEntries()</code>:返回所有的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry"><code>PerformanceEntry</code></a>对象组成的数组</li><li><code>getEntriesByType(entryType)</code>:返回指定的<code>entryType</code>类型组合成的<code>PerformanceEntry</code>对象数组</li><li><code>getEntriesByName(name)</code>:返回通过指定的属性名(例如<code>performance.measure(name)</code>的name)组合成<code>PerformanceEntry</code>对象的数组</li></ol><blockquote><p><code>PerformanceEntry</code>对象</p></blockquote><ul><li>属性值:<ul><li><code>name</code>:该性能条目的名字.例如mark,measure通过指定名称name</li><li><code>entryType</code>:上述的options包含所有的entryType属性</li><li><code>startTime</code>:返回<code>PorformanceEntry</code>的第一个时间戳<ol><li><code>frame</code>:当页面开始加载时,返回的时间戳</li><li><code>mark</code>:当使用<code>performance.mark(name)</code>创建mark标记之后返回的时间戳</li><li><code>measure</code>:当使用<code>performance.measure(name)</code>创建measure标记之后返回的时间戳</li><li><code>navigation</code>:返回值为0的时间戳</li><li><code>resource</code>:返回浏览器开始获取资源的时间戳</li></ol></li><li><code>duration</code>:该资源的耗时时间</li></ul></li><li>方法:<code>toJSON()</code>:返回 JSON 格式数据的PerformanceEntry对象</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Measure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://zyjcould.ltd/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> performanceObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>entryType<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performanceObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resource'</span><span class="token punctuation">,</span> <span class="token string">'mark'</span><span class="token punctuation">,</span> <span class="token string">'measure'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'registered-observer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">measureClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">'button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ReportingObserver-实验"><a href="#ReportingObserver-实验" class="headerlink" title="ReportingObserver(实验)"></a>ReportingObserver(实验)</h3><blockquote><p><code>ReportingObserver()</code> 构造函数会创建一个新的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver"><code>ReportingObserver</code></a> 对象实,该实例可用于收集和获取reports</p></blockquote><ul><li>使用:将浏览器弃用的<code>API</code>或者运行时<strong>浏览器的干预行为</strong>由自己约束<ul><li>违反浏览器的选项时</li><li>JS的异常和错误(替代<code>window.onerror</code>)</li><li>未处理的promise的<code>reject</code>(替代<code>window.onunhandledrejection</code>)</li></ul></li></ul><blockquote><p>ReportingObserver实例方法和<code>MutationObserver</code>的实例方法一样.但是<code>observer()</code>不需要任何参数</p></blockquote><h4 id="创建Reporting实例"><a href="#创建Reporting实例" class="headerlink" title="创建Reporting实例"></a>创建Reporting实例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  types<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'deprecation'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  buffered<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> reportingObserver<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReportingObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>options提供两个属性,<code>types</code>和<code>buffered</code></li></ul><ol><li><p><code>types</code>:提供三个属性值</p><ul><li><code>deprecation</code>:浏览器运行时遇到弃用的api会打印这个选项</li><li><code>intervention</code>:浏览器自己的干预行为.可能遇到一些不安全的行为(如带有不安全的iframe,过时的api等)</li><li><code>crash</code>:浏览器崩溃时的行为</li></ul></li><li><p><code>buffered</code>:布尔值,如果时true,可以查看创建观察者之前生成的报告(使用于延迟加载的情况,不会错过页面加载之前发生的事情)</p></li></ol><h4 id="Reporting回调函数"><a href="#Reporting回调函数" class="headerlink" title="Reporting回调函数"></a>Reporting回调函数</h4><blockquote><p>提供两个参数,第一个参数是一个<code>reports</code>数组对象.同样也可以通过<code>takeRecords()</code>实例方法获取这些数组</p></blockquote><ul><li><code>report</code>对象有三个属性:<code>body</code>,<code>type</code>,<code>url</code><ul><li><code>type</code>:返回的是report类型,即options选项中的types</li><li><code>url</code>:返回的是生成report的文档</li><li><code>body</code>:返回report正文,包含详细的report对象,目前只有两种<strong>body对象</strong>(却决于type的返回值)<ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DeprecationReportBody"><code>DeprecationReportBody、InterventionReportBody</code></a><ul><li><code>id</code>:已弃用的功能或 API 的字符串</li><li><code>anticipatedRemoval</code>:Data对象,表示应从浏览器中要删除的日期.如果日期位置,返回null</li><li><code>message</code>:字符串,api的弃用说明.包括新功能的取代说明</li><li><code>sourceFile</code>:string类型,使用已弃用api的源文件路径.已知或其他返回null</li><li><code>lineNumber</code>:number类型,表示源文件中使用已弃用的功能的行.已知或其他返回null</li><li><code>columnNumber</code>:number类型,表示源文件中使用已弃用的功能的行&#x3D;列.已知或其他返回null</li></ul></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/CrashReportBody"><code>CrashReportBody</code></a><ul><li><code>reason</code>:表示崩溃原因的字符串.如果返回的是<code>oom</code>:浏览器内存不足.如果返回的是<code>unresponsive</code>:页面由于无响应而被终止</li></ul></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blob</title>
      <link href="/2022/03/07/blob/"/>
      <url>/2022/03/07/blob/</url>
      
        <content type="html"><![CDATA[<h2 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h2><blockquote><p>blob对象使用不可变的,原始数据的类文件对象.他的数据可以是文本或者二进制的格式进行读取,同时也可以转换成<code>ReadableStream</code>来读取操作</p></blockquote><ol><li>Blob不一定表示js的原生格式的数据.<code>File</code>接口基于Blob,继承了blob的功能,并将起扩展使其支持用于系统上的文件</li><li>要从其他非blob对象和数据构造一个 <code>Blob</code>,请使用 <code>Blob()</code> 构造函数</li><li>要创建一个 blob 数据的子集 blob,请使用<code>slice()</code>方法</li><li>要获取用户文件系统上的文件对应的Blob对象,请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a>文档</li></ol><h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob()"></a>Blob()</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> aBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span> array<span class="token punctuation">,</span> options <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>array</strong>是由:<code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 Array ,或者其他类似对象的混合体,它将会被放进 Blob</li><li><strong>options</strong>施一公可选的<code>BlobPropertyBag</code>字典:<ol><li><code>type</code>,默认值为 “”,为<strong>数组内容的MIME类型</strong></li><li><code>endings</code>,默认值为”transparent”,用于指定包含行结束符\n的字符串如何被写入<ul><li><code>&quot;native&quot;</code>,代表行结束符会被更改为适合宿主操作系统文件系统的换行符</li><li><code>&quot;transparent&quot;</code>,代表会保持blob中保存的结束符不变</li></ul></li></ol></li></ul><blockquote><p>属性(只读)</p></blockquote><ul><li><code>Blob.size</code>:Blob 对象中所包含数据的大小(字节)</li><li><code>Blob.type</code>:一个字符串,表明该Blob对象所包含数据的<strong>MIME</strong>类型.(未知则是<code>&quot;&quot;</code>)</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><code>blob.text()</code>:返回一个 promise 对象,以 <code>resolve</code> 状态返回一个以文本形式包含 blob 中数据的 <code>USVString</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"xhr"</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>blob<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>blob.stream()</code>:方法返回一个<strong>ReadableStream</strong>对象,读取它将返回包含在Blob中的数据</li><li><code>blob.slice()</code>:方法创建并返回一个新对象,该对象包含来自调用它的<code>blob</code>子集的数据<ol><li><code>start</code>可选.默认值为 0.<span style="color:red">Blob中的索引,指示要包含在新 Blob 中的第几个字节</span>.指定的值大于源Blob的大小,默认为0,并且不包含任何数据.如果指定负值,则会将其视为从 Blob 末尾到开头的偏移量.例如,-10 将是 Blob 中距离最后一个字节的第 10 个字节.</li><li><code>end</code>可选.缺省值为<strong>size</strong>lob 中的索引,指示 Blob 中的末尾字节(不包含此索引中的字节).如果指定负值,和start一样.</li><li><code>contentType</code>可选.默认值为空字符串.要分配给新 Blob 的内容类型</li></ol></li><li><code>blob.arrayBuffer()</code>:返回一个 Promise,该 Promise 将 blob 的内容解析为<code>ArrayBuffer</code>中包含的二进制数据</li></ul><blockquote><p>文件的下载.&lt;a&gt;中在h5中有一个新属性<code>download</code>(可以设置下载的名称),当链接的地址是同源的时候会进行下载</p></blockquote><ul><li>windows上的<code>URL.createObjectURL()</code>静态方法创建一个<code>DOMString</code>,其中返回值表示参数中给定对象的URL.</li><li>URL 生存期与创建文档的窗口中的文档相关联.新对象 URL 表示指定的<code>File对象</code>或<code>Blob 对象</code>.</li><li>要释放URL对象,请调用<code>revokeObjectURL()</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="color: red;font-size:5rem">hello world&lt;/div></span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="File"><a href="#File" class="headerlink" title="File()"></a>File()</h3><blockquote><p>首先了解<code>Filelist</code>,此类型是由HTML&lt;input type&#x3D;”file”&gt;元素的属性返回</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileItem<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>File对象:文件列表会放在在files数组中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fileItem'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>常情况下,<code>File</code>对象是来自用户在一个<input>元素上选择文件后返回的 <code>FileList</code> 对象</p></blockquote><ul><li>由于<code>File</code>对象是特殊类型的<code>Blob</code>,且可以用在任意的<code>Blob</code>类型的<code>context</code>中</li><li>File对象同样是构造函数(<code>new File()</code>).除了继承了Blob的方法属性以外,还有以下方法</li></ul><blockquote><p>属性</p></blockquote><ol><li><code>file.lastModified</code>:返回所引用文件最后修改日期, 为自 1970年1月1日0:00 以来的毫秒数</li><li><code>file.lastModified</code>返回当前文件的最后修改日期,如果无法获取到文件的最后修改日期,则使用当前日期来替代</li><li><code>file.name</code>:返回文件的名称.由于安全原因,返回的值并不包含文件路径.</li></ol><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader()"></a>FileReader()</h3><blockquote><p><code>FileReader</code>对象允许网络程序或异步读取存储在计算机上应用的数据文件(或原始数据用户)的内容,使用File或Blob 指定要读取的文件</p></blockquote><ul><li>通常情况下:文件对象可以是来自其中一个&lt;input&gt;元素上选择文件的<code>FileList</code>对象</li><li>同样这是一个构造函数<code>new FileReader()</code></li></ul><blockquote><p>属性</p></blockquote><ol><li><p><code>FileReader.error</code>:只读.表示在读取文件时发生的错误</p></li><li><p><code>FileReader.readyState</code>:只读.表示FileReader状态的数字</p><table><thead><tr><th>特征名</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>EMPTY</td><td>0</td><td>还没有加载数据</td></tr><tr><td>LOADING</td><td>1</td><td>数据正在被加载</td></tr><tr><td>DONE</td><td>2</td><td>已完成全部的读取请求</td></tr></tbody></table></li><li><p><code>FileReader.result</code>:只读.该属性仅在读取操作完成才有效,数据格式的使用后的方法来启动读取操作.</p></li></ol><blockquote><p>FileReader接口的事件</p></blockquote><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>中断</td></tr><tr><td>onerror</td><td>出错</td></tr><tr><td>onloadstart</td><td>开始</td></tr><tr><td>onprogress</td><td>正在读取</td></tr><tr><td>onload</td><td>成功读取</td></tr><tr><td>onloadend</td><td>读取完成,无论成功失败</td></tr></tbody></table><blockquote><p>FileReader接口有4个方法,其中3个用来读取文件,另一个用来中断读取.无论读取成功或失败,方法并不会返回读取结果,这一结果存储在result属性中</p></blockquote><table><thead><tr><th>方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>readAsArrayBuffer</td><td>file&#x2F;blob</td><td>读取指定Blob  或文件的内容.完成后<code>readyState</code>变为Done,并且触发<code>loadend</code>.<code>result</code>以<code>ArrayBufer</code>返回文件的数据</td></tr><tr><td>readAsText</td><td>file&#x2F;blob</td><td><code>result</code>以文本字符串的形式返回文件内容.其余与上个属性相同</td></tr><tr><td>readAsDataURL</td><td>file&#x2F;blob</td><td><code>result</code>以url的形式返回文件的数据(文件的数据会以base64的编码表示).其余与上个属性相同</td></tr><tr><td>abort</td><td>(none)</td><td>终端读取操作</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>  fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> fileReader<span class="token punctuation">.</span>result    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS装饰器</title>
      <link href="/2022/03/05/ts-zhuang-shi-qi/"/>
      <url>/2022/03/05/ts-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><p>装饰器是一种特殊的类型声明,他能被附加到类声明,方法,访问符,属性或者参数上,可以修改类的行为.装饰器使用<code>@experssion</code>的形式(更像是<code>defineProperty</code>的语法糖)<span style="color:red">他会在运行时被调用,被装饰器的声明信息做为参数传入</span></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(target: any) &#123;  console.log(&quot;hello world&quot;)&#125;@testclass A &#123;&#125;&#x2F;&#x2F;hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>类(Class)</li><li>类属性(Class Property)</li><li>类方法(Class Method)</li><li>类访问器(Class Accessor)</li><li>类方法参数(Class Method Parameter)</li></ol><ul><li>因此,应用装饰器很像组成一系列函数,非常像高阶函数或类.使用装饰器,我们可以轻松实现代理模式来减少代码</li><li>对于这几种装饰器,都可以使用工厂模式来达到传入想要修改属性的目的(或者其它)</li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a><a href="proxy.md">代理模式</a></h3><blockquote><p>代理模式是在访问真正对象时,提供额外的逻辑,检查对真实对象的操作.例如在对真实对象操作占用大量资源时,进行缓存,或者在调用对真实对象的操作之前检查前提条件</p></blockquote><ul><li>例如javascript中的proxy就是一个典型的代理模式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被读取</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被设置为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name<span class="token comment">//name 被读取</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token comment">//name 被设置为 lisi</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//lisi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义装饰器"><a href="#定义装饰器" class="headerlink" title="定义装饰器"></a>定义装饰器</h3><blockquote><p>由于TypeScript中的装饰器还在实验性语法,需要在<code>tsconfig.json</code>编译选项中开启</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装饰器的执行时机:装饰器对类的行为的改变,是<strong>代码编译时发生的</strong>(不是TypeScript编译,而是js在执行机中的编译阶段),并不是在运行是.<span style="color:red">本质就是装饰器是编译时执行的函数</span></li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul><li>类装饰器在类声明之前绑定,可以用来监视,或者修改或者替换类定义</li><li>在执行类装饰器函数的时候,会把绑定的类作为器唯一的参数传递给装饰器</li><li>参数:<strong>类的构造器</strong><ul><li>如果装饰器返回一个新的类,他会用新的类替换原有的类的定义</li><li><span style="color:red">类装饰器适合用于继承一个现有类并添加一些属性和方法</span></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any) &#123;    person.prototype.name &#x3D; &quot;jack&quot;    person.prototype.say &#x3D; function () &#123;      console.log(this.name)    &#125;  &#125;&#125;@testclass Person &#123;  name: string  constructor(name: string) &#123;    this.name &#x3D; name  &#125;  say() &#123;    console.log(&quot;lisi&quot;)  &#125;&#125;new Person(&quot;fw&quot;).say()&#x2F;&#x2F;fwconsole.log(new Person(&quot;fw&quot;).name)&#x2F;&#x2F;fw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>name属性并不会像想象中的那样变为:<strong>jack</strong>.那首先我们得明白他的初始化机制<ol><li>在Person类初始化之后,会先执行装饰器,而不是直接使用new关键字</li><li>name首先被初始化为<code>jack</code>,然后使用new产生对象,传入的<code>fw</code>会覆盖<code>jack</code>属性</li></ol></li></ul><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><ul><li><p>方法装饰器写在一个方法的声明之前</p></li><li><p>方法装饰器可以用来监视,修改或者替换方法定义</p></li><li><p>方法装饰器表达式会在运行时当作函数被调用,传入一下三个参数</p><ol><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong></li><li>被绑定方法的名字</li><li>被绑定方法的属性描述符</li></ol></li><li><p>方法装饰器更像是<code>defineProperty</code>的一个语法糖</p></li></ul><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>当试图获取属性时所返回的值</td><td>undefined</td></tr><tr><td>writable</td><td>该属性是否可写</td><td>false</td></tr><tr><td>enumerable</td><td>该属性在for in循环中是否会被枚举</td><td>false</td></tr><tr><td>configurable</td><td>该属性是否可被删除</td><td>false</td></tr><tr><td>set()</td><td>属性的更新操作所调用的函数</td><td>false</td></tr><tr><td>get()</td><td>获取属性值时所调用的函数</td><td>false</td></tr></tbody></table><ol><li>数据描述符:enumerable,configurable,value,writable</li><li>存取描述符:enumerable,configurable,set(),get()</li><li>如果定义了set(),get()之后,再定义value,writable会<span style="color:red">报错</span></li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(target: any, key: string, descriptor: PropertyDescriptor) &#123;  console.log(target)  &#x2F;&#x2F;&#123;  &#125;  console.log(key)&#x2F;&#x2F;say  console.log(descriptor)  &#x2F;&#x2F;&#123;  &#x2F;&#x2F;value: [Function (anonymous)],  &#x2F;&#x2F;writable: true,  &#x2F;&#x2F;enumerable: false,  &#x2F;&#x2F;configurable: true  &#x2F;&#x2F;&#125;  descriptor.value &#x3D; function () &#123;    console.log(&quot;test&quot;)  &#125;&#x2F;&#x2F;输出test,而不是&#96;我是fw&#96;&#125;class Person &#123;  @test  say() &#123;    console.log(&quot;我是fw&quot;)  &#125;  sayName() &#123;    console.log(&quot;我是zhangsan&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然使用工厂函数会是更好的选择</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function configurable(value: boolean) &#123;  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;    descriptor.configurable &#x3D; value;  &#125;;&#125;@configurable(false)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h4><ul><li>访问器装饰器声明在一个访问器的声明之前.</li><li>访问器装饰器应用于访问器的属性描述符并且可以用来监视,修改或替换一个访问器的定义</li><li>访问器装饰器表达式会在运行时当作函数被调用,传入下列3个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong>.</li><li>成员的名字.</li><li>成员的属性描述符.</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any, key: string, descriptor: PropertyDescriptor) &#123;    console.log(target) &#x2F;&#x2F;&#123;&#125;,原型对象上并没有任何属性    console.log(key) &#x2F;&#x2F;name.构造器的名称    console.log(descriptor)    &#x2F;&#x2F;&#123;    &#x2F;&#x2F;get: [Function: get name],    &#x2F;&#x2F;set: [Function: set name],    &#x2F;&#x2F;enumerable: false,    &#x2F;&#x2F;configurable: true    &#x2F;&#x2F;&#125;    descriptor.set &#x3D; function (value) &#123;      value &#x3D; value + &quot;fw&quot;      target.myName &#x3D; value    &#125;    descriptor.get &#x3D; function () &#123;      return target.myName    &#125;  &#125;&#125;class Person &#123;  private _name: string  myName!: string  constructor(name: string) &#123;    this._name &#x3D; name  &#125;  @test  get name() &#123;    return this._name  &#125;  set name(value) &#123;    this._name &#x3D; value  &#125;&#125;const p &#x3D; new Person(&quot;zhangsan&quot;)p.name &#x3D; &quot;lisi&quot;console.log(p.name)&#x2F;&#x2F;&quot;lisifw&quot;console.log(p)&#x2F;&#x2F; &#123; _name: &#39;zhangsan&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<span style="color:red">TypeScript不允许同时装饰一个成员的get和set访问器</span></li></ul><h4 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h4><ul><li>参数装饰器写在一个参数声明之前.</li><li>参数装饰器表达式会在运行时当作函数被调用,传入下列3个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong>.</li><li>参数所在的方法名称.</li><li>参数在参数列表中的索引.</li></ul></li></ul><blockquote><p>注意:属性装饰器,参数装饰器最常见的应用场景就是配合元数据(reflect-metadata),在不改变原有结构的同时添加一些额外的信息</p></blockquote><ul><li>但是元数据目前也是在提案中, 也还没有纳入正式的标准.所以对于装饰器而言, 我们只需要了解即可,因为提案中的所有内容将来都是有可能被修改的(可能会被修改)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test() &#123;  return function (target: any, proptyName: string, index: number) &#123;    console.log(target)&#x2F;&#x2F;&#123;&#125;    console.log(proptyName)&#x2F;&#x2F;say    console.log(index)&#x2F;&#x2F;1  &#125;&#125;class Person &#123;  say(age: number, @test() name: string): void &#123;    console.log(age + name)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><ul><li>属性装饰器写在一个属性声明之前</li><li>属性装饰器表达式会在运行时当作函数被调用,传入下列2个参数:<ul><li>对于静态成员来说是类的构造函数,对于实例成员是类的<strong>原型对象</strong></li><li>成员的名字</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(flag:string)&#123;  console.log(flag);&#x2F;&#x2F;hello  return (target: any, propertyKey: string) &#x3D;&gt;&#123;      console.log(target);&#x2F;&#x2F;class[person]      console.log(propertyKey);&#x2F;&#x2F;age  &#125;&#125;class Person&#123;  name:string;  @test(&#39;hello&#39;)  static age:number;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h3><blockquote><p>不同装饰器的执行顺序是固定的</p></blockquote><ol><li>实例成员:方法&#x2F;访问器&#x2F;属性装饰器-&gt;参数装饰器</li><li>静态成员:方法&#x2F;访问器&#x2F;属性装饰器-&gt;参数装饰器</li><li>类装饰器</li><li>构造器:参数装饰器</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f(key: string): any &#123;  console.log(&quot;evaluate: &quot;, key)  return function () &#123;    console.log(&quot;call: &quot;, key)  &#125;&#125;@f(&quot;Class Decorator&quot;)class C &#123;  @f(&quot;Static Property&quot;)  static prop?: number  @f(&quot;Static Method&quot;)  static method(@f(&quot;Static Method Parameter&quot;) foo: number) &#123;&#125;  constructor(@f(&quot;Constructor Parameter&quot;) foo: number) &#123;&#125;  @f(&quot;Instance Method&quot;)  method(@f(&quot;Instance Method Parameter&quot;) foo: number) &#123;&#125;  @f(&quot;Instance Property&quot;)  prop?: number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;实例方法-&gt;参数evaluate:  Instance Methodevaluate:  Instance Method Parametercall:  Instance Method Parametercall:  Instance Method&#x2F;&#x2F;实例属性evaluate:  Instance Propertycall:  Instance Property&#x2F;&#x2F;静态属性evaluate:  Static Propertycall:  Static Property&#x2F;&#x2F;静态方法evaluate:  Static Methodevaluate:  Static Method Parametercall:  Static Method Parametercall:  Static Method&#x2F;&#x2F;类装饰器-&gt;构造函数:参数装饰器evaluate:  Class Decoratorevaluate:  Constructor Parametercall:  Constructor Parametercall:  Class Decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于属性访问装饰器(动态&#x2F;静态)而言,会按照声明的顺序声明它们的装饰器的顺序</li></ul><blockquote><p>同样方法中不同参数的装饰器的执行顺序是相反的,最后一个参数的装饰器会最先被执行</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class C &#123;  method(@f(&quot;Parameter Foo&quot;) foo: number, @f(&quot;Parameter Bar&quot;) bar: number) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">evaluate:  Parameter Fooevaluate:  Parameter Barcall:  Parameter Barcall:  Parameter Foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一些可能用到的场景</p></blockquote><ul><li>Before&#x2F;After钩子.</li><li>监听属性改变或者方法调用.</li><li>对方法的参数做转换.</li><li>添加额外的方法和属性.</li><li>运行时类型检查.</li><li>自动编解码.</li><li>依赖注入.</li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2022/03/04/di-gui/"/>
      <url>/2022/03/04/di-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="递归-recursion"><a href="#递归-recursion" class="headerlink" title="递归(recursion)"></a>递归(recursion)</h2><blockquote><p>程序调用自身的技巧就被称之为递归(recursion)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function factorial(n: number): number &#123;  if (n &lt;&#x3D; 1) &#123;    return 1  &#125;  return n * factorial(n - 1)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从阶乘这里看出,递归是需要条件的</p></blockquote><ul><li>递归序要具备<strong>边界条件</strong>,<strong>递归前进段</strong>以及<strong>递归返回段</strong>.当边界条件不满足时,递归前进,当边界满足时,递归返回.例如阶乘中的<code>n&lt;=1</code>就是边界条件</li><li>如何使用递归  <ol><li>子问题须与原始问题为同样的事,使用递归化繁为简</li><li>不能无限制的调用本身,必须要有一个出口,化简为非递归的状态处理</li></ol></li></ul><blockquote><p>执行上下文栈</p></blockquote><ul><li>当执行一个函数的时候,就会创建一个执行上下文,并且压入执行上下文栈,当函数执行完毕,就会将函数从执行上下文栈中弹出.</li><li>当使用阶乘的时候,ts(或者是说js)会不停的创建执行上下文压入上下文栈中,对于内存而言,这是非常大的消耗</li><li>使用尾调用优化</li></ul><h3 id="尾调用-Tail-Call"><a href="#尾调用-Tail-Call" class="headerlink" title="尾调用(Tail Call)"></a><a href="https://www.ruanyifeng.com/blog/2015/04/tail-call.html">尾调用(Tail Call)</a></h3><blockquote><p>尾调用就是某个函数的最后一步调用另一个函数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>但是在最后一步调用函数之后不能有别的操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 调用函数之后有别的操作,即使语义完全一样</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用函数之后有别的操作</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>尾调用不一定出现在函数尾部,只要是最后一步操作即可</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>尾调用优化</p></blockquote><ul><li>函数调用会在内存中形成一个<code>调用记录</code>(调用帧).保存调用的位置何内部的变量信息</li><li>如果函数A的内部调用函数B,那么A 的调用记录上当,会形成一个调用记录B.等到B运行结束.才会将结果返回A.如果还有别的的调用记录栈,会依次形成一个调用栈</li><li>由于<strong>尾调用是函数</strong>的最后一步操作,所以是不需要保留外层函数的调用记录,因为调用位置,内部变量等都用不到了,只要直接使用内层函数的调用记录,取代外层函数的调用记录就可以了</li></ul><ol><li><p>尾调用的函数执行上下文的变化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 伪代码</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>g<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>非尾调用的函数执行上下文</p><ul><li>由于返回函数<code>g(x)+1</code>中的g(x)需要执行完之后(执行的环境就是f(x)的上下文),再加1</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>g<span class="token operator">></span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>那么可以使用尾调用来重写阶乘的递归<ul><li>由于每次调用之后,只会保留一个调用记录,所以复杂度只有O(1)</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function factorial(n: number, total: number): number &#123;  if (n &lt;&#x3D; 1) &#123;    return total  &#125;  return factorial(n - 1, n * total)&#125;console.log(factorial(4, 1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现尾递归"><a href="#实现尾递归" class="headerlink" title="实现尾递归"></a>实现尾递归</h4><blockquote><p>尾递归函数确保最后异步只调用自身.需要把所有的内部变量变成函数的参数(这里就可以使用柯里化来增加函数的复用)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数组合&amp;记忆</title>
      <link href="/2022/02/27/han-shu-zu-he-ji-yi/"/>
      <url>/2022/02/27/han-shu-zu-he-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="纯函数-Purity"><a href="#纯函数-Purity" class="headerlink" title="纯函数(Purity)"></a>纯函数(Purity)</h2><ol><li>应始终返回相同的值.不管调用该函数多少次,或者什么时候调用都是一样的</li><li>自包含(不包含全局变量)</li><li>不应修改程序的状态或引起副作用(修改全局变量)</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;纯函数const greet &#x3D; (name:string) &#x3D;&gt; &#96;hello, $&#123;name&#125;&#96;greet(&#39;world&#39;)&#x2F;&#x2F;不是纯函数,修改了外部的状态let greeting:stringconst greet &#x3D; (name:string) &#x3D;&gt;&#123;   greeting &#x3D; &#96;hello, $&#123;name&#125;&#96;&#125;greet(&#39;world&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>副作用(Side effects):如果函数与外部可变状态进行交互,则它就是具有副作用的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;Date对象就是一个很常见的具有副作用的函数const differentEveryTime &#x3D; new Date()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><blockquote><p>幂等性和纯函数还是有很大区别的,甚至说可以说是毫无无关系</p></blockquote><ol><li>幂等性函数可以具有副作用</li><li>函数执行多次返回相同的结果(<code>f(f(x))=f(x)</code>),则此函数具有幂等性</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">Math.abs(Math.abs(-10))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数组合-Function-Composing"><a href="#函数组合-Function-Composing" class="headerlink" title="函数组合(Function Composing)"></a>函数组合(Function Composing)</h2><blockquote><p>接收多个函数作为参数,从右到左,一个函数的输入为以一个函数的输出</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const compose &#x3D;  (f: Function, g: Function): Function &#x3D;&gt;  (a: Function): Function &#x3D;&gt;    f(g(a))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>做一个反转函数,并且获取第一个索引的例子</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;不能确定返回索引的类型,可以使用泛型,这里就用any了function first&lt;T&gt;(arr: T[]): any &#123;  return arr[0]&#125;function reverse&lt;T&gt;(arr: T[]): T[] &#123;  return arr.reverse()&#125;let last &#x3D; compose(first, reverse)console.log(last([1, 2, 3, 4, 5]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然redux给出了一个更好的实现(将函数的个数情况也考虑周全了)</p></blockquote><ul><li>其实还有一个问题就是在闭包中写泛型其实是没有检查的效果</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function compose(...fns: Function[]) &#123;  if (fns.length &#x3D;&#x3D;&#x3D; 0) &#123;    return (arg: Function) &#x3D;&gt; arg  &#125;  if (fns.length &#x3D;&#x3D;&#x3D; 1) &#123;    return fns[0]  &#125;  return fns.reduce(    (a, b) &#x3D;&gt;    &#x2F;&#x2F;Writing a type here won&#39;t do any good      &lt;T&gt;(...args: T[]): Function &#x3D;&gt;        a(b(...args))  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pointfree"><a href="#Pointfree" class="headerlink" title="Pointfree"></a><a href="https://www.ruanyifeng.com/blog/2017/03/pointfree.html">Pointfree</a></h3><blockquote><p>这是函数式编程的答案,利用函数组合和柯里化可以达到一个很好的函数式效果</p></blockquote><ul><li><a href="https://ramdajs.com/">ramda</a>中所有的函数都支持柯里化</li><li>阮老师的教程:<a href="https://www.ruanyifeng.com/blog/2017/03/ramda.html">https://www.ruanyifeng.com/blog/2017/03/ramda.html</a></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//ramda</span>fn <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>定义<code>f1</code>,<code>f2</code>,<code>f3</code>可以推算出<code>fn</code>.整个过程中.根本不需要知到其中的参数变化</li><li>换一种当时可以理解为,只需要将一些简单的步骤合成到一起,定义成一种参数无关的合成运算</li><li>这种风格就是<code>Pointfree</code>.例如上面的例子就是一个<code>Pointfree</code></li></ul><blockquote><p><code>Pointfree</code>的本质就是使用一些通用的函数,组合除各种复杂的运算.shang层运算不直接操作数据</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Iperson &#123;  name: string  role: string&#125;const data: Iperson[] &#x3D; [  &#123; name: &quot;张三&quot;, role: &quot;worker&quot; &#125;,  &#123; name: &quot;李四&quot;, role: &quot;worker&quot; &#125;,  &#123; name: &quot;王五&quot;, role: &quot;manager&quot; &#125;,]type Iper &#x3D; keyof Ipersonconst isWorker &#x3D; (s: string) &#x3D;&gt; s &#x3D;&#x3D;&#x3D; &quot;worker&quot;&#x2F;&#x2F;定义查找角色的函数,在这里嵌套会增加耦合const prop &#x3D; (p: Iper, obj: Iperson) &#x3D;&gt; isWorker(obj[p])&#x2F;&#x2F;指定读取role的值const propRole &#x3D; curry(prop)(&quot;role&quot;)data.filter(propRole)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不适用<code>compose Function</code>会大大增加函数的耦合度.这就可以使用函数组合的思想降低耦合,避免洋葱模型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const prop &#x3D; (p: Iper, obj: Iperson) &#x3D;&gt; obj[p]console.log(data.filter((_, index) &#x3D;&gt; compose(isWorker, propRole)(data[index])))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数记忆"><a href="#函数记忆" class="headerlink" title="函数记忆"></a>函数记忆</h2><blockquote><p>只要把参数和对应的结果数据存到一个对象中,调用时,判断参数对应的数据是否存在,存在就返回对应的值</p></blockquote><ul><li>如果需要大量重复的计算又依赖于之前的计算,可以考虑函数记忆</li><li>利用Map,Set或者是数组做字典都是一种函数记忆</li><li>谨慎使用,消耗性很大</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const memoize &#x3D; function (fn: Function, hasher?: Function) &#123;  let cache: any &#x3D; &#123;&#125;  const menoize &#x3D; function (...args: any[]) &#123;    const address &#x3D; &quot;&quot; + (hasher ? hasher.apply(null, args) : args)    if (!cache[address]) &#123;      cache[address] &#x3D; fn.apply(null, args)    &#125;    return cache[address]  &#125;  return menoize&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然,抄袭<code>underscore</code>的使用ts重够了一下很快</p></blockquote><ul><li>当没有hansher(作为键的函数时),会让args作为键</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let add &#x3D; function (a: number, b: number, c: number) &#123;  return a + b + c&#125;let memoizedAdd &#x3D; memoize(add)console.log(memoizedAdd(1, 2, 3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试一下是,没有问题的.但是我们如果想要使用一个生成键的函数<code>hasher</code></p></blockquote><ul><li>如果并不想要数组的全部内容,可以使用slice截取数组中的第一个作为键</li><li>当然也可以使用别的函数作为键</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const memoizedAdd &#x3D; memoize(add, function () &#123;  const args &#x3D; Array.prototype.slice.call(arguments,0,1)  return JSON.stringify(args)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器与生成器</title>
      <link href="/2022/02/26/die-dai-qi-yu-sheng-cheng-qi/"/>
      <url>/2022/02/26/die-dai-qi-yu-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="迭代-iteration"><a href="#迭代-iteration" class="headerlink" title="迭代(iteration)"></a>迭代(iteration)</h2><blockquote><p>循环时迭代的基础:循环可以指定迭代的次数,以及每次需要执行什么操作</p></blockquote><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote><p>把实现了正式的<code>Iterable</code>接口的,并且可以通过迭代器<code>Iterator</code>使用的称做可选迭代器</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;集合的元素可以按插入顺序访问每一个元素let set &#x3D; new Set&lt;number&gt;().add(1).add(2).add(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>实现可迭代协议(Iterable接口):要求同时具备两种能力</p></blockquote><ul><li>支持迭代的自我识别能力和创建实现<code>Iterator</code>接口的对象能力</li><li>在ESMA中,必须暴露一个属性<code>Symbol.iterator</code>作为默认迭代器</li><li>这个默认的迭代器属性必须使用一个迭代器工厂函数(调用时返回一个迭代器)</li></ul><blockquote><p>实现<code>Iterable</code>接口的类型</p></blockquote><ul><li>string</li><li>Array</li><li>Map</li><li>Set</li><li>arguments</li><li>NodeList等DOM集合</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;可以通过这种方式是否存在默认的迭代器属性console.log([][Symbol.iterator])&#x2F;&#x2F;[Function: values]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代器对象的原生语言</p></blockquote><ul><li><p><code>for...of</code>循环</p></li><li><p>数组解构</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const num:number[] &#x3D; [1,2,3];let [a,b,c] &#x3D; num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>扩展操作符<code>...</code></p></li><li><p><code>Array.from()</code></p></li><li><p><code>new Set()</code></p></li><li><p><code>new Map()</code></p></li><li><p><code>Promise.all()</code>接收promise组成的可迭代对象</p></li><li><p><code>Promise.race()</code>接收有promise组成的可迭代对象</p></li><li><p><code>yield*</code>操作符,在生成器中使用</p></li></ul><blockquote><p>迭代器使用<code>next()</code>方法在可迭代对象中遍历数据.</p></blockquote><ul><li>每成功调用<code>next()</code>都会返回一个<code>IteratorResult</code>对象,其中包含迭代器返回的下一个值</li><li><code>IteratorResult</code>包含两个属性:<code>done</code>和<code>value</code>.<ul><li>done是一个布尔值,表示是否<code>next()</code>还可以再次调用取得下一个值</li><li>value是包含可迭代对象的下一个值(<code>done:false</code>或者undefined),如果done位true表示结束</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let num: number[] &#x3D; [1, 2]let arr &#x3D; num[Symbol.iterator]()console.log(arr.next())&#x2F;&#x2F;&#123; value: 1, done: false &#125;console.log(arr.next())&#x2F;&#x2F;&#123; value: 2, done: false &#125;console.log(arr.next())&#x2F;&#x2F;&#123; value: undefined, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只要迭代器对象到达<code>done:true</code>状态,后续调用<code>next</code>都是一样的值</li></ul><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote><p>生成器可以在一个函数块内暂停和恢复代码执行的功能(自定义迭代器或者实现协程)</p></blockquote><ul><li>一般只需要在函数名前加一个<code>*</code>表示他是一个生成器.只要是可以定义函数的地方,就可以定义生成器</li><li>调用生成器函数会返回一个<strong>生成器对象</strong>.<ul><li>生成器对象一开始处于暂停执行的状态.与迭代器相似</li><li>生成器对象同样实现了<code>Iterator</code>接口,因此具有next()方法</li><li>在迭代器中,value值是函数的返回值.默认是undefined</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  return &quot;value&quot;&#125;console.log(gen().next)&#x2F;&#x2F;[Function: next]console.log(gen().next())&#x2F;&#x2F;&#123; value: &#39;value&#39;, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">生成器只会在初次调用<code>next()</code>方法后执行</span>.直接调用(例如<code>gen()</code>)并不会执行</li><li>生成器对象实现了<code>Iterable</code>接口,默认的迭代器是自引用的</li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>yield可以让生成器停止或者开始执行</p></blockquote><ul><li>生成器函数在遇到<code>yield</code>关键字之前会正常执行.遇到关键字之后,停止执行,函数作用域的状态会被保留</li><li>停止执行的生成器函数只能通过在生成器对象上调用<code>next()</code>方法来恢复执行</li></ul><blockquote><p>通过<code>yield</code>关键字退出的生成器函数会处于<code>done:false</code>状态.而<code>return</code>关键字退出会处于<code>done:true</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield &quot;done&quot;  yield &quot;data&quot;  return &quot;value&quot;&#125;let genObj &#x3D; gen()console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;done&#39;, done: false &#125;console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;data&#39;, done: false &#125;console.log(genObj.next())&#x2F;&#x2F;&#123; value: &#39;value&#39;, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用yield实现输入输出</p></blockquote><ul><li>yield除了作为中间返回语句使用,还可以作为函数的中间参数使用.</li><li>上一次上生成器函数暂停的<code>yield</code>关键字会接收到传给<code>next()</code>方法的第一个值</li><li>但是第一次调用next()传入的值不会被使用,因为第一次是为了开始执行生成器函数</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  console.log(yield)  console.log(yield)&#125;let genObj &#x3D; gen()genObj.next(1)&#x2F;&#x2F;不会打印任何东西genObj.next(2)&#x2F;&#x2F;2genObj.next(3)&#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现输入和输出</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  return yield 1&#125;let genObj &#x3D; gen()console.log(genObj.next(3))&#x2F;&#x2F;&#123; value: 1, done: false &#125;console.log(genObj.next(2))&#x2F;&#x2F;&#123; value: 2, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>因为函数需要对整个表达式求值才能确定需要返回的值,所以在遇到yield关键字暂停并执行计算要产生的值<code>1</code></li><li>下一次调用<code>next()</code>会传入<code>2</code>,作为交给<code>yield</code>的值.确定位本次生成器函数要返回的值</li></ol><blockquote><p>产生可迭代对象:可以使用<code>*</code>加强yield的行为,让他可以迭代一个可迭代对象,从而一次产出一个值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield* [1, 2, 3]&#125;for (let x of gen()) &#123;  console.log(x)&#125;&#x2F;&#x2F;1  &#x2F;&#x2F;2  &#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际上<code>yield*</code>只是将一个可迭代的对象序列化为一连串的可以单独产出的值,所以这跟把<code>yield</code>凡在一个有循环里一样</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (let x of [1,2,3])&#123;    yield x  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提前终止生成器</p></blockquote><ul><li>一个实现<code>Iterator</code>接口的对象一定有next()方法,还有一个可选的<code>return()</code>方法用于提前终止迭代器.生成器除了有这两个方法,还有第三个方法<code>throw()</code></li></ul><ol><li><p><code>return()</code>:强制生成器进入关闭状态.提供给return()方法的值,就是迭代器对象的值</p><ul><li>在ts中,如果<code>reuturn()</code>需要传入参数,那么返回值return要定义好类型才能使用,否则<code>void</code></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  yield 1  return 3&#125;console.log(gen().return(4))&#x2F;&#x2F;&#123; value: 1, done: true &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>throw</code>:会在暂停的时候将一个提供的错误注入到生成器对象.如果错误未被处理,生成器将会关闭</p><ul><li>如果生成器函数内部处理了这个错误,那么生成器就不会关闭,而且还可以恢复执行</li><li>不过错误也会跳过相对应的yield.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (const x of [1, 2, 3]) &#123;    try &#123;      yield x    &#125; catch (e) &#123;&#125;  &#125;&#125;const g &#x3D; gen()console.log(g.next())&#x2F;&#x2F;&#123; value: 1, done: false &#125;g.throw(&quot;foo&quot;)console.log(g.next())&#x2F;&#x2F;&#123; value: 3, done: false &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>如果生成器对象还没有被执行,那么调用throw()抛出的错误不会在函数内部被捕获.因为这相当于在函数块外抛出了错误</p><ul><li>以下依然会抛出错误</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function* gen() &#123;  for (const x of [1, 2, 3]) &#123;      try &#123;        yield x      &#125; catch (e) &#123;&#125;      yield x    &#125;&#125;const g &#x3D; gen()g.throw(&quot;foo&quot;)console.log(g.next())console.log(g.next())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>最后看一下Generator接口的写法</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;Generatorinterface Generator&lt;T &#x3D; unknown, TReturn &#x3D; any, TNext &#x3D; unknown&gt; extends Iterator&lt;T, TReturn, TNext&gt; &#123;    next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;    return(value: TReturn): IteratorResult&lt;T, TReturn&gt;;    throw(e: any): IteratorResult&lt;T, TReturn&gt;;    [Symbol.iterator](): Generator&lt;T, TReturn, TNext&gt;;&#125;&#x2F;&#x2F;Iteratorinterface Iterator&lt;T, TReturn &#x3D; any, TNext &#x3D; undefined&gt; &#123;    next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;    return?(value?: TReturn): IteratorResult&lt;T, TReturn&gt;;    throw?(e?: any): IteratorResult&lt;T, TReturn&gt;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Generator</code>泛型接收三个类型<ul><li><strong>T</strong>:yield后的参数类型</li><li><strong>Treturn</strong>:return后的返回值类型</li><li><strong>TNext</strong>:next()函数中的实参类型,不过如果指定了类型,可以不写,或者必须写对应的类型</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化&amp;偏函数&amp;惰性函数</title>
      <link href="/2022/02/24/han-shu-ke-li-hua-pian-han-shu-duo-xing-han-shu/"/>
      <url>/2022/02/24/han-shu-ke-li-hua-pian-han-shu-duo-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><blockquote><p>什么是函数柯里化?</p><p>在计算机中,柯里化是将使用多个参数的一个函数转换成一些列使用一个参数的函数</p></blockquote><ul><li>例如:</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(a:number,b:number) &#123;  return a+b&#125;&#x2F;&#x2F;执行add函数,依次传入两个参数add(1,2)&#x2F;&#x2F;如果有一个carry函数,可以做到柯里化let addCurry &#x3D; curry(add)addCurry(1)(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>柯里化的用途可以理解为参数复用,本质上是降低通用性,提高适用性</p></blockquote><ul><li>例如有一段这样的数据</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const person &#x3D; [&#123;name:&quot;zhangsan&quot;&#125;,&#123;name:&quot;lisi&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>使用map函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let names &#x3D; person.map(function(item)&#123;  return item.name&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果对象中有多个属性,那就要写多个map才行</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let prop &#x3D;curry((key,obj)&#x3D;&gt;&#123;  obj[key]&#125;)let name &#x3D; person.map(prop(&quot;name&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>这样就体现出柯里化的重要性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function curry&lt;T&gt;(fn: Function): Function &#123;  return function (...args: T[]) &#123;    if (args.length &lt; fn.length) &#123;      return curry(fn.bind(this, ...args))    &#125; else &#123;      return fn(...args)    &#125;  &#125;&#125;function add(a: number, b: number, c: number) &#123;  return a + b + c&#125;let curryAdd &#x3D; curry(add)console.log(curryAdd(1, 3)(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fn.length</code>就是被柯里化函数的</li><li><code>...args</code>是被柯里化函数的返回值(curryAdd)传入的个数.理想状态是只传一个</li><li><code>curryAdd</code>本质上来讲就是curry函数的返回值,只有curryAdd有实参,args才会有值</li></ul><ol><li><p>执行<code>let curryAdd = curry(add)</code>,返回一个闭包</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function (...args: T[]) &#123;    if (args.length &lt; fn.length) &#123;      return curry(fn.bind(null, ...args))    &#125; else &#123;      return fn(...args)    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行<code>curryAdd(1,3)</code>当前的<code>fn.length</code>就是add形参的数量3大于实参的数量2</p><ul><li>同样返回了和1一样的一个闭包,<span style="color">但是fn发生了改变,传入的是<code>fn.bind(null, ...args)</code></span></li><li>执行一个递归,由于bind函数是柯里化的,这里的<code>fn.length</code>在结束的时候就变成了1</li></ul></li><li><p>执行<code>[curryAdd(1,3)](3)</code>当前的<code>fn.length</code>由于是会执行else的内容</p><ul><li><code>add.bind(this, 1 , 3)(3)</code>:这样就利用bind完成了一个柯里化的过程</li></ul></li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type IPerson &#x3D; &#123;  name: string  age: number&#125;const person: IPerson[] &#x3D; [  &#123; name: &quot;zhangsan&quot;, age: 12 &#125;,  &#123; name: &quot;lisi&quot;, age: 100 &#125;,]let prop &#x3D; curry((key: keyof IPerson, obj: IPerson) &#x3D;&gt; &#123;  return obj[key]&#125;)console.log(person.map(prop(&quot;name&quot;)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="偏函数-Partial-Function"><a href="#偏函数-Partial-Function" class="headerlink" title="偏函数(Partial Function)"></a>偏函数(Partial Function)</h2><blockquote><p>在计算机科学中，偏函数是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p><p>什么是元？元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(a, b) &#123;    return a + b;&#125;&#x2F;&#x2F; 执行 add 函数，一次传入两个参数即可add(1, 2) &#x2F;&#x2F; 3&#x2F;&#x2F; 假设有一个 partial 函数可以做到局部应用var addOne &#x3D; partial(add, 1);addOne(2) &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>和函数柯里化的区别</p></blockquote><ol><li>柯里化是将一个多参数函数转换成多个单参数函数,也就是将一个n元函数转换成n个一元函数</li><li>偏函数则是固定一个函数的一个或者多个参数,也就是将一个n元函数转换成一个n-x元函数</li></ol><ul><li>柯里化和偏函数的关系:<strong>柯里化通过偏函数来实现</strong></li></ul><blockquote><p>当然也可以使用<code>bind</code>函数来实现偏函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test(a: number, b: number, c: number) &#123;  return a + b + c&#125;let bindOne &#x3D; test.bind(null, 1)console.log(bindOne(2, 3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是这会直接改变this的指向</li></ul><blockquote><p>手动实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function partical(fn: Function, ...args: any[]): Function &#123;  return function (...moreArgs: any[]) &#123;    return fn(...args, ...moreArgs)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><blockquote><p>惰性函数就是说函数执行一次后，之后调用函数都是相同的作用，直接返回第一次执行函数.很多时候只需要执行一次，因为之后每次调用函数执行的结果都一样。所以如果函数语句不必每次执行，我们可以使用称之为惰性函数的技巧来进行优化。</p></blockquote><ul><li>如果我们现在需要写一个 foo 函数，这个函数返回首次调用时的 Date 对象，注意是首次</li></ul><ol><li><p>闭包的写法</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let foo: () &#x3D;&gt; Function &#x3D; function () &#123;  let time: Date &#x3D; new Date()  return function () &#123;    if (time) time    return time  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>惰性函数:惰性函数就是解决每次都要进行判断的这个问题，解决原理很简单，重写函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let foo: () &#x3D;&gt; Function | Date &#x3D; function () &#123;  let time: Date &#x3D; new Date()  foo &#x3D; function () &#123;    return time  &#125;  return foo()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="惰性求值-Lazy-evaluation"><a href="#惰性求值-Lazy-evaluation" class="headerlink" title="惰性求值(Lazy evaluation)"></a>惰性求值(Lazy evaluation)</h3><blockquote><p>按需求值机制,只有当需要计算所得值时才会计算</p></blockquote><ul><li>利用生成器机制可以很容易写出</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const rand &#x3D; function* () &#123;  while (true) &#123;    yield Math.random()    &#125; &#125;const randIter &#x3D; rand()randIter.next()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie,session和token</title>
      <link href="/2022/02/23/cookie-session-he-token/"/>
      <url>/2022/02/23/cookie-session-he-token/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于HTTP是无状态的,当关闭网页的时候,服务器并不能意识到还是你来访问的</p></blockquote><ul><li><p>这就涉及到如何让浏览器记住这些信息(例如用户的账号和密码)</p><ol><li>保证密码和账号不易被破解并且完美保存</li><li>保证http无状态的问题,并且在每一次请求中加入这些信息保持登录</li></ol></li><li><p>可以事先每次http请求都自带数据给服务器的技术–&gt;cookie</p></li></ul><h2 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie&amp;Session"></a>Cookie&amp;Session</h2><p><img src="./cookie.png" alt="cookie"></p><ol><li>浏览器发送http请求后,服务器会进行cookie设置.<code>Set-Cookie</code></li><li><code>Cookie</code>中有<code>value</code>和<code>name</code>两个重要属性</li><li>浏览器会将cookie保存起来,并且在以后的每一个请求自动附上这个Cookie</li></ol><ul><li>并且打开浏览器就可以看到cookie,并且如果将用户密码等重要信息放在浏览器就很不安全</li></ul><blockquote><p>Session,浏览器和服务器是在进行会话,然而比较模糊的就是会话时间.因为关闭浏览器的行为可能是不小心的</p></blockquote><p><img src="./session.png" alt="session"></p><ul><li>所以很多网站会给每个用户的会话设定会话时间(结束会话的时间)和唯一的ID,并且这些session一般都是存储在数据库中的</li></ul><ol><li>当使用用户名密码发送到服务器,认证成功后,会创建一个SessionID和会话结束时间,还有其它参数</li><li>服务器会将<code>SessionID和会话结束时间</code>包含在cookie中发送给浏览器<ul><li>服务器在发送cookie之前会对这个含有Session ID的cookie进行签名</li></ul></li><li>浏览器会将包含SessionID的Cookie进行保存(并没有保存账号密码)</li></ol><ul><li>浏览器会利用cookie的特点,每次访问都会带有sessionid,直到有效期失效后会自行删除cookie</li></ul><blockquote><p>如果有大量用户访问服务器的时候,服务器依旧使用基于cookie的session,就需要存储大量<code>SessionID</code>在服务器中.</p><p>如果有多台服务器的情况,服务器中的SessionID还要分配给其它服务器才能保证用户避免再次输入用户名和密码</p></blockquote><h2 id="JWT-Json-Web-Token"><a href="#JWT-Json-Web-Token" class="headerlink" title="JWT(Json Web Token)"></a>JWT(Json Web Token)</h2><p><img src="./token.png" alt="Token"></p><ol><li>用户第一次登录网页,服务器会生成一个JWT,服务器不需要保存JWT,只需要保存<strong>JWT签名的密文</strong></li><li>接着把JWT发送给服务器,浏览器可以以<code>Cookie</code>或者<code>Storage</code>的形式进行存储</li></ol><ul><li>token验证登录<blockquote><p>三段式加密字符串:header(算法).payload(数据).signature(签名信息)</p><blockquote><ul><li>第一段:头,签证:安全信息验证,你的口令,进行不可逆加密</li><li>第二段:你要保存的信息:将<code>header</code>和<code>payload</code>base64编码后进行算法运算得到签名信息</li><li>第三段:额外信息:不可逆加密</li></ul><blockquote><p> 这一段字符串由后端发给前端.在登陆过以后,生成一个token给前端,前端保存这个token如果前端需要登录后查看页面,或者登陆后发送的请求,只要你把token带回来,解密一下</p></blockquote></blockquote></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Session是由服务器诞生并且保存在服务器中的,由服务器主导</li><li>Cookie是一种数据载体,把session保存在cookie中,送到客户端中,就可以跟随每个http发送</li><li>Token诞生在服务器,但保存在浏览器中,可以放在Cookie或者Storage中.持有Token就像持有令牌可以访问服务器</li></ol>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github-cli</title>
      <link href="/2022/02/21/github-cli/"/>
      <url>/2022/02/21/github-cli/</url>
      
        <content type="html"><![CDATA[<h2 id="githubCli"><a href="#githubCli" class="headerlink" title="githubCli"></a><a href="https://cli.github.com/">githubCli</a></h2><blockquote><p>简单来讲,gihub是一个基于可视化的操作存储库.而githubcli就是使用命令操作存储库</p></blockquote><ul><li><p>下载完之后,可能有一系列玄学问题.重启一下可以解决80%</p></li><li><p>使用<code>gh [cli命令] -help</code>可以查询使用方法</p></li></ul><h3 id="gh-auth"><a href="#gh-auth" class="headerlink" title="gh auth"></a>gh auth</h3><blockquote><p>githubcli通过帮助您通过基于浏览器的<code>OAuth</code>登录GitHub或接受个人访问令牌,此交互式命令可初始化身份验证状态</p></blockquote><ul><li><p><code>-h,--hostname &lt;string&gt;</code>:要用于进行身份验证的 GitHub 实例的主机名</p></li><li><p><code>gh auth login</code>:授权githubcli登录这个账户</p></li><li><p><code>gh auth logout</code>:登出github</p></li><li><p><code>gh auth refresh</code>:刷新github账户</p></li><li><p><code>gh auth status</code>:查看githubcli登录状态</p><ul><li><code>-t</code>:显示身份验证令牌</li></ul></li></ul><h3 id="gh-ssh-key"><a href="#gh-ssh-key" class="headerlink" title="gh ssh-key"></a>gh ssh-key</h3><blockquote><p><code>gh ssh-key add [&lt;key-file&gt;] [flags]</code>:将 SSH 密钥添加到您的 GitHub 帐户</p></blockquote><ul><li><code>-t,--title &lt;string&gt;</code>:新密钥的标题</li></ul><blockquote><p><code>gh ssh-key list</code>:列出 GitHub 帐户中的 SSH 密钥</p></blockquote><h3 id="browse"><a href="#browse" class="headerlink" title="browse"></a>browse</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gh browse <span class="token punctuation">[</span><span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>path<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-b,--branch &lt;string&gt;</code>:选择其他分支打开浏览器</li><li><code>-c,--commit</code>:打开上次提交</li><li><code>-n,--no-browser</code>:打印目标URL,不打开浏览器</li><li><code>-p,--projects</code>:开放存储库项目</li><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>:使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li><li><code>-s,--settings</code>:打开存储库设置</li><li><code>-w,--wiki</code>:开放存储库维基</li></ul><blockquote><p>如果想要打开其它存储库,需要使用<code>-R</code>.如果直接接url,<code>gh browse url</code>,如果是相对url会叠加到当前库的url中</p></blockquote><ul><li>正确的使用方法是:<code>gh browse -R Jack-Zhang-1314/JS_Webpack</code></li><li>并且以上的flags是可以叠加的</li></ul><h3 id="codespace-代码空间"><a href="#codespace-代码空间" class="headerlink" title="codespace(代码空间)"></a><a href="https://docs.github.com/en/codespaces/getting-started/quickstart">codespace(代码空间)</a></h3><blockquote><p>代码空间是浏览器中的集成开发环境(IDE).代码空间包括为特定仓库开发所需的一切,其中包括具有语法突出显示和自动完成功能的文本编辑器,终端,调试工具和Git命令,所有这些都集成在GitHub中.您也可以在代码空间中安装<code>Visual Studio Code</code>扩展以添加更多功能.</p></blockquote><ul><li>代码空间使开发人员更容易加入新公司或开始为开源项目做出贡献. 项目维护员可以配置仓库,以便在为仓库创建代码空间时自动包含项目的依赖项. 减少配置环境所用的时间,可以更快地开始编码.</li><li>代码空间允许您在云端开发,而不是本地开发. 开发者可以随时随地任何机器(包括平板电脑或 Chromebooks)上参与项目开发,无需维护知识产权的本地副本.</li></ul><blockquote><p>目前代码空间只有付费的组织才可以使用.个人和自由组织暂时都不能使用</p></blockquote><h3 id="gh-config"><a href="#gh-config" class="headerlink" title="gh config"></a>gh config</h3><ul><li><code>gh config get &lt;key&gt; [flags]</code>:输出指定配置的键<ul><li><code>-h,--host &lt;string&gt;</code>获取主机设置</li></ul></li><li><code>gh config list</code>:输出所有的配置</li><li><code>gh config set &lt;key&gt; &lt;value&gt; [flags]</code>:使用给定键的值设置配置<ul><li><code>-h,--host &lt;string&gt;</code>获取主机设置</li></ul></li></ul><h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a><a href="https://gist.github.com/">Gist</a></h3><blockquote><p>GitHub有一个隐藏得很好的衍生产品github Gist.这是一种更快,更简单的在线共享代码的方式.与Pastebin一样,Gist是一个通过互联网共享文本的工具.但它提供了额外的功能,并且特别得到了Git强大的版本控制的支持</p></blockquote><ul><li><p><code>gh gist clone &lt;gist&gt; [&lt;directory&gt;] [-- &lt;gitflags&gt;...]</code>:克隆gist</p><ul><li>例如<code>gh gist clone git@gist.github.com:ea351c91acc4f4b0395c6e6241b866bf.git</code></li></ul></li><li><p><code>gh gist create [&lt;filename&gt;... | -] [flags]</code>:创建一个gist</p><ul><li><code>-d,--desc &lt;string&gt;</code>:gist的说明</li><li><code>-f,--filename &lt;string&gt;</code>:创建gist时传入的文件</li><li><code>-p,--public</code>:使gist公开,默认是机密的</li><li><code>-w,--web</code>:创建gist并打开Web浏览器</li><li>例如<code>gh gist create test.md -p -w</code></li></ul></li><li><p><code>gh gist list [flags]</code>:获取自己的gist</p><ul><li><code>-L,--limit &lt;int&gt;</code>:要获取的最大数量</li><li><code>--public</code>:仅显示公共gist</li><li><code>--secret</code>:仅显示秘密的gist</li></ul></li><li><p><code>gh gist delete &#123;&lt;id&gt; | &lt;url&gt;&#125;</code>:删除gist</p></li><li><p><code>gh gist edit &#123;&lt;id&gt; | &lt;url&gt;&#125; [&lt;filename&gt;] [flags]</code>:编辑gist</p><ul><li><code>-a,--add &lt;string&gt;</code>:将新文件添加到gist</li><li><code>-d,--desc &lt;string&gt;</code>:gist的新描述</li><li><code>-f,--filename &lt;string&gt;</code>:选择要编辑的文件</li><li>例如:<code>gh gist edit ea351c91acc4f4b0395c6e6241b866bf -f test.md</code></li></ul></li><li><p><code>gh gist view [&lt;id&gt; | &lt;url&gt;] [flags]</code>:显示gist</p><ul><li><code>-f,--filename &lt;string&gt;</code>:显示gist中的单个文件</li><li><code>--files</code>:从gist中列出文件名,不显示其他内容  </li><li><code>-r,--raw</code>:打印原始内容而不是渲染之后的gist(例如md)</li><li><code>-w,--web</code>:在浏览器中打开要点</li><li>例如:<code>gh gist view ea351c91acc4f4b0395c6e6241b866bf --files</code></li></ul></li></ul><h3 id="gh-repo"><a href="#gh-repo" class="headerlink" title="gh repo"></a>gh repo</h3><blockquote><p><code>gh repo archive [&lt;repository&gt;] [flags]</code>存档仓库.<code>-y</code>跳过确认</p></blockquote><ul><li>存档仓库：您可以存档仓库，将其设为对所有用户只读，并且指出不再主动维护它。 您也可以取消存档已经存档的仓库。</li><li>在仓库存档后，便无法添加或删除协作者或团队。 具有仓库访问权限的贡献者只能对项目复刻或标星。</li><li>当仓库存档后，其议题、拉取请求、代码、标签、重要事件、项目、wiki、版本、提交、标记、分支、反应和注解都会变成只读。 要更改存档的仓库，必须先对仓库取消存档</li></ul><blockquote><p><code>gh repo clone &lt;repository&gt;</code>克隆仓库</p></blockquote><ul><li>在本地克隆 GitHub 存储库</li></ul><blockquote><p><code>gh repo create [&lt;name&gt;] [flags]</code>:创建存储库</p></blockquote><ul><li><code>-c,--clone</code>:将新存储库克隆到当前目录</li><li><code>-d,--description &lt;string&gt;</code>:存储库的描述</li><li><code>--private</code>:将新存储库设为私有</li><li><code>--public</code>:公开新存储库</li><li><code>--push</code>:将本地提交推送到新存储库</li><li><code>-r,--remote &lt;string&gt;</code>:指定新存储库的远程名称</li><li><code>-s,--source &lt;string&gt;</code>:指定要用作源的本地存储库的路径</li><li><code>-g,--gitignore &lt;string&gt;</code>:为存储库指定 gitignore 模板</li><li><code>-h,--homepage &lt;URL&gt;</code>:存储库主页网址</li><li><code>--disable-issues</code>:禁用新存储库中的问题</li><li><code>--disable-wiki</code>:在新存储库中禁用 wiki</li><li><code>--internal</code>:将新存储库设为内部存储库</li><li><code>-l,--license &lt;string&gt;</code>:为存储库指定开源许可证</li><li><code>-t,--team &lt;name&gt;</code>:要授予访问权限的组织团队的名称</li><li><code>-p,--template &lt;repository&gt;</code>基于模板存储库创建新存储库</li></ul><ol><li>使用交互的方式创建存储库<code>gh repo create</code></li><li>使用非交互的方式创建<ul><li>直接创建远程仓库<code>--public --private --internal --clone</code></li><li>将本地仓库推到新的远程仓库<code>--source--push</code></li></ul></li></ol><blockquote><p><code>gh repo list [&lt;owner&gt;] [flags]</code>列出用户或组织拥有的存储库</p></blockquote><ul><li><code>-l,--language &lt;string&gt;</code>:按主要编码语言筛选</li><li><code>-L,--limit &lt;int&gt;</code>:要列出的存储库的最大数量</li><li><code>--archived</code>:仅显示已存档的存储库</li><li><code>--no-archived</code>:省略已存档的存储库</li><li><code>--private</code>:仅显示私有仓库</li><li><code>--public</code>:仅显示公共存储库</li><li><code>--fork</code>:仅显示fork</li><li><code>--source</code>:仅显示非分叉</li><li><code>-q,--jq &lt;expression&gt;</code>:使用 jq 表达式筛选 JSON 输出</li><li><code>--json &lt;fields&gt;</code>:输出具有指定字段的 JSON</li><li><code>-t,--template &lt;string&gt;</code>:使用 Go 模板设置 JSON 输出的格式</li><li><code>--topic &lt;string&gt;</code>:按主题筛选</li></ul><blockquote><p><code>gh repo view [&lt;repository&gt;] [flags]</code>:显示 GitHub 存储库的描述和自述文件.如果没有参数,显示当前仓库的</p></blockquote><ul><li>[-b,–branch <string> | -q,–jq <expression> | -t,–template <string> | -w,–web]</li></ul><blockquote><p><code>gh repo deploy-key</code>,部署密钥</p></blockquote><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>:选择其它的仓库或者主机,使用者<ul><li><code>gh repo deploy-key add &lt;key-file&gt; [flags]</code>:增加密钥<ul><li><code>-w,--allow-write</code>:允许密钥的写入访问权限</li><li><code>-t,--title &lt;string&gt;</code>:新密钥的标题</li></ul></li><li><code>gh repo deploy-key delete &lt;key-id&gt;</code>:删除密钥</li><li><code>gh repo deploy-key list</code>:查看所有密钥</li></ul></li></ul><blockquote><p><code>gh repo delete [&lt;repository&gt;] [flags]</code>删除存储库</p></blockquote><ul><li><code>--confirm</code>,确认删除,不带提示</li></ul><blockquote><p><code>gh repo rename [&lt;new-name&gt;] [flags]</code>重新命名仓库名称</p></blockquote><ul><li>[-y,–confirm | -R,–repo &lt;[HOST&#x2F;]OWNER&#x2F;REPO&gt;]</li></ul><blockquote><p><code>gh repo edit [&lt;repository&gt;] [flags]</code>:编辑存储库</p></blockquote><ul><li><code>--add-topic &lt;strings&gt;</code>添加存储库主题</li><li><code>--remove-topic &lt;strings&gt;</code>:删除存储库主题</li><li><code>--visibility &lt;string&gt;</code>:将存储库的可见性更改为 {<code>public</code>、<code>private</code>、<code>internal</code>}</li><li><code>--allow-forking</code>允许fork组织存储库</li><li><code>--default-branch &lt;name&gt;</code>:设置存储库的默认分支名称</li><li><code>--delete-branch-on-merge</code>:合并拉取请求时删除头分支</li><li><code>-d,--description &lt;string&gt;</code>:存储库的描述</li><li><code>--enable-issues</code>:在存储库中启用问题</li><li><code>-h,--homepage &lt;URL&gt;</code>:设置存储库主页网址</li><li><code>--enable-auto-merge</code>:启用自动合并功能</li><li><code>--enable-merge-commit</code>:通过合并提交启用合并拉取请求</li><li><code>--enable-rebase-merge</code>:拉取请求存在合并冲突,会重新定位合并冲突</li><li><code>--enable-squash-merge</code>:拉取请求的提交将压缩到单个提交中</li><li><code>--enable-wiki</code>:在存储库中启用 wiki</li><li><code>--enable-projects</code>:在存储库中启用项目</li><li><code>--template</code>:使存储库可用作模板存储库</li></ul><blockquote><p><code>gh repo fork [&lt;repository&gt;] [-- &lt;gitflags&gt;...] [flags]</code>:创建存储库的分支</p></blockquote><ul><li><code>--clone</code>:克隆到本地 {true|false}</li><li><code>--fork-name &lt;string&gt;</code>:指定分叉存储库的名称</li><li><code>--org &lt;string&gt;</code>:在组织中创建分支</li><li><code>--remote</code>:为分叉添加远程 {true|false}</li><li><code>--remote-name &lt;string&gt;</code>:指定新的远程仓库名称</li></ul><h3 id="gh-issue"><a href="#gh-issue" class="headerlink" title="gh issue"></a>gh issue</h3><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li></ul><blockquote><p><code>gh issue list [flags]</code>:列出和筛选此存储库中的问题</p></blockquote><ul><li><code>-a,--assignee &lt;string&gt;</code>:按回答问题的受让人(assignee)</li><li><code>-A,--author &lt;string&gt;</code>:按问题的作者筛选</li><li><code>-l,--label &lt;strings&gt;</code>:按标签筛选</li><li><code>-L,--limit &lt;int&gt;</code>:要获取的最大问题数</li><li><code>--mention &lt;string&gt;</code>:按提及筛选</li><li><code>-m,--milestone &lt;number&gt;</code>:按里程碑编号或”标题”筛选</li><li><code>-S,--search &lt;query&gt;</code>:查询的搜索问题</li><li><code>-s,--state &lt;string&gt;</code>:按状态筛选<code>&#123;open|closed|all&#125;</code></li><li>[-t,–template <string> | -q,–jq <expression> | –json <fields>]:输出格式</li><li><code>-w,--web</code>:打开浏览器以列出问题</li></ul><blockquote><p><code>gh issue view &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>:显示有关问题的标题、正文和其他信息。</p></blockquote><ul><li><code>-c,--comments</code>:查看问题评论</li><li>[-q,–jq <expression>|–json <fields> |-t,–template <string>]:输出格式</li><li><code>-w,--web</code>:在浏览器中打开问题</li></ul><blockquote><p><code>gh issue create [flags]</code>创建新问题</p></blockquote><ul><li><code>-a,--assignee &lt;login&gt;</code>:通过登录名分配人员。使用”@me”进行自我分配。</li><li><code>-b,--body &lt;string&gt;</code>:提供问题的内容。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-l,--label &lt;name&gt;</code>:按名称添加标签</li><li><code>-m,--milestone &lt;name&gt;</code>:按名称将问题添加到里程碑</li><li><code>-p,--project &lt;name&gt;</code>:按名称将问题添加到项目</li><li><code>--recover &lt;string&gt;</code>:从失败的创建运行中恢复输入</li><li><code>-t,--title &lt;string&gt;</code>:提供标题。否则将提示一个。</li><li><code>-w,--web</code>:打开浏览器以创建问题</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gh issue create -t <span class="token string">"测试"</span> -b <span class="token string">"问题的内容"</span> -a <span class="token string">"@me"</span> -w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将标题设置为测试,添加内容,受让人是我自己,在浏览器打开</li></ul><blockquote><p><code>gh issue edit &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>:编辑问题</p></blockquote><ul><li><code>[-t | -b | -F | -m]</code>:与create一样</li><li><code>--add-assignee &lt;login&gt;</code>:通过登录名添加分配的用户。使用”@me”来分配自己。</li><li><code>--add-label &lt;name&gt;</code>:按名称添加标签</li><li><code>--add-project &lt;name&gt;</code>按名称将问题添加到项目</li><li><code>--remove-assignee &lt;login&gt;</code>:通过登录名删除分配的用户。使用”@me”取消分配自己。</li><li><code>--remove-label &lt;name&gt;</code>:按名称删除标签</li><li><code>--remove-project &lt;name&gt;</code>:按名称从项目中删除问题</li></ul><blockquote><p><code>gh issue delete &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>删除问题</p><p><code>gh issue close &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>关闭问题</p><p><code>gh issue reopen &#123;&lt;number&gt; | &lt;url&gt;&#125;</code>:重新打开问题</p></blockquote><p>…</p><blockquote><p><code>gh issue comment &#123;&lt;number&gt; | &lt;url&gt;&#125; [flags]</code>创建新问题评论</p></blockquote><ul><li><code>-b,--body &lt;string&gt;</code>提供正文。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-e,--editor</code>:使用编辑器添加正文</li><li><code>-w,--web</code>:在浏览器中添加正文</li></ul><blockquote><p><code>gh issue status [flags]</code>:问题状态</p></blockquote><ul><li>[-t,–template <string> | -q,–jq <expression> | –json <fields>]:输出格式</li></ul><blockquote><p><code>gh issue transfer &#123;&lt;number&gt; | &lt;url&gt;&#125; &lt;destination-repo&gt;</code>将问题转到另一个库</p></blockquote><h3 id="gh-pr"><a href="#gh-pr" class="headerlink" title="gh pr"></a>gh pr</h3><ul><li><code>-R,--repo &lt;[HOST/]OWNER/REPO&gt;</code>使用 [主机&#x2F;]所有者&#x2F;存储库格式选择另一个存储库</li></ul><blockquote><p>gh pr list [flags]</p></blockquote><ul><li><code>[-a | -A | -L | -l | -S | -s | --json | -q | -t | -w]</code>查看issue</li><li><code>-B,--base &lt;string&gt;</code>:按基本分支筛选</li><li><code>-d,--draft</code>:按草稿状态筛选</li><li><code>-H,--head &lt;string&gt;</code>:按头分支筛选</li></ul><blockquote><p><code>gh pr view [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:显示有关拉取请求的标题、正文和其他信息</p></blockquote><ul><li><code>[ --json | -q | -t ]</code>:输出格式</li><li><code>-c,--comments</code>:查看拉取请求注释</li></ul><blockquote><p><code>gh pr status [flags]</code>:查看拉取请求的状态</p></blockquote><ul><li><code>[ --json | -q | -t ]</code>:输出格式</li></ul><blockquote><p><code>gh pr close &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125; [flags]</code>:关闭pr</p></blockquote><ul><li><code>-d,--delete-branch</code>:关闭后删除本地和远程分支</li></ul><blockquote><p><code>gh pr reopen &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125;</code>:重新打开和拉取请求</p></blockquote><p>…</p><blockquote><p><code>gh pr checkout &#123;&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;&#125; [flags]</code>:在git中拉取请求到本地</p></blockquote><ul><li><code>-b,--branch &lt;string&gt;</code>:远程分支要使用的本地分支名称(默认是主分支)</li></ul><blockquote><p><code>gh pr review [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:审阅当前的拉取请求</p></blockquote><ul><li><code>-a,--approve</code>:批准拉取请求</li><li><code>-b,--body &lt;string&gt;</code>:指定审阅的正文</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本</li><li><code>-c,--comment</code>:对拉取请求发表评论</li><li><code>-r,--request-changes</code>:请求对拉取请求进行更改</li></ul><blockquote><p><code>gh pr comment [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:创建新的 PR 注释(评论)</p></blockquote><ul><li><code>-b,--body &lt;string&gt;</code>:提供正文。否则将提示一个。</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-e,--editor</code>:使用编辑器添加正文</li><li><code>-w,--web</code>:打开浏览器</li></ul><blockquote><p><code>gh pr ready [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;]</code>:将拉取请求标记为已就绪(可供审核)</p></blockquote><p>…</p><blockquote><p><code>gh pr merge [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:在 GitHub 上合并拉取请求</p></blockquote><ul><li><code>--admin</code>:使用管理员权限合并不符合要求的拉取请求</li><li><code>--auto</code>:仅在满足必要要求后自动合并</li><li><code>-b,--body &lt;text&gt;</code>:合并提交的正文文本</li><li><code>-F,--body-file &lt;file&gt;</code>:从文件中读取正文文本（使用”-“从标准输入读取）</li><li><code>-d,--delete-branch</code>:合并后删除本地和远程分支</li><li><code>--disable-auto</code>:禁用此拉取请求的自动合并</li><li><code>-m,--merge</code>:将提交与基本分支合并</li><li><code>-r,--rebase</code>:将提交重新定位到基础分支</li><li><code>-s,--squash</code>:将提交压缩到一个提交中，然后将其合并到基础分支中</li><li><code>-t,--subject &lt;text&gt;</code>:合并提交的主题文本</li></ul><blockquote><p><code>gh pr create [flags]</code>:创建一个pr</p></blockquote><ul><li><p>[-a | -b | -F | -l | -m | -P | -t | -w]</p></li><li><p><code>-B,--base &lt;branch&gt;</code>:要将代码合并到其中的分支</p></li><li><p><code>-d,--draft</code>:将拉取请求标记为草稿</p></li><li><p><code>-f,--fill</code>:不要提示标题&#x2F;正文，只使用提交信息</p></li><li><p><code>-H,--head &lt;branch&gt;</code>:包含拉取请求提交的分支（默认值：当前分支）</p></li><li><p><code>--no-maintainer-edit</code>:禁用维护者修改拉取请求的功能</p></li><li><p><code>--recover &lt;string&gt;</code>:从失败的创建运行中恢复输入</p></li><li><p><code>-r,--reviewer &lt;handle&gt;</code>:按句柄请求人员或团队进行审核</p></li></ul><blockquote><p><code>gh pr diff [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code></p></blockquote><p><code>--color &lt;string&gt;</code>:在差异输出中使用颜色：{always|never|auto}<br><code>--patch</code>:以补丁格式显示差异</p><blockquote><p><code>gh pr edit [&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;] [flags]</code>:编辑拉取请求。</p></blockquote><p>–add-assignee <login>| –remove-assignee <login> | –add-label <name> | –remove-label <name> | –add-reviewer <login> | –remove-reviewer <login> | –add-project <name> | –remove-project <name> | -b,–body <string> | -F,–body-file <file> | -m,–milestone <name> | -t,–title <string></p><ul><li><code>-B,--base &lt;branch&gt;</code>:更改此拉取请求的基本分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件</title>
      <link href="/2022/02/15/dom-shi-jian/"/>
      <url>/2022/02/15/dom-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><img src="./DOM%E4%BA%8B%E4%BB%B6.png" alt="DOM事件"></p><h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><blockquote><p>使用 <code>对象.事件=函数</code>的形式只能同时为一个元素的一个事件绑定一个响应函数.不能绑定多个,如果绑定多个,则后边会覆盖前边的</p></blockquote><ul><li><code>addEventListener()</code>:通过这个方法也可以为元素绑定响应函数<ul><li>参数<ol><li><strong>事件的字符串,不要on</strong></li><li>回调函数,当事件触发时,该事件触发时该函数会被调用</li><li>是否在捕获阶段触发事件,需要一个布尔值,<span style="color:red">默认值false(冒泡阶段调用)</span></li></ol></li><li>注意:<ul><li>使用<code>addEventListener()</code>可以同时为一个元素的相同事件同时绑定多个响应函数.</li><li>这样当事件触发时,响应函数将会按照函数的绑定顺序执行</li></ul></li></ul></li><li><code>removeEventListener()</code>:使用addEventListener()绑定的事件只能通过<code>removeEventListener()</code>来移除.并且如果addEventListener()中的第二个参数是匿名参数将无法移除<ul><li>参数和<code>addEventListener()</code>相同</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">ale</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> ale<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>ale<span class="token punctuation">,</span>fasle<span class="token punctuation">)</span>    <span class="token comment">//函数调用式</span>    <span class="token keyword">function</span> <span class="token function">bond</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>    <span class="token function">bond</span><span class="token punctuation">(</span>btn01<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="event对象"><a href="#event对象" class="headerlink" title="event对象"></a>event对象</h3><blockquote><p>event对象是传给事件处理程序的唯一参数.不管任何方式都会指定<code>event</code>(类似arguments)</p></blockquote><ul><li><code>event.type</code>:获得触发事件的类型</li></ul><blockquote><p><code>currentTarge</code>和<code>targe</code>.前者是当前事件处理程序的所在元素.并且始终等于this对象,而target只包含事件的实际目标</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarge <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>targe <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span class="token comment">//将事件处理程序添加到父节点</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarge <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//true</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>targe <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>event.preventDefault()</code>:用于阻止特定事件的默认动作.比如链接的默认行为是在被单机时导航到href属性指定的url</li><li><code>event.stopPropagation()</code>:立即阻止事件流在DOM结构中传播.取消后续事件捕获或者冒泡</li></ul><h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><blockquote><p>W3C</p></blockquote><ol><li>捕获阶段:-在捕获阶段时,从最外层的祖先元素,向目标元素进行事件捕获,但是默认此时不会触发事件</li><li>目标阶段:-事件捕获到目标元素,捕获结束开始再目标元素上触发事件</li><li>冒泡阶段:-事件从目标元素向他的祖先元素传递,依次触发祖先元素上的事件<ul><li>注意:<ol><li>如果希望在捕获阶段就触发事件,可以将addEventListener()的第三个参数设置为true</li><li>一般情况下我们不希望再捕获阶段触发时间,所以这个一般都是false</li></ol></li></ul></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box3</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box1的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box2<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box2的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box3<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box3的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的冒泡-Bubble"><a href="#事件的冒泡-Bubble" class="headerlink" title="事件的冒泡(Bubble)"></a>事件的冒泡(Bubble)</h3><ol><li>所谓的冒泡指的就是事件的向上传导,当后代的事件被触发时,其祖先元素的相同事件也会被触发</li><li>在开发中大部分情况冒泡都是有用的</li><li>如果不希望发生事件冒泡可以通过事件对象来取消冒泡</li></ol><ul><li>解决:将事件对象的cancelBubble设置为true,即可取消冒泡.<code>event.cancelBubble=true</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#s1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为s1绑定一个单机响应函数</span>    <span class="token keyword">let</span> s1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是span的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取消冒泡</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是div的单机响应函数"</span><span class="token punctuation">)</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是body的单机响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        我是box1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            我是span        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><blockquote><ul><li>指将事件统一绑定给元素的共同的祖先,这样当后代元素上的事件触发时,会一直冒泡到祖先元素.从而通过祖先元素的响应函数来处理事件</li><li>事件委派是<strong>利用了冒泡</strong>,通过委派可以减少事件的绑定次数,提高程序的性能</li></ul></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点击按钮以后添加超链接</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">)</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创键一个li</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='javascript:;'class='link'>新建超链接一&lt;/a>"</span><span class="token punctuation">;</span>      <span class="token comment">//将li添加到ul中</span>      ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">//我们希望只绑定一次事件,即可应用到多个元素上,即使元素是后添加的.我们可以尝试将其绑定给元素的共同祖先元素</span>    ul<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//target:-event中的target表示的触发对象</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token operator">==</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><ul><li><input checked="" disabled="" type="checkbox"> 用户界面事件(UIEvent):涉及BOM交互的通用浏览器事件</li><li><input checked="" disabled="" type="checkbox"> 焦点事件(FocusEvent):元素获得或失去焦点时触发</li><li><input checked="" disabled="" type="checkbox"> 鼠标事件(MouseEvent):鼠标在页面上执行某些操作触发</li><li><input checked="" disabled="" type="checkbox"> 滚轮事件(WheelEvent):使用鼠标滚轮或者类似设备触发</li><li><input checked="" disabled="" type="checkbox"> 键盘事件(InputEvent):在文档中输入文本时触发</li><li><input disabled="" type="checkbox"> 合成事件(CompositionEvent):使用某种IME(输入法编辑器)输入字符时触发</li></ul><h3 id="用户界面事件"><a href="#用户界面事件" class="headerlink" title="用户界面事件"></a>用户界面事件</h3><blockquote><p>load事件,在window对象上,load事件会在整个页面(包括所有的外部资源,js文件和css文件)加载完成后触发</p></blockquote><ul><li>使用<code>window.onload</code>或者使用<code>addEventListener()</code></li></ul><blockquote><p><code>unload</code>:与事件load相对.会在文档卸载完成后触发.unload事件一般是在从一个页面导航到另一个页面时触发,常用于清理引用,以避免内存泄露</p></blockquote><ul><li>使用<code>window.onunload</code>或者使用<code>addEventListener()</code></li></ul><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><ul><li><code>blur</code>:当元素失去焦点时触发.不冒泡</li><li><code>focus</code>:当元素获得焦点时触发.不冒泡</li><li><code>focusin</code>:当元素获得焦点时触发.是<code>focus</code>的冒泡版</li><li><code>focusout</code>:当元素失去焦点时触发.是<code>blur</code>的通用版</li></ul><blockquote><p>文本框自动获取元素</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">loseFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setFocus()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Set focus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 或者直接使用autofocus --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标和滚轮事件"><a href="#鼠标和滚轮事件" class="headerlink" title="鼠标和滚轮事件"></a>鼠标和滚轮事件</h3><ul><li><code>click</code>:用户单机鼠标主键(通常是左键)或者按回车键时触发.</li><li><code>dblclick</code>:用户双机鼠标主键(通常是左键).</li><li><code>mousedown</code>:用户按下任意鼠标键触发</li><li><code>mouseenter</code>:用户把光标从元素的外部移动到元素的内部触发.该事件不冒泡,也不会在光标经过后代元素触发</li><li><code>mouseleave</code>:用户把光标从元素的内部移动到元素的外部触发.该事件不冒泡,也不会在光标经过后代元素触发</li><li><code>mousemove</code>:鼠标在元素上移动时反复触发</li><li><code>mouseout</code>:鼠标光标从一个元素移动到另一个元素时触发.移到的元素可以是原始元素的外部元素也可以是子元素</li><li><code>mouseover</code>:用户把鼠标光标从元素的外部移动到元素的内部时触发</li><li><code>mouseup</code>:用户释放鼠标时触发</li></ul><blockquote><p>点击事件的触发顺寻</p></blockquote><ol><li>mousedown</li><li>mouseup</li><li>click</li><li>mousedown</li><li>mouseup</li><li>click</li><li>dblclick</li></ol><blockquote><p>客户端坐标:被保存在<code>event.clientX</code>(鼠标指针的水平坐标)和&#96;&#96;event.clientY&#96;(鼠标指针的垂直坐标)</p></blockquote><ul><li>这两个属性表示事件发生时鼠标光标在视口中的位置</li></ul><blockquote><p>页面坐标:页面坐标时事件发生在页面上的坐标<code>event.pageX</code>和<code>event.pageY</code>可以获取.</p></blockquote><ul><li>这个属性返回的是鼠标在页面上的位置,并不是像客户端坐标一样返回的是视口左边与上边的距离</li></ul><blockquote><p>屏幕坐标:相对于屏幕,而不是相对于浏览器视口.所以通常屏幕坐标大于等于客户端坐标</p></blockquote><ul><li><code>event.screenX</code>和<code>event.screenY</code>来获取坐标位置</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#areaDiv</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#showMsg</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> areaDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"areaDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> showMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    areaDiv<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>      <span class="token keyword">let</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>      <span class="token comment">//在showMsg中显示鼠标的坐标</span>      showMsg<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"y="</span> <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>areaDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>onmousewheel</code>鼠标滚轮滚动的事件,会在滚轮滚动时触发,但是火狐不支持<ul><li><code>event.wheelDelta</code>可以获取鼠标滚轮滚动的方向</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取id为box1的div</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为box1绑定一个鼠标滚轮滚动的事件</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousewheel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断鼠标滚轮滚动的方向</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向上滚,box1变短</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向下滚,box1变长</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/*       当滚动条滚动时,如果浏览器有滚动条,滚动条会随之滚动      这是浏览器的默认行为,如果不希望发生,则取消默认行为      */</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><code>keydown</code>-按键被按下<ul><li><span style="color:red">注意:</span><ol><li>对于onkeydown来说如果一直按着某个按键不松手,则事件会一直触发</li><li>当onkeydown连续触发时,第一次和第二次之间隔时间会稍微长一点,防止误操作</li></ol></li></ul></li><li><code>keyup</code>-按键被松开:键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</li></ul><blockquote><p>键码<code>keyCode</code></p></blockquote><ul><li>event对象的<code>keyCode</code>属性会保存一个键码.对于键盘上特定的键.例如A键的键码是<code>65</code></li></ul><blockquote><p><code>key</code>在DOM3中,key属性用于替代keyCode.同样属于event对象的属性</p></blockquote><ul><li>按下字符键时,key的值等于文本字符(如<code>K</code>或者<code>M</code>).如果按下的是非字符键,key的值就是键名(如<code>Shift</code>)</li></ul><blockquote><p>修饰键:通过event对象暴露.<code>event.altKey</code>,<code>event.ctrlKey</code>等等.来判断按下键是否属于这个键</p></blockquote><ul><li><code>altKey &amp; ctrlKey &amp; shiftKey</code>:这个用来判断alt ctrl 和shift是否被按下.如果按下则返回true,否则返回false</li></ul><blockquote><p><code>textInput</code>事件,在字符串输入到可编辑区域时触发.</p></blockquote><ul><li><code>textInput</code>主要关注字符.所以在event对象上提供了一个data属性.data值始终是要插入的字符</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"textInput"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>同时event上还有一个<code>inputMethod</code>属性,表示向控件输入文本的手段</p></li><li><p>0:不能确定是什么手段</p></li><li><p>1:表示键盘</p></li><li><p>2:表示粘粘</p></li><li><p>3:表示拖放操作</p></li><li><p>4:表示IME</p></li><li><p>5:表示表单选项</p></li><li><p>6:表示手写</p></li><li><p>7:表示语音</p></li><li><p>8:表示组合方式</p></li><li><p>9:表示脚本</p></li></ul><h3 id="其它事件"><a href="#其它事件" class="headerlink" title="其它事件"></a>其它事件</h3><blockquote><p><code>onchange</code>:用于在 input,textarea,select,radio 等元素中监听的变化</p></blockquote><ul><li>当元素的值发生改变时.会发生<code>onchange</code>事件。对于单选框和复选框.在被选择的状态改变时.发生<code>onchange</code>事件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>document.getElementById("input").onchange = function (e) &#123;  let file = e.target.files[0]  let img = new Image()  img.src = URL.createObjectURL(file)  document.body.appendChild(img)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt</title>
      <link href="/2022/02/12/nuxt/"/>
      <url>/2022/02/12/nuxt/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>npx nuxi init nuxt-app</code>:首先得初始化一个nuxt3的项目</p></blockquote><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><blockquote><p>Nuxt 会自动将 <code>Vue Router</code> 和 <code>map</code> 目录集成到应用程序的路由中(pages)</p></blockquote><ol><li>&lt;NuxtWelcome&gt;:nuxt的欢迎页面</li><li>&lt;NuxtPage&gt;:展示页面,相当于&lt;router-view&gt;</li><li>&lt;NuxtLink&gt;:导航链接,相当于&lt;router-link&gt;</li><li>&lt;NuxtChild&gt;:嵌套路由中显示子组件</li></ol><blockquote><p>动态路由:在pages中使用<code>[]</code>表示动态的路由</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> pages/---<span class="token operator">|</span> index.vue---<span class="token operator">|</span> users-<span class="token punctuation">[</span>group<span class="token punctuation">]</span>/-----<span class="token operator">|</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span>.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>index.vue</code>中,写入动态部分</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;NuxtLink to&#x3D;&quot;&#x2F;user-admin&#x2F;1&quot;&gt;user-admin&#x2F;1&lt;&#x2F;NuxtLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在全局也可以拿到动态路由数据</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;&#123;&#123; $route.params.group &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在script中使用<code>useRoute()</code>函数也可以拿到动态路由的值</li></ul><blockquote><p>嵌套路由:由嵌套多个层深的组件组成(其中嵌套的文件夹parent同级下需要一个<code>parent.vue</code>)</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> pages/---<span class="token operator">|</span> parent/------<span class="token operator">|</span> child.vue---<span class="token operator">|</span> parent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>parent.vue</code>中使用&lt;NuxtChild&#x2F;&gt;显示<code>child.vue</code>中的内容</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;parent&lt;&#x2F;h1&gt;    &lt;NuxtChild &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依然需要在<code>index.vue</code>中使用路由链接</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;NuxtLink to&#x3D;&quot;&#x2F;parent&#x2F;child&quot;&gt;parent&lt;&#x2F;NuxtLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="布局-layouts"><a href="#布局-layouts" class="headerlink" title="布局(layouts)"></a>布局(layouts)</h2><blockquote><p>在nuxt中自定义的布局框架,可以在整个应用程序中使用.可以将重读的UI提取到这个此文件中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> layouts/---<span class="token operator">|</span> default.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用<code>default.vue</code>用于应用中的所有页面除了(app.vue).<code>app.vue</code>依然会是所有页面的入口</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div&gt;  &lt;h1&gt;默认布局&lt;&#x2F;h1&gt;  &lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义布局:如果不想在所有页面设置属性,就需要在某个页面设置属性(<code>layout</code>).并且不能使用<code>default.vue</code>,而应该使用别的,例如<code>custom.vue</code>.</p></blockquote><ul><li>例如我们自定义一个<code>custom.vue</code>之后就可以在有需要的页面使用</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">definePageMeta(&#123;  layout: &#39;custom&#39;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用插槽:可以对页面进行完全的控制.需要使用&lt;NuxtLayout&gt;并且<code>layout:false</code></p></blockquote><ul><li>需要使用的<code>layout</code>的页面(类似于父页面)</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  hhh  &lt;NuxtLayout name&#x3D;&quot;custom&quot;&gt;    &lt;template #header&gt;      &lt;h1&gt;这不好吧&lt;&#x2F;h1&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;NuxtLayout&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;definePageMeta(&#123;  layout: false,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>layout</code>的插槽页面<code>custom</code>(类似于子页面)</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;特殊的页面&lt;&#x2F;h1&gt;    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件-components"><a href="#组件-components" class="headerlink" title="组件(components)"></a>组件(components)</h2><blockquote><p>放在该目录的所有组件可以直接将器导入其它页面或者组件中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">|</span> components/--<span class="token operator">|</span> TheHeader.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;TheHeader&gt;&lt;&#x2F;TheHeader&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是嵌套目录,那么组件的名称需要加入文件名称</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-<span class="token operator">|</span> components/---<span class="token operator">|</span> test/-----<span class="token operator">|</span> hao.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#96;&#96;&#96;vue&lt;template&gt;  &lt;TheHeader&gt;&lt;&#x2F;TheHeader&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不需要在<code>script</code>中使用import导入,直接可以使用</li></ul><blockquote><p>懒加载:将将前缀(<code>Lazy&#39;</code>)添加到组件的名称中.例如<code>&lt;LazyTheHeader&gt;</code></p></blockquote><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><blockquote><p><code>useFetch</code>,<code>useLazyFetch</code>,<code>useAsyncData</code>,<code>useLazyAsyncData</code>仅在生命周期或者setup中可以使用</p></blockquote><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><blockquote><p>在nuxt项目的根目录,nuxt会自动读取<code>server/api</code>下文件的promise或者JSON数据(后端服务器)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const todos &#x3D; [  &#123; id: 1, title: &#39;nuxt3&#39;, completed: false &#125;,  &#123; id: 2, title: &#39;vue3&#39;, completed: true &#125;,]export default () &#x3D;&gt; todos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData"></a>useAsyncData</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123;  data: Ref&lt;DataT&gt;,  pending: Ref&lt;boolean&gt;,  refresh: (force?: boolean) &#x3D;&gt; Promise&lt;void&gt;,  error?: any&#125; &#x3D; useAsyncData(  key: string,  fn: () &#x3D;&gt; Object,  options?: &#123; lazy: boolean, server: boolean &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数参数</p></blockquote><ol><li><code>key</code>:保证请求数据不会重复</li><li><code>fn</code>:返回值的异步函数</li><li><code>options</code>:<ol><li><code>lazy</code>:是否在加载路由后解析异步函数，而不是阻塞导航(默认为false,卡顿现象)</li><li><code>default()</code>:一个工厂函数，用于在异步函数解析之前设置数据的默认值 (配合<code>lazy:true</code>)</li><li><code>server</code>:是否在服务器端获取数据(默认为true),用户可以直接浏览到页面</li><li><code>transform()</code>:一个函数，可用于在解析后改变fn结果</li><li><code>pick</code>:仅从 fn 结果中选取此数组中的指定键.<span style="color:red">只能适用于对象</span></li></ol></li></ol><blockquote><p>返回值</p></blockquote><ol><li><code>data</code>:传入的异步函数的结果</li><li><code>pending</code>:指示数据是否仍在提取(配合<code>lazy:true</code>,可以写一些加载提示器)</li><li><code>refresh</code>:可用于强制刷新数据的函数</li><li><code>error</code>:错误对象</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; data: todos &#125; &#x3D; await useAsyncData(&#39;todos&#39;, () &#x3D;&gt; $fetch(&#39;&#x2F;api&#x2F;todo&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="useLazyAsyncData"><a href="#useLazyAsyncData" class="headerlink" title="useLazyAsyncData"></a>useLazyAsyncData</h3><blockquote><p>此方法仅是将<code>useAsyncData</code>中的<code>lazy</code>设置为true(异步函数不会阻止导航).这得考虑data为null的情况(或者使用<code>default</code>给data设置一个默认值)</p></blockquote><h3 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch"></a>useFetch</h3><blockquote><p><code>useFetch</code>是对<code>useAsyncData</code>的包装,自动生成key同时推断响应类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123;  data: Ref&lt;DataT&gt;,  pending: Ref&lt;boolean&gt;,  refresh: (force?: boolean) &#x3D;&gt; Promise&lt;void&gt;,  error?: any&#125; &#x3D; useFetch(url: string, options?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Options:<ol><li><a href="https://github.com/unjs/ohmyfetch"><code>ohmyfetch</code></a><ul><li><code>method</code>:请求方法</li><li><code>params</code>:查询参数</li><li><code>headers</code>:请求标头</li><li><code>baseURL</code>:请求的基本 URL</li></ul></li><li><code>useAsyncData</code>中的也可以使用</li></ol></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; data: todos &#125; &#x3D; await useFetch(&#39;&#x2F;api&#x2F;todo&#39;,&#123;pick:[&quot;data&quot;],transform(input)&#123;   return input&#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h2><blockquote><p>一般在<code>composables</code>中创建<code>useState()</code></p></blockquote><h3 id="composables"><a href="#composables" class="headerlink" title="composables"></a>composables</h3><blockquote><p>只有目录顶层的文件(或任何子目录中的索引文件)才会被认定为可组合的文件</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">composables <span class="token operator">|</span> - useFoo.ts <span class="token operator">|</span> - useBar <span class="token operator">|</span> --- supportingFile.ts <span class="token operator">|</span> --- index.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以直接在该目录下使用useState状态管理(不需要任何导入)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const useCounter &#x3D; () &#x3D;&gt; useState(&#39;counter&#39;, () &#x3D;&gt; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在组件中使用,不需要任何导入</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const counter &#x3D; useCounter()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h2><blockquote><p>可以使用文件名或后缀来仅在服务器端(<code>.server</code>)或客户端(<code>client</code>)加载插件.</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">plugins <span class="token operator">|</span> - myPlugin.ts <span class="token operator">|</span> - myOtherPlugin <span class="token operator">|</span> --- supportingFile.ts <span class="token operator">|</span> --- componentToRegister.vue <span class="token operator">|</span> --- index.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建一个简单的插件</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineNuxtPlugin &#125; from &#39;#app&#39;;export default defineNuxtPlugin((nuxtApp) &#x3D;&gt; &#123;  return &#123;    provide: &#123;      hello: () &#x3D;&gt; &#39;world&#39;,    &#125;,  &#125;;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>导入插件时会自动加上<code>$</code>符号区分</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const &#123; $hello &#125; &#x3D; useNuxtApp();console.log($hello());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="按需引入组件库"><a href="#按需引入组件库" class="headerlink" title="按需引入组件库"></a>按需引入组件库</h3><blockquote><p>全局挂载组件<code>nuxtApp.vueApp.use</code></p></blockquote><ul><li><code>npm i vue-devui</code></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineNuxtPlugin &#125; from &#39;#app&#39;;import &#123; Button &#125; from &#39;vue-devui&#39;;import &#39;vue-devui&#x2F;button&#x2F;style.css&#39;;export default defineNuxtPlugin((nuxtApp) &#x3D;&gt; &#123;  nuxtApp.vueApp.use(Button);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a><a href="https://pinia.vuejs.org/ssr/nuxt.html">pinia</a></h2><ul><li>下载:<code>npm install pinia @pinia/nuxt</code></li><li>在<code>nuxt.config.ts</code>中添加模块,如果不想使用vuex可以将<code>disableVuex</code>改成false</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">buildModules: [[&#39;@pinia&#x2F;nuxt&#39;, &#123; disableVuex: true &#125;]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在根目录下新建<code>store/counter.ts</code>就可以使用了</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineStore &#125; from &#39;pinia&#39;;export const useStore &#x3D; defineStore(&#39;counter&#39;, &#123;  state() &#123;    return &#123;      count: 0,    &#125;;  &#125;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitDependabot</title>
      <link href="/2022/02/11/gitdependabot/"/>
      <url>/2022/02/11/gitdependabot/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>dependabot</code>会在您的 GitHub 仓库自动创建一个 PR 来更新依赖文件，并说明依赖更新内容，用户自己选择是否 <code>merge</code> 该 PR</p></blockquote><ul><li>使用,仅需要在<code>.github</code>文件夹下写入配置文件<code>dependabot.yml</code></li></ul><h2 id="dependabot"><a href="#dependabot" class="headerlink" title="dependabot"></a><a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#about-the-dependabotyml-file">dependabot</a></h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># dependabot.yml file with</span><span class="token comment"># customized schedule for version updates</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">updates</span><span class="token punctuation">:</span>  <span class="token comment"># Keep npm dependencies up to date</span>  <span class="token punctuation">-</span> <span class="token key atrule">package-ecosystem</span><span class="token punctuation">:</span> <span class="token string">"npm"</span>    <span class="token key atrule">directory</span><span class="token punctuation">:</span> <span class="token string">"/"</span>    <span class="token comment"># Check the npm registry for updates at 2am UTC</span>    <span class="token key atrule">schedule</span><span class="token punctuation">:</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token string">"daily"</span>      <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token string">"02:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>version</code>:版本号</li></ol><h3 id="必须选项"><a href="#必须选项" class="headerlink" title="必须选项"></a>必须选项</h3><ol><li><code>package-ecosystem</code>:使用的包管理器,像<code>docker</code>,<code>npm</code>,<code>pip</code>等等</li><li><code>directory</code>:项目的根目录.使用<code>/</code>相当于检查除git action之外的所有目录</li><li><code>schedule</code>:每个包管理器定义检查新版本的频率<ul><li><code>interval</code>:更新的频率<ul><li>daily——在每个工作日运行，周一至周五。</li><li>weekly——每周运行一次。默认情况下，这是在星期一。要修改它，请使用schedule.day.</li><li>monthly——每月运行一次。这是一个月的第一天</li></ul></li><li><code>time</code>:指定的每天更新时间<ul><li><code>time: &quot;02:00&quot;</code>:每天两点更新</li></ul></li><li><code>day</code>:指定每周的更新时间<ul><li>monday</li><li>tuesday</li><li>wednesday</li><li>thursday</li><li>friday</li><li>saturday</li><li>sunday</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitAction</title>
      <link href="/2022/02/09/gitaction/"/>
      <url>/2022/02/09/gitaction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>github Action是github提供的持续集成的操作,可以抓取代码,运行测试,登录远程服务器,发布到第三方服务器等等</p></blockquote><h2 id="创建一个工作流程"><a href="#创建一个工作流程" class="headerlink" title="创建一个工作流程"></a>创建一个工作流程</h2><blockquote><p>基本概念</p></blockquote><ol><li><code>workflow</code>(工作流程):持续集成一次运行的过程,就是一个workflow</li><li><code>job</code>(任务):一个workflow由一个后者多个jobs构成,即一次CI&#x2F;CD可以完成多个任务</li><li><code>step</code>(步骤):每个job由多个step构成,一步步完成</li><li><code>action</code>(动作):每个step可以依次执行一个或者多个命令(action)</li></ol><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a><a href="https://docs.github.com/en/actions/using-workflows">workflow</a></h3><blockquote><p>一个库里可以有多个<code>workflow</code>文件.github只要发现<code>.github/workflows</code>目录里有<code>.yml</code>文件,就会自动运行该文件</p></blockquote><ol><li>创建<code>.github/workflows</code>目录</li><li>在<code>.github/workflows</code>目录中,创建一个名为<code>github-actions-demo.yml</code>的文件</li><li>然后就可以编辑yaml文件了</li></ol><blockquote><p><code>name</code>字段:是workflow的名称.如果省略该字段,默认为当前workflow的文件名</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>on</code>:指定触发<code>workflow</code>的条件,通常是某些事件</p></blockquote><ol><li>指定单个事件:<code>on: push</code></li><li>指定多个事件:<code>on:[push,pull_request]</code></li><li>指定事件流程</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用[活动类型]<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows</a>:更好地控制工作流的运行时间</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">label</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>created<span class="token punctuation">,</span> edited<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="push-x2F-pull-request"><a href="#push-x2F-pull-request" class="headerlink" title="push&#x2F;pull_request"></a>push&#x2F;pull_request</h4><blockquote><p>分支<code>branches</code>(包括分支),<code>branches-ignore</code>(排除分支)<span style="color:red">push ,pull_request</span>可用</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> main      <span class="token punctuation">-</span> <span class="token string">'mona/octocat'</span>      <span class="token punctuation">-</span> <span class="token string">'releases/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>main</code>:只有运行main分支才会触发</li><li><code>&#39;mona/octocat&#39;</code>:只有运行<code>mona/octocat</code>分支才会触发</li><li><code>&#39;releases/**&#39;</code>:运行以<code>releases</code>开头的分支就会触发</li></ul><blockquote><p>标记<code>tags</code>(包括标记),<code>tags-ignore</code>(排除标记)<span style="color:red">push</span>可用</p></blockquote><hr></hr><blockquote><p>路径<code>paths</code>(包括路径)<code>paths-ignore</code>(忽略路径)<span style="color:red">push ,pull_request</span>可用</p></blockquote><ul><li>只要推送带有js的文件,就会触发</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'**.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果推送的所有文件路径都和<code>paths-ignore</code>中的正则匹配,则不会触发</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">paths-ignore</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'docs/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h4><blockquote><p>定义工作流的时间表。可以使用 <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07"><code>POSIX cron</code></a> 语法将工作流安排在特定 UTC 时间运行。计划的工作流在默认分支或基本分支上的最新提交上运行。可以运行计划工作流的最短间隔为每 5 分钟一次</p></blockquote><ol><li>分钟 [0,59]</li><li>小时 [0,23]</li><li>本月的一天 [1,31]</li><li>一年中的月份 [1,12]</li><li>星期几([0,6] 与 0 &#x3D;星期日)</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>    <span class="token comment"># 每天的5.30和17.30触发</span>    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span>  <span class="token string">'30 5,17 * * *'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="workflow-call"><a href="#workflow-call" class="headerlink" title="workflow_call"></a>workflow_call</h4><p>…</p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><blockquote><p><code>workflow</code>中所有作业的步骤的环境变量.也可以设置仅可用于单个作业的步骤或单个步骤的环境变量<code>jobs.&lt;job_id&gt;.env</code>和<code>jobs.&lt;job_id&gt;.steps[*].env</code></p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># env</span><span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token key atrule">SERVER</span><span class="token punctuation">:</span> production<span class="token comment"># steps</span><span class="token key atrule">steps</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> My first action    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">FIRST_NAME</span><span class="token punctuation">:</span> Mona      <span class="token key atrule">LAST_NAME</span><span class="token punctuation">:</span> Octocat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><blockquote><p><code>jobs</code>是<code>workflow</code>中的主体字段,表示要执行一项或多项任务</p><p>每个任务都需要一项任务的<code>job_id</code></p></blockquote><h4 id="jobs-name"><a href="#jobs-name" class="headerlink" title="jobs..name"></a>jobs.<job_id>.name</h4><blockquote><p>name字段是对任务的说明</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">my_first_job</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> My first job  <span class="token key atrule">my_second_job</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jobs-needs"><a href="#jobs-needs" class="headerlink" title="jobs..needs"></a>jobs.<job_id>.needs</h4><blockquote><p>needs:指定当前任务的依赖关系,即运行顺序</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">job1</span><span class="token punctuation">:</span>  <span class="token key atrule">job2</span><span class="token punctuation">:</span>    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1  <span class="token key atrule">job3</span><span class="token punctuation">:</span>    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>job1</code>必须先于<code>job2</code>完成,而<code>job3</code>等待<code>job1和job2</code>的完成才能运行</li></ul><h4 id="jobs-runs-on"><a href="#jobs-runs-on" class="headerlink" title="jobs..runs-on"></a>jobs.<job_id>.runs-on</h4><blockquote><p>用于定义要在其上运行作业的计算机的类型</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="jobs-steps"><a href="#jobs-steps" class="headerlink" title="jobs..steps"></a>jobs.<job_id>.steps</h4><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>:步骤名称</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>:该步骤运行的命令或者 action</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>:该步骤所需的环境变量</li></ul><blockquote><p><code>uses</code>:选择一个别人写好的<code>action</code>,可以理解为若干 <code>steps.run</code>,有利于代码复用</p></blockquote><ul><li><p>例如下面的use就是<code>actions</code>用户(github官方的账号)的checkout仓库.<code>@v1</code>就是版本号,也可以接分支<code>@master</code></p></li><li><p>当前操作系统中安装 <code>node:16</code> 的 action 示例</p></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> use Node.js 16.x  <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1  <span class="token key atrule">with</span><span class="token punctuation">:</span>    <span class="token key atrule">node-version</span><span class="token punctuation">:</span> 16.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用docker镜像<ul><li>镜像中心:<code>docker://&#123;image&#125;:&#123;tag&#125;</code>,在当前的系统中运行了一个docker镜像.而不是在容器中运行<ul><li><code>container</code>是指定在容器中运行</li><li>以下就是将node指定在docker中运行</li></ul></li></ul></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">container</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span><span class="token number">16</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> action/checkout@v1     <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          node -v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自己发布的镜像:<code>docker://&#123;host&#125;/&#123;image&#125;:&#123;tag&#125;</code></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>//node<span class="token punctuation">:</span>alpine        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">args</span><span class="token punctuation">:</span> npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>with</code>:有的 Action可能会需要我们传入一些特定的值：比如上面的 node 版本啊之类的,这些需要我们传入的参数由 with 关键字来引入</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">with</span><span class="token punctuation">:</span>  <span class="token key atrule">node-version</span><span class="token punctuation">:</span> 16.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>run</code>:可以运行操作系统中原有的shell命令</p></blockquote><ul><li>单行命令:</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies  <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多行命令</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Clean install dependencies and build  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    npm ci    npm run build</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>指定运行的工作目录</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">run</span><span class="token punctuation">:</span> npm install<span class="token key atrule">working-directory</span><span class="token punctuation">:</span> ./temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>shell</code>:指定终端运行脚本命令(run)</p></blockquote><ul><li>可以是<code>bash</code>,<code>cmd</code>,<code>python</code>等看具体需求和操作系统</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><blockquote><p>部署hexo到服务器</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install nodejs        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3.0.0        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install pkg        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install          npm install hexo-cli -g</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build app        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> scp action        <span class="token key atrule">uses</span><span class="token punctuation">:</span> betanzos/scp<span class="token punctuation">-</span>upload@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token string">"public/"</span>          <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HOST <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.SSH_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">remote_dir</span><span class="token punctuation">:</span> <span class="token string">"/www"</span>          <span class="token key atrule">recursive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中最要注意的点是ssh密钥的问题<ol><li>在本地生成密钥后,将公钥放入远程服务器的root下的<code>.ssh</code>文件夹自己生成的<code>authorized_keys</code>文件中</li><li>需要将私钥上传到secrets中,然后使用环境变量取得</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESLint</title>
      <link href="/2022/01/28/eslint/"/>
      <url>/2022/01/28/eslint/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下以<code>nuxt3</code>集成ESlint举例</p></blockquote><ul><li><code>npx nuxi init nuxt-app</code>:首先得初始化一个nuxt3的项目</li></ul><h2 id="初始化ESlint"><a href="#初始化ESlint" class="headerlink" title="初始化ESlint"></a>初始化ESlint</h2><ul><li><p><code>eslint</code>可以全局安装,也可以局部安装,在这里我就使用<code>pnpm add eslint -D</code></p></li><li><p><code>npx eslint --init</code>:此命令可以创建一个配置,并且你就可以继承推荐的规则</p></li></ul><p><img src="./ESlint%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt=" "></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">"es2021"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>      <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>      <span class="token string">"plugin:@typescript-eslint/recommended"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"ecmaVersion"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>      <span class="token string">"parser"</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>      <span class="token string">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token string">"@typescript-eslint"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>env</strong>:项目环境</li></ul><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h3><blockquote><p>extends的模块名称以<code>eslint-config-</code>开头,例如 eslint-config-myconfig.同时支持 npm 作用域模块,例如 :@scope&#x2F;eslint-config.使用的时候可以用全称,也可以用缩写(不使用<code>eslint-config-</code>)</p><p>例如上面配置文件,extends中<code>&quot;plugin:@typescript-eslint/recommended&quot;</code>,这个就是插件中的配置</p></blockquote><ul><li><strong>指定配置的字符串</strong>(配置文件的路径,可共享配置的名称,<code>eslint:recommended</code> 或 <code>eslint:all</code>)</li><li><strong>字符串数组</strong>：每个配置继承它前面的配置</li></ul><ol><li>extends可以看做是集成一个个配置方案的最佳实践.它配置的内容实际就是一份份别人配置好的<code>.eslintrc.js</code></li><li>允许 extends 配置多个模块,如果规则冲突,位置靠后的包将覆盖前面的</li><li>rules中的规则相同,并且优先级恒定高于 extends</li></ol><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><blockquote><p>每个插件是一个命名格式为 eslint-plugin-&lt;plugin-name&gt; ,比如 eslint-plugin-vue.你也可以用这样的格式 @&lt;scope&gt;&#x2F;eslint-plugin-&lt;plugin-name&gt; 限定在包作用域下,比如 @vue&#x2F;eslint-plugin-vue. 同样可以使用缩写</p><p>例如上面配置文件中,plugins中的<code>&quot;vue&quot;</code>,这个就是简写的插件</p></blockquote><ol><li>引入<code>plugin</code>可以理解为只是加载了(拥有额外的自定义的rules)插件。但是只有在 <strong>rules,extends</strong> 中定义后才会生效，如果没有则不生效</li><li>plugin里除了自定义的rules.还可以配置config，即自己的代码检查工具，类似配置好的<code>.eslintrc.js</code>(例如<code>&quot;plugin:vue/essential&quot;</code>),并且这部分可以在extends里配置:<code>plugin:config</code>名称<ul><li>参考:<a href="https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins">https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins</a></li></ul></li></ol><h3 id="rules-可以做下面的任何事情以扩展-或覆盖-规则"><a href="#rules-可以做下面的任何事情以扩展-或覆盖-规则" class="headerlink" title="rules:可以做下面的任何事情以扩展(或覆盖)规则:"></a><strong>rules</strong>:<a href="https://eslint.org/docs/user-guide/configuring/rules">可以做下面的任何事情以扩展(或覆盖)规则</a>:</h3><ul><li><code>&quot;off&quot;或0</code>- 关闭规则</li><li><code>&quot;warn&quot;或1</code>- 打开规则作为警告（不影响退出代码）</li><li><code>&quot;error&quot;或2</code>- 将规则作为错误打开（触发时退出代码为 1）</li></ul><ol><li>启用额外的规则</li><li>改变继承的规则级别而不改变它的选项<ul><li>基础配置：<code>&quot;eqeqeq&quot;: [&quot;error&quot;, &quot;allow-null&quot;]</code></li><li>派生的配置：<code>&quot;eqeqeq&quot;: &quot;warn&quot;</code></li><li>最后生成的配置：<code>&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]</code></li><li><code>eqeqeq</code>是需要<code>===和!==</code></li></ul></li><li>覆盖基础配置中的规则的选项<ul><li>基础配置：<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;, &quot;avoid-escape&quot;]</code></li><li>派生的配置：<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</code></li><li>最后生成的配置：<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</code></li><li><code>quotes</code>强制一致使用反引号、双引号或单引号</li></ul></li></ol><blockquote><p>开启 “eslint:recommended”</p><p>值为<code>eslint:recommended</code>的extends属性启用一系列核心规则,这些规则报告一些常见问题</p><p>如果配置集成了推荐的规则：在使用命令行的 <code>--fix</code> 选项之前,检查一下报告的问题,这样就可以知道一个新的可修复的推荐的规则将更改代码</p></blockquote><h3 id="extends和plugins的区别"><a href="#extends和plugins的区别" class="headerlink" title="extends和plugins的区别"></a>extends和plugins的区别</h3><ol><li>一般对js来说,extends是针对rules做的规则说明,类似于别人配置好的<code>.eslintrc.js</code>.而plugins是一堆规则集合 </li><li>extends一般会加载plugin中的配置集,形成一套核心规则</li><li>plugin不仅仅可以 对js做扩展,又可以对除了js之外的做扩展</li></ol><blockquote><p>在extends中使用<a href="https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins">plugins插件</a></p></blockquote><ul><li>extends里的config和plugin里的config的区别<ol><li><code>extends</code>中的config,是一种命名规范,扩展名称格式必须为eslint-config-<name>    </li><li>plugin中的config,是一个属性,用于配置一堆自定义的规则的集合</li></ol></li></ul><h3 id="parserOptions"><a href="#parserOptions" class="headerlink" title="parserOptions"></a>parserOptions</h3><blockquote><p>参考<a href="https://eslint.bootcss.com/docs/user-guide/configuring">https://eslint.bootcss.com/docs/user-guide/configuring</a></p></blockquote><h3 id="修改支持vue3"><a href="#修改支持vue3" class="headerlink" title="修改支持vue3"></a>修改支持vue3</h3><blockquote><p>参考<a href="https://eslint.vuejs.org/user-guide/#usage">https://eslint.vuejs.org/user-guide/#usage</a></p></blockquote><ol><li><p>将extends里的<code>&quot;plugin:vue/essential&quot;</code>换成vue3</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token operator">...</span><span class="token punctuation">,</span>  <span class="token string">'plugin:vue/vue3-recommended'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置nuxt3中额外的规则</p><ul><li>下载插件:<code>npm install -D eslint-plugin-nuxt</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">extends</span><span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token operator">...</span><span class="token punctuation">,</span>  <span class="token string">"plugin:nuxt/recommended"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="ESlint命令行参数"><a href="#ESlint命令行参数" class="headerlink" title="ESlint命令行参数"></a>ESlint命令行参数</h3><blockquote><p>首先在脚本中配置eslint检查</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">scripts<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">// npx会自动执行脚本,不需要加上npx</span>  <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint . --ext .ts,.vue"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>语法:<code>eslint [options] [file|dir|glob]*</code></li><li>常用命令行参数,通过<code>npx eslint --help</code>来输出所有选项参数</li></ul></blockquote><ul><li><p>正常的使用</p><ol><li><code>eslint app.js main.js</code>:检查<code>app.js</code> ,<code>main.js</code>文件</li><li><code>eslint lib/**</code>:检查lib下面的所有文件</li></ol></li><li><p>一些常用选项</p><ol><li><p><code>--ext</code>:允许你指定 ESLint 在指定的目录下查找 JavaScript 文件时要使用的文件扩展名.默认情况下<code>.js</code>作为唯一性文件扩展名</p><ul><li><code>--ext</code>只用当参数为目录时才会生效</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 当前目录下所有目录eslint . --ext .ts,.vue# 忽略扩展名,匹配src下所有文件eslint src&#x2F;* --ext .vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>--rulesdir</code>:允许你指定另一个加载规则文件的目录。允许你在运行时动态加载新规则。当你有自定义规则绑定到eslint会很有用。</p><ul><li><code>eslint --rulesdir my-rules/file.js</code>:只绑定一个规则文件</li><li><code>eslint --rulesdir my-rules/ --rulesdir my-other-rules/file.js</code>:绑定多个规则文件</li><li>注意，与核心规则和插件规则一样，你仍需要在配置文件或通过 –rule 命令行选项启用这些规则，以便在检测过程中实际运行这些规则。使用 –rulesdir 指定一个规则目录不会自动启用那些目录下的规则</li></ul></li><li><p><code>-o, --output-file</code>:将报告写到一个文件</p><ul><li><code>eslint -o ./test.txt</code>:将报告写到test.txt</li></ul></li><li><p><code>--fix</code>:该选项指示 ESLint 试图修复尽可能多的问题。修复只针对实际文件本身，而且剩下的未修复的问题才会输出。不是所有的问题都能使用这个选项进行修复，该选项在以下情形中不起作用：</p><ul><li>当代码传递给 ESLint 时，这个选项抛出一个错误。</li><li>这个选项对使用处理器的代码不起作用。</li><li>该选项对使用处理器的代码没有影响，除非处理器选择允许自动修复</li></ul></li></ol></li></ul><blockquote><p><code>.eslintignore</code>文件:eslint会忽略当前目录下的这些文件.</p></blockquote><ul><li><code>.eslintignore</code>是<code>--ignore-path</code>的选项的一个扩展,更方便的去管理文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;dist&#x2F;*.local.output.js&#x2F;node_modules&#x2F;****&#x2F;*.svg**&#x2F;*.sh&#x2F;public&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prettier和husky"><a href="#prettier和husky" class="headerlink" title="prettier和husky"></a>prettier和husky</h2><blockquote><ul><li>使用prettier去规范代码风格</li><li>参考:<a href="https://prettier.io/">https://prettier.io/</a></li></ul></blockquote><ul><li>下载关于prettier的插件:<code>npm i -D prettier eslint-plugin-prettier</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token string">"extends"</span><span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token operator">...</span><span class="token punctuation">,</span>  <span class="token string">'plugin:prettier/recommended'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  plugin<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"prettier"</span><span class="token punctuation">]</span><span class="token comment">// 避免与 prettier 冲突</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置<a href="https://prettier.io/docs/en/options.html"><code>.prettierrc</code></a>文件,同时也可以添加<code>.prettierrc</code>文件来忽略不想要检查的文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  printWidth<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token comment">//单行长度</span>  tabWidth<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//缩进长度,不管是空格还是Tab</span>  useTabs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//使用空格代替tab缩进</span>  semi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//句末使用分号</span>  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号</span>  quoteProps<span class="token operator">:</span> <span class="token string">'as-needed'</span><span class="token punctuation">,</span> <span class="token comment">//仅在必需时为对象的key添加引号</span>  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// jsx中使用单引号</span>  trailingComma<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token comment">//多行时尽可能打印尾随逗号</span>  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//在对象前后添加空格-eg: &#123; foo: bar &#125;</span>  jsxBracketSameLine<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//多属性html标签的‘>’折行放置</span>  arrowParens<span class="token operator">:</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token comment">//单参数箭头函数参数周围使用圆括号-eg: (x) => x</span>  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//无需顶部注释即可格式化</span>  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//在已被preitter格式化的文件顶部加上标注</span>  proseWrap<span class="token operator">:</span> <span class="token string">'preserve'</span><span class="token punctuation">,</span> <span class="token comment">//不知道怎么翻译</span>  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">'ignore'</span><span class="token punctuation">,</span> <span class="token comment">//对HTML全局空白不敏感</span>  vueIndentScriptAndStyle<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不对vue中的script及style标签缩进</span>  endOfLine<span class="token operator">:</span> <span class="token string">'lf'</span><span class="token punctuation">,</span> <span class="token comment">//结束行形式</span>  embeddedLanguageFormatting<span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token comment">//对引用代码进行格式化</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加脚本配置<code>prettier --write .</code></li></ul><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><blockquote><p>线初始化husky:<code>git husky install</code></p></blockquote><ul><li><code>npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</code>将代码检查添加到预提交</li></ul><h3 id="Lint-staged"><a href="#Lint-staged" class="headerlink" title="Lint-staged"></a>Lint-staged</h3><ul><li>直接使用命令:<code>npx mrm@2 lint-staged</code></li></ul><blockquote><p>此命令将根据项目依赖项中的代码质量工具安装和配置husky和 &#96;lint-staged package.json，因此请确保在此之前安装npm install –save-dev并配置所有代码质量工具，如Prettier和ESLint</p></blockquote><ul><li><code>Lint-staged</code>参考:<a href="https://github.com/okonet/lint-staged">https://github.com/okonet/lint-staged</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ESlint </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/01/27/linux/"/>
      <url>/2022/01/27/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="linux目录"><a href="#linux目录" class="headerlink" title="linux目录"></a>linux目录</h2><table><thead><tr><th>目录</th><th>解释</th></tr></thead><tbody><tr><td><strong>&#x2F;bin</strong></td><td>存放最常使用的命令</td></tr><tr><td><strong>&#x2F;boot</strong></td><td>启动Linux时使用的一些核心文件</td></tr><tr><td><strong>&#x2F;dev</strong></td><td>存放linux外部的设备,在linux中访问设备的方式和访问文件的方式是相同的</td></tr><tr><td><strong>&#x2F;etc</strong></td><td><span style="color:red">这个目录用来存放所有的系统管理所需的配置文件和子目录</span></td></tr><tr><td><strong>&#x2F;home</strong></td><td><span style="color:red">用户的主目录,在linux中共每个用户都有一个自己的目录,一般该目录是由用户账号命名</span></td></tr><tr><td><strong>&#x2F;lib</strong></td><td>这个目录存放系统最基本的动态连接共享库,类似于windows的dll文件</td></tr><tr><td><strong>&#x2F;lost+found</strong></td><td>一般情况是空的,非法关机后,就会存放一些文件</td></tr><tr><td><strong>&#x2F;media</strong></td><td>识别设备(例如u盘等)识别后,linux会把识别的设备挂载到这个目录</td></tr><tr><td><strong>&#x2F;mnt</strong></td><td>让用户临时挂别的文件系统,可以将光驱挂载在<code>/mnt</code></td></tr><tr><td><strong>&#x2F;opt</strong></td><td>这是给主机额外安装软件所摆放的</td></tr><tr><td><strong>&#x2F;proc</strong></td><td>虚拟目录.存放系统内存的映射</td></tr><tr><td><strong>&#x2F;root</strong></td><td><span style="color:red">系统管理员</span></td></tr><tr><td><strong>&#x2F;run</strong></td><td>临时文件系统,存储系统启动依赖的信息.(重启会被删掉)</td></tr><tr><td><strong>&#x2F;sbin</strong></td><td>存放的是使用的系统管理程序</td></tr><tr><td><strong>&#x2F;srv</strong></td><td>存放一些服务启动之后需要提取的数据</td></tr><tr><td><strong>&#x2F;sys</strong></td><td>2.6之后才有的.该目录安装了2.6内核中出现的新的文件系统sysfs</td></tr><tr><td><strong>&#x2F;tmp</strong></td><td>存放临时文件,用完即删</td></tr><tr><td><strong>&#x2F;usr</strong></td><td>用户的很多程序文件都在这个目录下,类似于<code>program files</code></td></tr><tr><td><strong>&#x2F;usr&#x2F;bin</strong> 系统用户使用的应用程序</td><td></td></tr><tr><td><strong>&#x2F;usr&#x2F;sbin</strong></td><td>超级用户使用的比较高级的管理员程序和系统守护程序</td></tr><tr><td><strong>&#x2F;usr&#x2F;src</strong></td><td>内核源代码默认存放的目录</td></tr><tr><td><strong>&#x2F;var</strong></td><td>这个目录存放着不断扩充的东子</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="目录相关的命令"><a href="#目录相关的命令" class="headerlink" title="目录相关的命令"></a>目录相关的命令</h3><blockquote><p>cd 切换目录</p></blockquote><ul><li><code>./</code>  代表当前目录</li><li><code>..</code>  代表上一级目录</li><li><code>/</code>   绝对路径</li></ul><blockquote><p>ls:列出目录</p></blockquote><ul><li><code>-a</code>:查看所有的文件,包括隐藏文件</li><li><code>-l</code>:列出所有的文件,包括文件的属性和权限(没有隐藏文件)</li></ul><blockquote><p>pwd:显示当店用户所在的目录</p><p>mkdir:创建一个目录</p><p>touch 创建一个文件</p></blockquote><ul><li><strong>rm</strong>:删除目录或者,只能删除空目录<ul><li><code>-r</code>:目录中有文件,递归删除目录</li><li><code>-f</code>:强制删除,不会出现警告</li><li><code>-i</code>:互动,询问是否删除</li></ul></li></ul><blockquote><p>mv  移动文件或者目录  重命名文件</p></blockquote><ul><li><code>-f</code>:强制移动</li><li><code>-u</code>:只替换已经更新的文件</li></ul><ol><li><code>mv a.md b.md</code>:修改文件名称</li><li><code>mv b.md mv</code>:将文件移动到mv目录下</li><li><code>mv b.md ../a.md</code>:将文件移动到上级,并且更改文件名</li></ol><blockquote><p>cp 复制文件或者目录</p></blockquote><ul><li>cp 被复制文件的路径    复制的目的路径</li><li><code>y</code>:确定覆盖原来有的文件</li><li><code>n</code>:不覆盖</li></ul><h3 id="查看文件属性和修改"><a href="#查看文件属性和修改" class="headerlink" title="查看文件属性和修改"></a>查看文件属性和修改</h3><p><img src="./%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png" alt="文件属性"></p><ul><li><p>第一个root是<code>属主</code>,第二个root是<code>属组</code></p></li><li><p>关于第一个字符的含义</p><ol><li><code>-d</code>:代表是目录</li><li><code>-</code>:代表的是文件</li><li><code>-l</code>:代表的是链接文档(<code>link file</code>)</li><li><code>b</code>:表示为装置文件里面的可供储存的接口设备(可随机存取的装置)</li><li><code>c</code>:表示为装置文件里卖弄的串行端口设备(键盘,鼠标等一次性读取装置)</li></ol></li><li><p>剩下字符的含义</p><ol><li><code>r</code>:表示可读</li><li><code>w</code>:表示可写</li><li><code>x</code>:代表可执行</li><li><code>-</code>:代表没有这个权限</li></ol></li></ul><p><img src="./linux/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png" alt="文件权限"></p><blockquote><p>修改文件属性</p></blockquote><ol><li><strong>chagrp:更改文件数组</strong><ul><li><code>chgrp [-R] 属组名 文件名</code></li><li><code>-R</code>:递归更改文件属组.放在更改某文件的同时,他目录下的所有文件属性都会更改</li></ul></li><li><strong>chown:更改文件属主,也可以同时更改文件属组</strong><ul><li><code>chown [-R] 属主名 文件名</code></li><li><code>chown [-R] 属主名:属组名 文件名</code></li></ul></li><li><span style="color:red"><strong>chmod:更改文件9个属性</strong></span>(最重要)<ul><li><code>chmod [-R] xyz 文件或者目录</code></li><li>两种设置:一种是数字(常用)一种是符号</li><li>基本权限:<code>owner/group/others</code>每个都有自己身份的<code>read/write/execute</code>(途中的两个root分别就是主和组)</li></ul></li><li>每个字符对应的数字</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">r:4   w:2   x:1<span class="token function">chmod</span> <span class="token number">770</span> filename <span class="token comment"># rwxrwx---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>例如:<code>chmod 777 filename</code>:赋予文件最高权限</li></ul><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><ul><li><code>cat</code>:从第一行开始显示文件的内容</li><li><code>tac</code>:从最后一行显示文件的内容</li><li><code>nl</code>:现实的时候顺道输出行号</li><li><code>more</code>:一页一页的显示文件内容(空格代表翻页,enter代表按行向下翻)</li><li><code>less</code>:与more相比,可以往前翻页(上下键,q是退出)<ul><li>查询:<code>/+查询字符</code>从头到尾向下查询,<code>?+查询字符</code>从尾到头向下查询</li></ul></li><li><code>head</code>:只有头几行</li><li><code>tail</code>:只有尾几行</li></ul><blockquote><p><code>/etc/sysconfig/network-scripts</code>:linux网络配置文件</p></blockquote><h3 id="linux链接的概念"><a href="#linux链接的概念" class="headerlink" title="linux链接的概念"></a>linux链接的概念</h3><ul><li><p><strong>硬链接</strong>:硬链接相当于指向的是文件实际存储路径.可以使用这种机制建立到一些重要文件,防止误删</p></li><li><p><strong>软链接</strong>:软连接相当于指向文件路径,删除源文件,就访问不了</p></li><li><p>创建链接:<code>ln</code></p><ol><li>硬链接:<code>ln f1 f2</code>,创建1个f1的硬链接</li><li>软链接:<code>ln -s f1 f3</code>,s代表软连接.创建1个f1的软链接<code>f3-&gt;f1</code></li></ol></li></ul><blockquote><p>ls -a有箭头指向的是软连接</p></blockquote><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><blockquote><p>三种使用模式</p></blockquote><ol><li>命令模式</li><li>输入模式</li><li>底线命令模式</li></ol><ul><li>使用vim就进入了命令模式<ol><li><code>i</code>:切换到输入模式</li><li><code>x</code>:删除当前光标所在的字符</li><li><code>:</code>:切换到底线命令模式,在最底一行输入模式</li><li><code>q</code>:强制退出.<code>w</code>:保存.<code>wq</code>:保存并退出</li><li><code>set nu</code>:设置行号</li><li><code>/</code>或者<code>?</code>+查询字符:查找字符的位置.<code>/</code>从头到尾向下查询<code>?</code>从尾到头向下查询</li></ol></li></ul><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><ul><li>使用root账户去管理</li></ul><blockquote><p>添加用户:<code>useradd -选项 用户名</code></p></blockquote><ul><li><p><code>-m</code>:使用者目录.没有则自动建立</p></li><li><p><code>-c</code>:指定一段注释性描述</p></li><li><p><code>-d 目录</code>:指定用户主目录,如果此目录不存在,则同时使用<code>-m</code>选项,可以创建主目录</p></li><li><p><code>-g 用户组</code>:指定用户所属的用户组</p></li><li><p><code>-G 用户组</code>:指定用户所属的附加组</p></li><li><p><code>-s Shell</code>:指定用户的登录Shell</p></li><li><p><code>-u 用户号</code>:指定用户的用户号,如果同时有<code>-o</code>,则可以重复使用其它用户的标识号</p></li><li><p><strong>创建用户的本质就是在<code>/etc/password</code>种写入一个用户的信息</strong></p></li></ul><blockquote><p>删除指定的用户:<code>userdel 选项 用户名</code></p></blockquote><ul><li><code>-r</code>:删除用户的时候将他的目录也一起删掉</li></ul><blockquote><p>修改用户:<code>usermod 选项 用户名</code></p></blockquote><ul><li><code>-m -c -d -g -G -s -u</code>:这些和以上的选项作用一样</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-12-17-centos home<span class="token punctuation">]</span><span class="token comment"># usermod -d /home/fw1314 fw</span><span class="token comment"># 在/etc/password查看</span>fw:x:1001:1001::/home/fw1314:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><ol><li>切换用户的命令:<code>su username</code>(username是用户名)</li><li>从普通的用户切换到<code>root</code>:<code>su root</code>需要输入密码</li><li>在终端输入exit或者<code>ctrl+d</code>也可以退回到原来的账号</li><li><code>hostname 主机名</code>:修改主机名</li></ol><blockquote><ul><li>root给用户设置密码:<code>passwd 用户名</code></li><li>普通用户直接输入:<code>passwd</code>,修改密码</li></ul></blockquote><h3 id="锁定账户"><a href="#锁定账户" class="headerlink" title="锁定账户"></a>锁定账户</h3><blockquote><ul><li><code>passwd -l 用户名</code>:将该账户锁定</li><li><code>passwd -d 用户名</code>:将这个账户密码清空</li></ul></blockquote><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><blockquote><p>每个用户都有一个用户组,系统可以对一个用户组种的所有用户进行集中管理(例如开发,测试,运维,root等).不同的Linux系统对用户组的规定有所不同</p><p>用户组的管理涉及用户组的添加,修改,删除.组的增加,删除和修改实际上就是对<code>/etc/group</code>文件的更新</p></blockquote><ul><li>创建一个用户组<code>groupadd 组名</code><ul><li>查看<code>cat /etc/group</code></li><li>创建完用户组可以得到一个组的id<code>-g id</code>,如果不指定可以自增</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-12-17-centos home<span class="token punctuation">]</span><span class="token comment"># groupadd fw1314 -g 120</span><span class="token comment"># fw1314:x:120:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除用户组<code>groupdel 组名</code></p><p>修改用户组的权限<code>groupmod 选项 组名</code></p></blockquote><ul><li><code>-g</code>:修改id</li><li><code>-n</code>:修改组名</li></ul><blockquote><p>修改用户组(一般直接在创建用户时使用<code>-G</code>分配组)</p></blockquote><ul><li>普通用户<code>newgrp 组名</code></li></ul><h3 id="文件的查看"><a href="#文件的查看" class="headerlink" title="文件的查看"></a>文件的查看</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root:x:0:0:root:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>/etc/password</code>:用户名:口令(登录密码,不可见):用户标识符:组标识号:注释性描述:主目录:登录shell<ul><li>每一行都代表一个用户,从中可以看出这个用户的主目录在哪,属于哪一个组</li><li>密码放在<code>/etc/shadow</code>中</li></ul></li></ul><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ol><li><code>df</code>:列出文件系统整体的磁盘使用量(<code>-h</code>使用十进制表示)</li><li><code>du</code>:检查当前磁盘空间的使用量<ul><li><code>du -sm /*</code>:检查根目录下所占用的容量</li></ul></li></ol><blockquote><p>Mac或者用Linux挂载一些本地磁盘或者文件</p></blockquote><ul><li><code>mount /dev/fw /mnt/fw</code>:将外部设备<code>/dev/fw</code>挂载到<code>/mnt/fw</code>,因为外部设备都会在<code>/dev/fw</code>中<ul><li><code>umount</code>:卸载.<code>-f</code>强制卸载</li></ul></li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><code>ps 选项</code>:查看系统中正在进行的进程信息</p><p>选项       解释<br>-a         显示当前终端运行的所有进程信息(当前的进程)<br>-u         以用户的信息显示进程<br>-x         显示后台运行进程的参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">A<span class="token operator">|</span>B <span class="token comment">#使用A命令的结果来操作B命令</span><span class="token function">ps</span> -aux <span class="token comment"># 查看所有的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>grep</code>:查找文件中符合条件的字符串</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>ps -ef</strong>:查看父进程的信息</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> nginx<span class="token comment"># 一般使用目录树结构查看</span>pstree -pu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>pstree</strong>:以目录树结构查看<ul><li><code>-p</code>:显示父id</li><li><code>-u</code>:显示用户组</li></ul></li></ul><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><ul><li><code>kill 进程id</code>:杀掉进程<ul><li><code>-9</code>:强制杀掉进程</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">kill</span> -9 <span class="token number">873518</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2022/01/27/nginx/"/>
      <url>/2022/01/27/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><blockquote><p>什么是正向代理</p><p>是一个位于客户端和目标服务器之间的服务器(代理服务器),为了从目标服务器取得内容,客户端向代理服务器发送一个请求并指定目标,然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端.</p></blockquote><ul><li>突破访问限制</li><li>提高访问速度</li><li>隐藏客户端真实IP</li></ul><p><img src="./%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png" alt="正向代理"></p><blockquote><p>什么是反向代理</p><p>是指以代理服务器来接受internet上的连接请求,然后将请求转发给内部网络上的服务器,并将从服务器上得到的结果返回给internet上请求连接的客户端,此时代理服务器对外就表现为一个反向代理服务器</p></blockquote><ul><li>隐藏服务器真实IP</li><li>负载均衡</li><li>提高访问速度</li><li>提供安全保障</li></ul><p><img src="./%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="反向代理"></p><blockquote><p>什么是负载均衡(使用多台服务器提供单一服务)</p><p>它的职责是将网络请求,或者其他形式的负载<strong>均摊</strong>到不同的机器上. <code>避免集群中部分服务器压力过大,而另一些服务器比较空闲的情况</code>. 通过负载均衡,可以让每台服务器获取到适合自己处理能力的负载. 在为高负载服务器分流的同时,还可以避免资源浪费.</p></blockquote><ul><li><strong>动静分离</strong>:为了加快网站的解析速度,可以把动态页面和静态页面由不同的服务器来解析,加快解析速度.降低原来单个服务器的压力</li></ul><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><blockquote><p>全局,events,http</p></blockquote><h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><ol><li><code>nginx -v</code> 查看nginx版本号</li><li><code>systemctl start nginx</code>:开启nginx</li><li><code>systemctl stop nginx</code>:停止nginx</li><li><code>systemctl status nginx</code>:查看状态</li><li><code>systemctl enable nginx</code>:开机启动</li><li><code>nginx -s reload</code>:重新启动nginx</li></ol><h3 id="全局快"><a href="#全局快" class="headerlink" title="全局快"></a>全局快</h3><blockquote><p>全局块:从配置文件到events块之间的内容,主要会设置影响nginx服务器整体运行的配置指令</p></blockquote><ul><li><code>user</code>:运行用户,最好指定为<code>root</code></li><li><code>worker_processes</code>:nginx服务器处理并发服务的关键配置,他的值越大,可以处理的并发也越多,但是会受到硬件,软件等设备的制约</li><li><code>error_log</code>:错误日志文件所在位置 </li><li><code>pid</code>:pid文件所在的位置</li></ul><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><blockquote><p><code>events</code>:影响nginx与用户的网络连接</p></blockquote><ul><li><code>worker_connections</code>:nginx支持的最大的连接数是多少</li></ul><blockquote><p>使用<code>epoll</code>模型提高性能</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">events <span class="token punctuation">&#123;</span>   use epoll<span class="token punctuation">;</span>    worker_connections <span class="token number">4096</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<code>ulimit -a</code>查看每个进程可以处理的文件数,配置文件里修改为大于1024,也会被限制,需要额外再命令行输<code>ulimit -n &lt;number&gt;</code>去修改打开我呢见数限制</p></blockquote><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="http全局快"><a href="#http全局快" class="headerlink" title="http全局快"></a>http全局快</h4><blockquote><p>http全局快配置的指令包括文件引入,MINE-TYPE定义,日志自定义,连接超时时间,单链请求数上限</p></blockquote><ul><li><code>log_format</code>:日志格式设定</li><li><code>access_log</code>:访问日志的位置</li><li><code>sendfile</code>:支持文件发送下载</li><li><code>tcp_nopush</code>:允许或禁止使用socke的<code>TCP_CORK</code>的选项(发送数据包前先缓存数据),此选项仅在使用sendfile的时候使用</li><li><code>tcp_nodelay</code>:是否不将小包组成成大包,提高带宽利用率</li><li><code>keepalive_timeout</code>:连接保持的超时时间,单位秒(s)</li><li><code>types_hash_max_size:</code>用一个散列表来保存<code>MIME type</code>与文件扩展名之间的映射,该参数就是指定该散列表桶的大小的.</li><li><code>gzip</code>:是否开启gzip压缩输出</li><li><code>include</code>:文件扩展名与文件类映射表</li><li><code>default_type</code>:默认文件类型</li></ul><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><blockquote><p>和虚拟主机有关,完全模拟硬件主机.每个http模块苦役包括多个server块,而每个server块就相当于一个虚拟主机</p></blockquote><h5 id="server全局快"><a href="#server全局快" class="headerlink" title="server全局快"></a>server全局快</h5><blockquote><p>最常见的配置就是本虚拟主机的监听配置和本虚拟主机的名称或IP配置</p></blockquote><ul><li><code>listen</code>:监听地址以及端口</li><li><code>server_name</code>:站点域名,可以有多个,用空格隔开</li></ul><h5 id="location"><a href="#location" class="headerlink" title="location"></a>location</h5><blockquote><p>一个server块可以包含多个location块.主要用于nginx服务器接收到的请求字符串,对虚拟主机之外的字符串进行匹配,对特定的请求进行处理</p></blockquote><ul><li><code>/</code>:域名或者主机IP</li><li><code>root</code>:根目录位置</li><li><code>index</code>:默认的主页文件位置,会从根目录下寻找</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location / <span class="token punctuation">&#123;</span>    root /opt/web/Jack-Zhang-1314.github.io<span class="token punctuation">;</span>    index index.html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果设定<code>/test</code>,那么root目录会改为<code>/opt/web/Jack-Zhang-1314.github.io/test</code></p><p>主页文件会改为<code>/opt/web/Jack-Zhang-1314.github.io/test/index.html</code></p></blockquote><ul><li><code>location = /uri</code>:&#x3D; 开头表示精确匹配,只有完全匹配上才能生效.</li><li><code>location ^~ /uri</code>:^~ 开头对 URL 路径进行前缀匹配,并且在正则之前.</li><li><code>location ~ pattern</code>:~ 开头表示区分大小写的正则匹配.</li><li><code>location ~* pattern</code>:~* 开头表示不区分大小写的正则匹配.</li><li><code>location /uri</code>:不带任何修饰符,也表示前缀匹配,但是在正则匹配之后,如果没有正则命中,命中最长的规则.</li><li><code>location /</code>:通用匹配,任何未匹配到其它 location 的请求都会匹配到,相当于 switch 中的 default.</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>通常将反向代理做为公网访问地址,web服务器是内网,即通过nginx配置外网访问web服务器内网</p></blockquote><ul><li>隐藏服务保证内网安全</li></ul><blockquote><p>通过<code>proxy_pass</code>来配置</p></blockquote><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server &#123;  listen       80;  server_name  www.zhengqing520.com;  location &#x2F; &#123; # 访问80端口后的所有路径都转发到 proxy_pass 配置的ip中    root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;    index  index.html index.htm;    proxy_pass 127.0.0.1:8080;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>server_name</code>服务器地址或绑定域名</li><li><code>proxy_pass</code>:配置反向代理的ip地址和端口号(url地址需加上http:&#x2F;&#x2F; 或 <code>https://</code>)</li></ol>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/01/21/docker/"/>
      <url>/2022/01/21/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ol><li>镜像时一种轻量级,可执行的独立软件包,用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,环境运行时,库,环境变量等</li><li><strong>容器(container)</strong>:Docker利用容器技术,独立运行一个,或者一组应用,通过镜像来创建<ul><li>容器可以启动,停止,删除等基本命令</li><li>可以简单理解为一个简单的linux系统</li></ul></li><li><strong>仓库(repository)</strong>:存放镜像的地方(分为私有和公有)<ul><li>由于Docker hub是国外的(配置镜像加速)</li></ul></li></ol><p><img src="./docker%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="docker架构图"></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote><p>官方文档:<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p></blockquote><ol><li><p>安装<code>yum-utils</code>包:<code>yum install -y yum-utils</code></p></li><li><p>设置镜像的库:</p><ul><li><code>yum-config-manager</code>是一个程序,它可以管理主要的yum配置选项,切换启用或禁用的存储库,以及添加新的存储库</li><li><code>使用--add-repo快速添加yum源</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum-config-manager \--add-repo \https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>更新软件包的索引Centos 8:<code>yum makecache</code>,如果是7:<code>yum makecache fast</code></p></li><li><p>安装docker相关的源(<code>docker-ce</code>社区版,ee 企业版)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果安装特定版本的docker<code>yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code></p></blockquote></li><li><p>启动docker:<code>systemctl start docker</code></p></li><li><p>使用<code>docker version</code>是否安装成功</p></li><li><p>测试:<code>docker run hello-world</code></p></li><li><p>查看下载的镜像:<code>docker images</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   3 months ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>卸载docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 卸载依赖yum remove docker-ce docker-ce-cli containerd.io# 删除资源rm -rf &#x2F;var&#x2F;lib&#x2F;docker # docker的默认工作路径rm -rf &#x2F;var&#x2F;lib&#x2F;containerd # https:&#x2F;&#x2F;www.51cto.com&#x2F;article&#x2F;677744.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><blockquote><p>在阿里云的<code>容器服务里</code>找到<code>容器镜像服务</code>,打开<code>镜像工具</code>,打开<code>镜像加速器</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p &#x2F;etc&#x2F;dockertee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxxx.mirror.aliyuncs.com&quot;]&#125;EOFsystemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker的工作原理"><a href="#docker的工作原理" class="headerlink" title="docker的工作原理"></a>docker的工作原理</h3><blockquote><p>helloword的运行原理</p></blockquote><p><img src="./run%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="run的运行流程"></p><ul><li>工作流程:<ol><li>Docker是一个Client-Server结构的系统,Docker的守护进程运行在主机上.通过Socket从客户端访问</li><li><code>DockerServe</code>接收到<code>Docker-Client</code>的指令就会执行这个命令</li></ol></li></ul><p><img src="./%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="docker的工作流程"></p><ul><li>docker与虚拟机对比</li></ul><p><img src="https://pic2.zhimg.com/50/v2-e30ef11428ac454d101f2b7d3ffc067e_720w.jpg?source=1940ef5c" alt="比较"></p><ol><li>Docker有比虚拟机更少的抽象层</li><li>docker利用是宿主机的内核,虚拟机是需要Guest OS</li><li>docker不需要像虚拟机一样重新加载一个操作系统的内核,避免引导.虚拟机时加载Guset OS,分钟级别的,docker时利用宿主机操作系统,省略了这个复杂的功能</li></ol><table><thead><tr><th></th><th>Docker容器</th><th>LXC</th><th>VM</th></tr></thead><tbody><tr><td>虚拟化类型</td><td>OS虚拟化</td><td>OS虚拟化</td><td>OS虚拟化</td></tr><tr><td>性能</td><td>&#x3D;物理机性能</td><td>&#x3D;物理机性能</td><td>5%-20%的损耗</td></tr><tr><td>隔离性</td><td>NS隔离</td><td>NS隔离</td><td>强</td></tr><tr><td>QoS</td><td>Cgroup弱</td><td>Cgroup弱</td><td>强</td></tr><tr><td>安全性</td><td>中</td><td>差</td><td>强</td></tr><tr><td>GusetOS</td><td>只支持Linux</td><td>只支持Linux</td><td>全部</td></tr><tr><td>可迁移性</td><td>强</td><td>弱</td><td>强</td></tr></tbody></table><h3 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a><strong>镜像(image)</strong></h3><blockquote><p>镜像时一种轻量级,可执行的独立软件包,用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,环境运行时,库,环境变量等</p></blockquote><ol><li>例如<code>tomcat镜像</code>运行起来之后<code>tomcat01容器</code>来提供服务</li><li>并且这个镜像可以创建多个容器(最终服务运行或者项目运行实在容器中)</li><li>所有的应用通过docker应用打包,可以直接跑起来</li></ol><blockquote><p>镜像获取的方法</p></blockquote><ol><li>从远程仓库下载</li><li>拷贝别人的镜像</li><li>自己制作一个<code>DockerFile</code></li></ol><h4 id="Docker镜像加载的基本原理"><a href="#Docker镜像加载的基本原理" class="headerlink" title="Docker镜像加载的基本原理"></a>Docker镜像加载的基本原理</h4><blockquote><p>UnionFS(联合文件系统):下载的时候一层一层的输出就是这个</p></blockquote><ul><li><strong>UnionFS(联合文件系统)</strong>:Union文件系统(UnifonFS)是一种分层,分量级并且高性能的文件系统,它支持对文件系统的修改作为一次提交来一层层的叠加,同时可以将不同的目录挂载到一个虚拟文件系统下(<code>unite serveral directories into a single virtual filesystem</code>).Union 文件系统时Docker镜像的基础,镜像可以通过分层类进行继承,基于镜像(没有父镜像),可以制作各种具体的应用镜像</li><li><strong>特性</strong>:一次同时加载多个文件系统,但是从外面看只能看到一个文件系统,联合加载会把各层文件系统叠加起来,这样<span style="color:red">最终文件系统会包含所有底层的文件和目录</span>(例如底层的centos文件会给所有的容器使用)</li></ul><blockquote><p>Docker 镜像加载原理</p></blockquote><ul><li>docker镜像实际室友一层一层文件系统组成</li><li><strong>bootfs(boot file system)</strong>:包含bootloader和kernel.<code>bootloader</code>主要加载<code>kernel</code>.Linux刚启动会加载bootfs文件系统,在Docker镜像最底层就是bootfs,并且与典型的Linux&#x2F;Unix系统是一样的,包含bootf加载器和内核.当bootf加载完成之后整个内核就在<strong>内存</strong>中,此时的内存使用权就有bootfs转交给内核,系统卸载bootfs</li><li><strong>rootfs(root file system)</strong>:在bootfs之上.包含的就是典型的Linux系统中的<code>/dev,/bin,/usr</code>等.rootfs就是不同操作系统的发行版,比如<code>Ubuntu</code>,<code>Centos</code>等</li></ul><p><img src="./docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86.png" alt=" "></p><ul><li>对于精简过的OS(操作系统),rootfs可以很小,只需要最基本的命令.工具和程序库就可以了,底层使用主机的内核就可以了,自己只需要提供rootfs.</li></ul><blockquote><p>分层理解</p></blockquote><ol><li>所有的Docker镜像都起始于一个基础镜像,当金星修改或增加新的内容时,就会在当前的镜像层之上,创建新的镜像层<ul><li>例如Centos创建一个新的镜像,此镜像位于第一层,如果在该镜像中加入Python包,就会在基础镜像层上创建第二个镜像层;如果继续添加,就会创建第三个镜像层</li></ul></li><li>在添加额外镜像的同时,镜像始终保持所有镜像的组合.<ul><li>例如下图中,每个层中都有三个文件,且保持相互隔离<br><img src="./dcoker%E4%B8%AD%E7%9A%84%E5%88%86%E5%B1%82.png" alt=" "></li></ul></li></ol><blockquote><p>特点</p></blockquote><ol><li>docker镜像都是只读的,当容器启动,一个新的科协曾被加载到镜像的顶部</li><li>这一层通常是容器层,容器之下都是镜像层</li></ol><p> <img src="./docker%E9%95%9C%E5%83%8F%E7%9A%84%E7%89%B9%E7%82%B9.png" alt="docker镜像的特点 "></p><h3 id="Commit镜像"><a href="#Commit镜像" class="headerlink" title="Commit镜像"></a>Commit镜像</h3><ol><li><code>docker commit -m=&quot;提交信息&quot; -a=&quot;作者&quot;</code> 提交容器成为一个新的副本</li><li>可以使用<code>docker images</code>,查看自己保存的镜像</li></ol><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><blockquote><p>参考文档:<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p></blockquote><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ol><li><code>docker version</code>:显示docker的版本信息</li><li><code>docker info</code>:显示docker的系统信息,包括镜像和容器的数量</li><li><code>docker 命令 --help</code>:帮助命令</li></ol><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li><code>docker images</code>:查看所有本地主机上的镜像</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    feb5d9fea6a5   3 months ago   13.3kB# 可选项  -a, --all     # 列出所有的镜像  -q, --quiet   # 只显示镜像的ID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>REPOSITORY</code>:镜像的仓库源</li><li><code>TAG</code>:镜像的标签</li><li><code>IMAGE ID</code>:镜像的ID</li><li><code>CREATED</code>:镜像的创建时间</li><li><code>SIZE</code>:镜像的大小</li></ol><ul><li><code>docker search 镜像</code>:搜索镜像</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker search mysqlNAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   11997     [OK]       mariadb                           MariaDB Server is a high performing open sou…   4595      [OK]       mysql&#x2F;mysql-server                Optimized MySQL Server Docker images. Create…   899                  [OK]# 可选项,通过搜索来过滤--filter &#x3D; STARS &#x3D; 3000  搜索出的镜像是STARS&gt;3000的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>docker pull</code>下载镜像</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载镜像 docker pull 镜像名[:tags][root@VM-12-17-centos &#x2F;]# docker pull mongoUsing default tag: latest # 如果不屑tag,默认就是latestlatest: Pulling from library&#x2F;mongo7b1a6ab2e44d: Pull complete # 分层下载,docker image的核心  联合文件系统90eb44ebc60b: Pull complete 5085b59f2efb: Pull complete c7499923d022: Pull complete 019496b6c44a: Pull complete c0df4f407f69: Pull complete 351daa315b6c: Pull complete a233e6240acc: Pull complete a3f57d6be64f: Pull complete dd1b5b345323: Pull complete Digest: sha256:5be752bc5f2ac4182252d0f15d74df080923aba39700905cb26d9f70f39e9702 # 签名Status: Downloaded newer image for mongo:latestdocker.io&#x2F;library&#x2F;mongo:latest # 真实地址# 下面两者等价docker pull docker.io&#x2F;library&#x2F;mongo:latestdocker pull mysql# 指定版本下载docker pull mongo:3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>docker rmi</code>:删除镜像</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi -f 镜像id # 删除指定的镜像docker rmi -f 镜像id 镜像id   # 删除多个指定的镜像docker rmi -f $(docker images -aq) # 删除全部的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><hr></hr><blockquote><p>下载centos镜像来测试<code>docker pull centos</code></p></blockquote><h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><ul><li><strong>docker run [可选参数] image</strong></li></ul><blockquote><p>参数说明</p></blockquote><ul><li>–name&#x3D;”Name” 容器名字 tomcat01 tomcat01,用来区分容器</li><li>-d            后台方式运行</li><li>-it           使用交互方式运行,进入容器看内容</li><li>-p            指定容器的端口 -p 8080:8080<ul><li>-p ip:主机端口:容器端口</li><li>-p 主机端口:容器端口   (常用)</li><li>ip 容器端口</li><li>容器端口</li></ul></li><li>-P            随机指定端口</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试,启动并进入容器[root@VM-12-17-centos &#x2F;]# docker run -it centos &#x2F;bin&#x2F;bash[root@12164c10567a &#x2F;]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列出所有的运行容器"><a href="#列出所有的运行容器" class="headerlink" title="列出所有的运行容器"></a>列出所有的运行容器</h4><ul><li><strong>docker ps</strong>:列出正在运行的容器<ul><li><code>-a</code>:列出正在运行的容器并带出历史运行过的容器</li><li><code>-n=?</code>:显示最近创建过的容器,例如<code>-n=1</code>显示最近的一个容器</li><li><code>-q</code>:只显示容器编号</li></ul></li></ul><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><ul><li><strong>exit</strong>:直接退出容器并停止</li><li><code>Ctrl+P+Q</code>:容器不停止退出</li></ul><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><ul><li><strong>docker rm 容器id</strong>:删除镜指定的容器,不能删除正在运行的容器,如果强制删除<code>rm -f</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rm -f $(docker ps -aq) # 删除全部的容器docker ps -a -q|xargs docker rm   # 删除所有的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h4><ul><li><strong>docker start  容器id</strong>:启动容器</li><li><strong>docker restart 容器id</strong>:重启容器</li><li><strong>docker stop 容器id</strong>:停止当前容器</li><li><strong>docker kill 容器id</strong>:强制停止容器</li></ul><h3 id="常用的其它命令"><a href="#常用的其它命令" class="headerlink" title="常用的其它命令"></a>常用的其它命令</h3><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h4><ul><li><strong>docker run -d 镜像名</strong></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker run -d centos# docker ps:发现centos停止了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>常见的问题:<ol><li><span style="color:red">docker容器使用后台运行,就必须有一个前台进程,docker发现没有应用,就会自动停止</span></li><li>例如nginx容器启动后,发现自己没有提供服务就会自动停止</li></ol></li></ul><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><ul><li><strong>docker -f -t –tail</strong><ul><li><code>-f</code>:显示日志</li><li><code>-t</code>:带上时间戳</li><li><code>--tail</code>:显示多少条日志</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker -f -t --tail 10 af1770f5884f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看容器内部的进程命令"><a href="#查看容器内部的进程命令" class="headerlink" title="查看容器内部的进程命令"></a>查看容器内部的进程命令</h4><ul><li><strong>docker top 容器id</strong></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos ~]# docker top 4fc2d1f7bf97UID                 PID                  PPID    C         STIME               TTY                 TIME                CMDroot                12339               12319    0        15:58               pts&#x2F;0               00:00:00            &#x2F;bin&#x2F;bash              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看容器的元数据-重要"><a href="#查看容器的元数据-重要" class="headerlink" title="查看容器的元数据(重要)"></a>查看容器的元数据(重要)</h4><ul><li><strong>docker inspect 镜像&#x2F;容器id</strong></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos ~]# docker inspect 7a447721e405<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><blockquote><p>通常容器都是使用后台方式运行.需要进入容器修改一些配置</p></blockquote><ul><li><strong>docker exec -it 容器id bashShell</strong>&#x2F;<strong>docker attach 容器id</strong></li></ul><ol><li>第一种:<code>docker exec -it 7a447721e405 /bin/bash</code></li><li>第二种:<code>docker attach 7a447721e405</code></li></ol><ul><li>注意:<span style="color:red">第一个是进入容器后开启一个新的终端,第二个是进入一个容器正在执行的终端</span></li></ul><h4 id="从容器中拷贝到主机上"><a href="#从容器中拷贝到主机上" class="headerlink" title="从容器中拷贝到主机上"></a>从容器中拷贝到主机上</h4><ul><li><strong>docker cp</strong></li></ul><blockquote><p>将已经停止的容器中的内容拷贝到主机</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker cp 7a447721e405:&#x2F;home&#x2F;test.md &#x2F;home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用-v卷的技术可以实现自动同步</p></blockquote><h4 id="查看cpu状态"><a href="#查看cpu状态" class="headerlink" title="查看cpu状态"></a>查看cpu状态</h4><ul><li><strong>docker stats</strong>:查看docker的cpu状态</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>命令</th><th>原文</th><th>译</th></tr></thead><tbody><tr><td>attach</td><td>Attach to a running container</td><td>当前shel11下attach连接指定运行镜像</td></tr><tr><td>build</td><td>Build an image from a Dockerfile</td><td>通过Dockerfile 定制镜像</td></tr><tr><td>commit</td><td>Create a new image from a container changes</td><td>提交当前容器为新的镜像</td></tr><tr><td>cp</td><td>Copy files&#x2F;folders from the containers filesystem to the host path</td><td>从容器中拷贝指定文件或者目录到宿主机中</td></tr><tr><td>create</td><td>Create a new container</td><td>创建一个新的容器,同run, 但不启动容器</td></tr><tr><td>diff</td><td>Inspect changes on a container’s filesys tem</td><td>查看docker容器变化</td></tr><tr><td>events</td><td>Get rea1 time events from the server</td><td>从docker 服务获取容器实时事件</td></tr><tr><td>exec</td><td>Run a command in an existing container</td><td>在已存在的容器 上运行命令</td></tr><tr><td>export</td><td>Stream the contents of a container as a tar archive</td><td>导出容器的内容流作为一个tar归档文件[对应import ]</td></tr><tr><td>history</td><td>Show the history of an image</td><td>展示一个镜像形成历史</td></tr><tr><td>images</td><td>List images</td><td>列出系统当前镜像:</td></tr><tr><td>import</td><td>Create a new filesystem image from the contents of a tarba1l</td><td>从tar包中的内容创建一个新的文件系统镜像[对应export]</td></tr><tr><td>info</td><td>Display sys tem-wide i nformation</td><td>显示系统相关信息</td></tr><tr><td>inspect</td><td>Return 1ow-1eve1 information on a container</td><td>查看容器详细信息</td></tr><tr><td>kill</td><td>Ki11 a running container</td><td>ki1l 指定docker 容器</td></tr><tr><td>load</td><td>Load an image from a tar archive</td><td>从一个tar包中加载一个镜像[对应save]</td></tr><tr><td>login</td><td>Register or Login to the docker registry server</td><td>住册或者登陆一个docker源服务器</td></tr><tr><td>logout</td><td>Log out from a Docker registry server</td><td>从当前Docker registry 退出</td></tr><tr><td>1ogs</td><td>Fetch the 1ogs of a container</td><td>输出当前容器日志信息</td></tr><tr><td>port</td><td>lookup the public-facing port which is NAT-ed to PRIVATE_ PORT</td><td>查看映射端口对应的容器内部源端</td></tr><tr><td>pause</td><td>Pause a11 processes within a container</td><td>暂停容器</td></tr><tr><td>ps</td><td>List containers</td><td>列出容器列表</td></tr><tr><td>pull</td><td>Pull an image or a repository from the docker registry server</td><td>从docker镜像源服务器拉取指定镜像或者库镜像</td></tr><tr><td>push</td><td>Push an image or a repository to the docker registry server</td><td>推送指定镜像或者库镜像至docker源服务器</td></tr><tr><td>restart</td><td>Restart a running container</td><td>重启运行的容器</td></tr><tr><td>rm</td><td>Remove one or more : containers</td><td>移除一个或者多个容器</td></tr><tr><td>rmi</td><td>Remove one or more images</td><td>移除一个或多个镜像[无容器使用该镜像才可删除,否则需删除相关容器才可继续或-f强制删除]</td></tr><tr><td>run</td><td>Run a command in a . new container</td><td>创建一个新的容器并运行一个命令</td></tr><tr><td>save</td><td>Save an image to a tar archive</td><td>保存一个镜像为一个tar包[对应load]</td></tr><tr><td>search</td><td>Search for an image on the Docker Hub</td><td>在docker hub中搜索镜像</td></tr><tr><td>start</td><td>Start a stopped containers</td><td>启动容器</td></tr><tr><td>stop</td><td>Stop a running containers</td><td>停止容器</td></tr><tr><td>tag</td><td>Tag an image into a repository</td><td>给源中镜像打标签</td></tr><tr><td>stats</td><td>Display a live stream of container(s) resource usage statistics</td><td>查看cpu状态</td></tr><tr><td>top</td><td>Lookup the running processes of a container</td><td>查看容器中运行的进程信息</td></tr><tr><td>unpause</td><td>Unpause a paused container</td><td>取消暂停容器</td></tr><tr><td>version</td><td>Show the docker vers ion information</td><td>查看docker版本号</td></tr><tr><td>wait</td><td>B1ock until a container stops, then print its exit code</td><td>截取容器停止时的退出状态值</td></tr></tbody></table><h2 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h2><blockquote><p>以装nginx为例</p></blockquote><ol><li>搜索镜像:<code>docker search nginx</code>(dockerhub更方便)</li><li>下载镜像:<code>docker pull nginx</code></li><li>查找镜像:<code>docker images</code></li><li>以后台方式运行容器,改名并且映射端口后:<code>docker run -d --name nginx01 -p 3401:80 nginx</code></li><li>查看运行的容器:<code>docker ps</code></li><li>测试容器是否成功:<code>curl localhost:3401</code></li><li>进入容器内部:<code>docker exec -it nginx01 /bin/bash</code></li><li>停止容器:<code>docker stop nginx01</code></li><li>删除指定容器:<code>docker rm nginx01</code></li></ol><p><img src="./%E7%AB%AF%E5%8F%A3%E6%9A%B4%E9%9C%B2.png" alt="端口暴露"></p><blockquote><p>安装<code>tomcat</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 官网使用命令docker run -it --rm -p 8888:8080 tomcat:9.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>nginx的案列是启动在后台,停止了容器还是可以查到.</li><li><code>docker run -it --rm</code>:<code>--rm</code>一般用来测试,用完就会被删除</li></ol><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><blockquote><p>Docker 容器中产生的数据,同步到本地.本地的数据也可以在容器中查看</p></blockquote><ol><li>容器和主机可以数据共享</li><li>容器和容器之间也可以数据共享</li></ol><blockquote><ul><li>windows:<code>docker run -it -v /d/test:/home centos</code>,路径要和linux的风格相同</li><li>linux: <code>docker run -it -v /home/test:/home centos</code></li><li>解释一下linux的吧:就是将<strong>容器中</strong><code>/home</code>目录下的文件同步到<strong>主机中</strong><code>/home/test</code></li></ul></blockquote><ul><li>使用<code>docker inspect</code>:查看容器的详细信息</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 挂载&quot;Mounts&quot;: [    &#123;        &quot;Type&quot;: &quot;bind&quot;,        &quot;Source&quot;: &quot;&#x2F;d&#x2F;test&quot;, # 主机内地址        &quot;Destination&quot;: &quot;&#x2F;home&quot;, # docker容器的地址        &quot;Mode&quot;: &quot;&quot;,        &quot;RW&quot;: true,        &quot;Propagation&quot;: &quot;rprivate&quot;    &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装mongoDB,官网:<a href="https://hub.docker.com/_/mongo">https://hub.docker.com/_/mongo</a>(<span style="color:red">mongoDB的配置文件和数据文件都在&#x2F;data下面</span>)</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># -v:数据卷挂载# -e:设置环境配置# 官方安装docker run --name some-mongo -v &#x2F;my&#x2F;own&#x2F;datadir:&#x2F;data&#x2F;db -d mongo# 自己尝试连接docker run -d -p 27017:27017 -v &#x2F;g&#x2F;DBMS&#x2F;mongo&#x2F;data:&#x2F;data -e MONGO_INITDB_ROOT_USERNAME&#x3D;root -e MONGO_INITDB_ROOT_PASSWORD&#x3D;123456 mongo# 启动之后可以在本地使用连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><ol><li><code>docker run -d -P --name nginx01 -v /etc/nginx nginx</code>,不指定主机的映射目录(匿名挂载)</li><li><code>docker run -d -P --name nginx01 -v test:/etc/nginx nginx</code>,不指定主机的映射目录(具名挂载)</li><li>查看所有的<code>volumn</code>(挂载卷)的情况</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">G:\&gt;docker volume lsDRIVER    VOLUME NAMElocal     0c65a12280af5da18c06169e98ceb7493a80082ac39cf5fc5a01263958ede773local     test...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是匿名挂载,会自动映射到<code>&quot;/var/lib/docker/volumes/xxx/_data&quot;</code></li></ul><blockquote><p>使用<code>docker volume inspect test</code>可以查找挂载路径</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[ &#123;   &quot;CreatedAt&quot;: &quot;2022-01-22T10:27:43Z&quot;,   &quot;Driver&quot;: &quot;local&quot;,   &quot;Labels&quot;: null,   &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;test&#x2F;_data&quot;,   &quot;Name&quot;: &quot;test&quot;,   &quot;Options&quot;: null,   &quot;Scope&quot;: &quot;local&quot; &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过具名挂载可以很容易的找到一个卷,大多数情况下在使用<code>具名挂载</code></p></blockquote><ol><li><code>-v 容器内路径</code>:匿名挂载</li><li><code>-v 卷名:容器内路径</code>:具名挂载</li><li><code>-v /宿主路径:/容器内路径</code>:指定路径挂载</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># ro &#x3D;&#x3D;&#x3D;&gt;readonly 只读,只能通过宿主机来操作,容器内部无法操作# rw &#x3D;&#x3D;&#x3D;&gt;readwrite 可读可写(默认)# 如果设置了这些权限,容器就有限定docker run -d -P --name nginx01 -v test:&#x2F;etc&#x2F;nginx:ro nginxdocker run -d -P --name nginx01 -v test:&#x2F;etc&#x2F;nginx:rw nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><blockquote><p>很多官方的镜像都是基础包.利用dockerfile自己去搭建镜像</p></blockquote><ul><li>构建的大概流程<ol><li>编写一个<code>dockerFile</code>文件</li><li><code>docker build</code>构建成为一个镜像</li><li><code>docker run</code>运行镜像</li><li><code>docker push</code>发布镜像(dockerhub仓库)</li></ol></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM scratchADD centos-8-x86_64.tar.xz &#x2F;LABEL org.label-schema.schema-version&#x3D;&quot;1.0&quot;     org.label-schema.name&#x3D;&quot;CentOS Base Image&quot;     org.label-schema.vendor&#x3D;&quot;CentOS&quot;     org.label-schema.license&#x3D;&quot;GPLv2&quot;     org.label-schema.build-date&#x3D;&quot;20210915&quot;CMD [&quot;&#x2F;bin&#x2F;bash&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DockerFile构建"><a href="#DockerFile构建" class="headerlink" title="DockerFile构建"></a>DockerFile构建</h3><ol><li>每个保留关键字(指令)都必须是大写字母</li><li>执行从上到下的顺序</li><li># 表示注释</li><li>每一个指令都会创建一个新的镜像层并提交</li></ol><p><img src="./dockerFile%E6%9E%84%E5%BB%BA.png" alt="dockerFile构建"></p><ul><li><code>DockerFile</code>:构建文件,定义步骤,生成源代码</li><li><code>DockerImages</code>:通过<code>DockerFile</code>构建生成的镜像(最终运行和发布)</li><li><code>Docker容器</code>:镜像运行起来提供的服务器</li></ul><blockquote><p>dockerFile的zhiling</p></blockquote><table><thead><tr><th>FROM</th><th>基础镜像,构建的开始</th></tr></thead><tbody><tr><td>MAINTAINER(已启用)</td><td>镜像的作者,姓名+邮箱</td></tr><tr><td>LABEL</td><td>代替<code>MAINTAINER</code>,LABEL指令添加元数据到一个镜像。LABEL是一个键值对(可以有很多)</td></tr><tr><td>RUN</td><td>构建的时刻运行的命令</td></tr><tr><td>ADD</td><td>步骤,需要添加的镜像文件</td></tr><tr><td>WORKDIR</td><td>镜像的工作目录</td></tr><tr><td>VOLUME</td><td>挂载的目录</td></tr><tr><td>EXPOSE</td><td>暴露端口(不暴露就需要用<code>-p</code>)</td></tr><tr><td>CMD</td><td>指定容器启动时候要运行的命令,只有最后一个会生效,可被ENTRYPOINT替代</td></tr><tr><td>ENTRYPOINT</td><td>指定容器启动时候要运行的命令,可以追加命令</td></tr><tr><td>ONBUILD</td><td>构建一个被继承的<code>DockerFile</code>就会运行<code>ONBUILD</code>指令,触发指令</td></tr><tr><td>COPY</td><td>类似ADD,将文件拷贝到镜像中</td></tr><tr><td>ENV</td><td>构建的时候生成环境变量</td></tr></tbody></table><blockquote><p>构建centos</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.编写DockerFile文件FROM centosLABEL name&#x3D;&quot;fw&quot; email&#x3D;&quot;zyj17715640603@gmail.com&quot;ENV MYPATH &#x3D; &#x2F;usr&#x2F;localWORKDIR $&#123;MYPATH&#125; # 进入容器之后的工作目录RUN yum -y install vim # 添加工具RUN yum -y install net-tools # 添加工具EXPOSE 80 # 暴露端口CMD echo $MYPATHCMD echo &quot;---------&quot;CMD &#x2F;bin&#x2F;bash# 2.通过这个构建镜像# 命令 docker build -f (构建的DockerFile文件) -t (输出的镜像名) .[root@VM-12-17-centos Docker]# docker build -f DockerFile  -t mycentos:0.1 .# 3.查看镜像的构建过程&#96;docker history 镜像名&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<span style="color:red">如果直接将文件命名<code>Dockerfile</code>,那么不需要加<code>-f</code>docker会自动寻找</span></li><li>使用<code>ADD</code>添加的文件会自动解压,例如<code>apache-tomcat-8.5.75.tar.gz</code></li></ul><blockquote><p><code>CMD</code>和<code>ENTRYPOINT</code>的区别</p></blockquote><ul><li>大部分linux发行版的基础镜像里面调用CMD命名,指定容器启动后直接执行<code>/bin/bash</code>或者<code>/bin/sh</code>,这样镜像就会默认进入交互的<code>shell</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centos...CMD &quot;&#x2F;bin&#x2F;bash&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>CMD给出的是一个容器的默认可执行体,也就是容器启动以后,默认的执行命名.</p></li><li><p>也就是说,如果<span style="color:red">docker run没有指定的任何的执行命名或者dockfile里面也没有entrypoint</span>,那么就会执行cmd指定的默认的执行命名执行</p></li><li><p>有三种用法:</p><ol><li><p>shell格式的形式:例如<code>npm install</code>.命令默认是在<code>/bin/sh -c</code>下执行的.</p><pre class="line-numbers language-dockerFile" data-language="dockerFile"><code class="language-dockerFile">FROM centos...CMD echo &quot;hello&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>当我们运行<code>docker run...</code>的时候,会调用<code>/bin/bsah</code>然后打印出<code>hello</code></li></ul></li><li><p>exec格式的形式(推荐使用):例如<code>[&quot;npm&quot;,&quot;install&quot;]</code>.并且第一个参数必须是全路径,并且一个<code>dockerfile</code>只能有一个cmd,如果有多个,则指会后最后一个生效.</p><ul><li>上面的方式改写:<code>[&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo&quot;,&quot;hello&quot;]</code></li><li><span style="color:red">如果我们在run的时候指定了命令或者有entrypoint,那么cmd就会被覆盖</span><ul><li><code>docker run ... echo &quot;world&quot;</code>,那么控制台就会打印<code>world</code>,而不是默认的hello</li></ul></li></ul></li></ol></li><li><p><code>ENTRYPOINT</code>默认是在shell环境下执行的,与CMD有区别.</p><ul><li>如果run命名后有东西,那么全部会作为<code>entrypoint</code>的参数.</li><li>如果run后面没有东西,但是CMD有,那么CMD的全部内容会作为entrypoint的参数,这同时是cmd的第三种用法</li></ul></li><li><p>exec形式:将CMD当作默认的参数</p><pre class="line-numbers language-doeckerFile" data-language="doeckerFile"><code class="language-doeckerFile">FROM centeos...CMD [&quot;hello&quot;]ENTRYPOINT [&quot;echo&quot;,&quot;hello&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果运行<code>doecker run ...</code>,会直接打印<code>hello hello</code></li><li>如果运行<code>docker run ... world</code>,那么cmd就会被覆盖,打印<code>hello world</code></li></ul></li><li><p>如果使用shell模式:shell的形式会使<code>ENTRYPOINT</code>忽略任何CMD或者docker运行的命令行参数</p></li><li><p>如果需要提供默认的命令或在docker容器运行时可以从命令行覆盖的参数时,使用<code>CMD</code></p></li><li><p>最好的选择是使用<code>exec</code>,而不是shell命令</p></li></ul><h3 id="自己手动配置tomcat的Dockerfile"><a href="#自己手动配置tomcat的Dockerfile" class="headerlink" title="自己手动配置tomcat的Dockerfile"></a>自己手动配置tomcat的Dockerfile</h3><blockquote><p>首先编写<code>Dockerfile</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centosLABEL name&#x3D;&quot;fw&quot; mail&#x3D;&quot;zyj17715640603@gmail.com&quot;COPY  README.md &#x2F;usr&#x2F;local&#x2F;README.mdADD jdk-17_linux-x64_bin.tar.gz &#x2F;usr&#x2F;localADD apache-tomcat-9.0.58.tar.gz &#x2F;usr&#x2F;localRUN yum -y install vimENV MYPATH  &#x2F;usr&#x2F;localWORKDIR $&#123;MYPATH&#125;ENV JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk-17.0.2ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58# :代表把之前的路径也加入搜索路径(也就是分割符),windows是 ;ENV PATH  $PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;CATALINA_HOME&#125;&#x2F;lib:$&#123;CATALINA_HOME&#125;&#x2F;binEXPOSE 8080CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58&#x2F;bin&#x2F;logs&#x2F;catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建:<code>docker build -t diytomcat .</code></li><li>启动:<code>tomcat</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 3401:8080 --name diytomcat01 -v &#x2F;home&#x2F;tomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58&#x2F;webapps&#x2F;test -v &#x2F;home&#x2F;tomcat&#x2F;logs:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.58&#x2F;webapps&#x2F;logs diytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><blockquote><p>发布到Dockerhub</p></blockquote><ol><li><p>登录账号<code>docker login -u (user) -p (password)</code></p></li><li><p>给images打一个标签(&#x2F;之前的得是docker用户名才能上传成功)</p><ul><li><code>denied: requested access to the resource is denied</code>:(可能用户名不对)</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker tag divtomcat fw1314&#x2F;divtomcat:v0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上传到远程仓库<code>docker push fw1314/divtomcat:v0.0.1</code></p><ul><li>提交的时候也是按层级提交</li></ul></li></ol><blockquote><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances">发布到阿里云容器</a></p></blockquote><ol><li>在阿里云容器服务中创建个人实例</li><li>创建命名空间</li><li>创建容器镜像(选择本地)</li><li>参考<code>基本信息</code></li></ol><blockquote><p>镜像的导入导出</p></blockquote><ol><li><code>docker save</code>:将一个或多个<strong>image</strong>打包保存的工具<ul><li>官方:<code>Usage:docker save [OPTIONS] IMAGE [IMAGE...]</code></li><li>例如<code>docker save -o images.tar postgres:9.6 mongo:3.4</code>:将镜像库中的postgres和mongo打包</li></ul></li><li><code>docker load</code>:将打包后的镜像载入进来<ul><li>官方:<code>Usage:  docker load [OPTIONS]</code></li><li>例如:<code>docker load -i images.tar</code>把postgres:9.6和mongo:3.4载入进来,如果本地镜像库已经存在这两个镜像,将会被覆盖</li></ul></li></ol><blockquote><p>容器的快照</p></blockquote><ol><li><code>docker export</code>:将container的文件系统进行打包(只保存当时的快照)<ul><li>官方:<code>Usage:docker export [OPTIONS] CONTAINER</code></li><li>例如:<code>docker export -o postgres-export.tar postgres(指定的容器)</code>将正在执行的postgres容器打包</li></ul></li><li><code>docker import</code><ul><li>官方:<code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code>:可以指定路径和重新命名</li><li>例如:<code>docker import postgres-export.tar postgres:latest</code>导入后会成为一个<code>image</code>(不会导出容器)</li></ul></li></ol><blockquote><p>区别</p></blockquote><ol><li><code>docker save</code>保存的是镜像(image),<code>docker export</code>保存的是容器(container)</li><li><code>docker load</code>用来载入镜像包,<code>docker import</code>用来载入容器包,但两者都会恢复为镜像</li><li><code>docker load</code>不能对载入的镜像重命名,而<code>docker import</code>可以为镜像指定新名称</li></ol><blockquote><p>参考:<a href="https://jingsam.github.io/2017/08/26/docker-save-and-docker-export.html">https://jingsam.github.io/2017/08/26/docker-save-and-docker-export.html</a></p></blockquote><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><ul><li>首先查看服务器的网络<code>ifconfig</code>,显示三个网络<ol><li><code>docker0</code>:docker自己生成的地址</li><li><code>eth0</code>:服务器的内网地址</li><li><code>lo</code>:本地回环地址</li></ol></li><li>启动一个容器,例如tomcat</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@VM-12-17-centos &#x2F;]# docker run -d -P --name tomcat01 tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>发现没有<code>ip addr</code>命令,进入容器<code>docker exec -it tomcat01 /bin/bash</code></li><li>下载<code>apt update &amp;&amp; apt install -y iproute2</code></li><li>查看容器内部的网址结构<code>docker exec -it tomcat01 ip addr</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever8: eth0@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ping 172.17.0.2</code>:宿主机可以ping通容器</li></ul><blockquote><p>原理</p></blockquote><ol><li><p>当我们启动一个容器的时候,docker就会给我们分配一个ip,只要安装docker,就会有一个网卡<code>docker0</code></p></li><li><p>网卡使用的是桥接模式</p></li><li><p>当我们再次<code>ifconfig</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 多出来的网络9: veth9c8db14@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default    link&#x2F;ether a2:d2:1c:d0:7f:6a brd ff:ff:ff:ff:ff:ff link-netnsid 0   inet6 fe80::a0d2:1cff:fed0:7f6a&#x2F;64 scope link       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>多出来的网卡是按对出现的.<code>evth-pair</code>一段连着协议,一段彼此相连.<code>evth-pair</code>充当一个桥梁,彼此相连</p></blockquote></li><li><p>没有ping包.下载:<code>apt install iputils-ping</code></p></li><li><p>再启动一个tomcat,<code>tomcat01</code>ping<code>tomcat02</code>(发现可以ping通)</p></li></ol><p><img src="./docker%E7%BD%91%E7%BB%9C.png" alt="docker网络"></p><ol><li>tomcat01和tomcat02是公用的一个路由器(<code>docker0</code>)</li><li>所有的容器再不指定网络的情况下,都是docker0转发的,docker会给所有容器分配一个默认可用的ip</li><li>Docker使用的是Linux网桥,宿主机中是一个Docker容器的网桥docker0</li><li>Docker中的所有网络接口都是虚拟的(内网穿透)</li><li>只要删除容器,其中的一对网桥就消失</li></ol><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><ol><li>创建一个<code>centos01</code>镜像<code>docker run -it --name centos01 centos</code></li><li>关联创建的<code>centos02</code>:<code>docker run -it --name centos02 --link centos01 centos</code><ol><li>在<code>centos02</code>中<code>ping centos01</code>完全可以ping通</li><li>在<code>centos01</code>中<code>ping centos02</code>不可以ping通<code>ping: centos02: Name or service not known</code></li></ol></li></ol><ul><li>使用<code>docker inspect centos02</code>查看host配置</li></ul><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">&quot;HostConfig&quot;:&#123;   &quot;Links&quot;: [     &quot;&#x2F;centos01:&#x2F;centos02&#x2F;centos01&quot;   ],&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>进入<code>centos02</code>后查看host文件(<code>cat /etc/hosts</code>),发现–link就是在hosts配置中加了<code>172.17.0.2 centos01 2147d9e02181</code></li><li>现在已经不建议使用**–link**</li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">127.0.0.1       localhost::1     localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters172.17.0.2      centos01 2147d9e02181172.17.0.3      5561fc170ce7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>查看所有的docker网络<code>docker network ls</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">NETWORK ID     NAME      DRIVER    SCOPEe8372c51dd7f   bridge    bridge    local39fabbb25f72   host      host      localdad25aaf302a   none      null      local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>网络模式(如果自己创建也会使用桥接模式)</p></blockquote><ol><li><code>bridge</code>:桥接模式(docker默认)</li><li><code>none</code>:不配置网络</li><li><code>host</code>:和主机共享网络</li><li><del><code>container</code>:容器网络联通(现在几乎不用,局限很大)</del></li></ol><blockquote><p>测试</p></blockquote><ol><li><p>直接启动的命令中会有一个默认的参数<code>--net bridge</code>,这个指代的就是docker0</p><ul><li><code>docker run -d --name tomcat01 (--net bridge) centos</code></li></ul></li><li><p><code>docker0</code>的特点:默认,域名不能访问,–link可以打通</p></li><li><p>自定义一个网络</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker network create --driver bridge --subnet 192.168.0.0&#x2F;16 --gateway 192.168.0.1 mynet# subnet是子网掩码# gateway是网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>docker network inspect mynet</code>可以查看自定义网络的信息</p></li><li><p>自定义的网络非常的完善(不使用–link也可以互相ping通)</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it --name centos01 --net mynet centosdocker run -it --name centos02 --net mynet centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">自定义的网络已经帮我们维护对应的关系,而<code>doker0</code>需要<code>--link</code></span>推荐使用.保证不同的集群使用不同的网络,保证集群是安全的</li></ul><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><img src="./%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A.png" alt="docker网络连通"></p><blockquote><p>将tomcat加入到mynet网络中<code>docker network connect mynet tomcat01</code></p></blockquote><ul><li>使用<code>docker network connect mynet tomcat01</code>查看会发现在mynet网络中的Containers加入了tomcat01</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Containers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"3f575a99cc32404f226d6d56cdf28be3c52c7611ae334f19297a1069b1ac9d28"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"tomcat01"</span><span class="token punctuation">,</span>        <span class="token property">"EndpointID"</span><span class="token operator">:</span> <span class="token string">"6e780a6c3a680ca28c9df28b1eb14fb5fc7470e72df27d8a7444b38e1b5a0a9b"</span><span class="token punctuation">,</span>        <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">"02:42:c0:a8:00:02"</span><span class="token punctuation">,</span>        <span class="token property">"IPv4Address"</span><span class="token operator">:</span> <span class="token string">"192.168.0.2/16"</span><span class="token punctuation">,</span>        <span class="token property">"IPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">在tomcat01中可以ping通mynet网中的任意一个容器</sapn></li></ul><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><a href="https://docs.docker.com/compose/">Docker Compose</a></h2><blockquote><p>Compose 适用于所有环境：生产、登台、开发、测试以及 CI 工作流程。您可以在常见用例中了解有关每个案例的更多信息。</p></blockquote><ul><li><p>使用 Compose 基本上是一个三步过程：</p><ol><li>定义您的应用程序的环境，Dockerfile以便可以在任何地方复制它。</li><li>定义构成您的应用程序的服务，<code>docker-compose.yml</code> 以便它们可以在隔离环境中一起运行。</li><li>运行<code>docker compose up</code>，<strong>Docker compose 命令</strong>启动并运行您的整个应用程序。docker-compose up也可以使用二进制<code>docker-compose</code>文件运行。</li></ol></li><li><p><code>docker-compose.yml</code>看起来像这样：</p></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">version: &quot;3.9&quot;  # optional since v1.27.0services:  web:    build: .    ports:      - &quot;5000:5000&quot;    volumes:      - .:&#x2F;code      - logvolume01:&#x2F;var&#x2F;log    links:      - redis  redis:    image: redisvolumes:  logvolume01: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>windows</p></blockquote><ul><li>Docker Desktop for Windows包括 Compose 以及其他 Docker 应用程序，因此大多数 Windows 用户不需要单独安装 Compose</li></ul><blockquote><p>Linux</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用国内的地址curl -L &quot;https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.2&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>对二进制文件应用可执行权限:<code>chmod +x /usr/local/bin/docker-compose</code></li><li>测试安装<code>docker-compose --version</code></li></ul><blockquote><p>官网的流程</p></blockquote><ol><li>一个应用<code>app.py</code></li><li><code>Dockerfile</code>应用打包为镜像</li><li><code>Docker-compose.yaml</code>文件:定义整个服务需要的环境.web,redis.完整的上线服务</li><li>启动<code>docker-compose up</code></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Creating composetest_web_1   ... doneCreating composetest_redis_1 ... done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>docker执行的流程</p></blockquote><ol><li><p>创建网络</p></li><li><p>执行<code>Docker-compose.yaml</code></p></li><li><p>启动服务</p><ul><li>根据文件名<code>composetest</code>创建服务</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h3><blockquote><ul><li>第一层,<code>version</code>:编写文件格式对应的<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/"><code>docker engine</code></a></li><li>第二层.<code>services</code>:编写文件对应的服务(可以无限往下写)</li></ul></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>    <span class="token key atrule">images</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span>    <span class="token punctuation">...</span>  <span class="token punctuation">...</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>第三层:其它配置,网络卷,全局规则</li></ul></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>configs<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="每个服务里的编写规则"><a href="#每个服务里的编写规则" class="headerlink" title="每个服务里的编写规则"></a>每个服务里的编写规则</h4><blockquote><p><code>build</code>用于服务中构建项目</p></blockquote><ol><li><p><code>content</code>:指定为包含构建上下文路径的字符串</p></li><li><p><code>dockerfile</code>:指定在上下文中可选的<code>Dockerfile</code></p></li><li><p><code>image: webapp:tag</code>:生成一个名为webapp并标记为tag的镜像</p></li><li><p><code>cache_from</code>:用于解析缓存的镜像</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>  <span class="token key atrule">context</span><span class="token punctuation">:</span> .  <span class="token key atrule">cache_from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> alpine<span class="token punctuation">:</span>latest    <span class="token punctuation">-</span> corp/web_app<span class="token punctuation">:</span><span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>network</code>RUN在构建期间设置容器连接网络(如果是none,则禁止网络)</p></li></ol><blockquote><p><code>command</code>:</p></blockquote><ol><li>覆盖默认命令:<code>command: bundle exec thin -p 3000</code></li><li>该命令也可以是一个列表:<code>command: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;]</code></li></ol><blockquote><p><code>container_name: my-web-container</code>指定容器名称</p></blockquote><ul><li>容器名称必须是唯一的，因此如果您指定了自定义名称，则无法将服务扩展到超过 1 个容器</li></ul><blockquote><p><code>depends_on</code>:表达服务之间的依赖关系(<span style="color:red">yml中的文件从下往上依次执行,要注意顺序</span>)</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">depends_on</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> db  <span class="token punctuation">-</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>deploy</code>:与集群相关的部署</p></blockquote><ul><li>参考:<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy">https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy</a></li></ul><blockquote><p><code>entrypoint</code>:默认进入容器的入口</p></blockquote><ol><li>终端形式:<code>entrypoint:/code/entrypoint.sh</code></li><li>列表:<code>entrypoint: [&quot;php&quot;, &quot;-d&quot;, &quot;memory_limit=-1&quot;, &quot;vendor/bin/phpunit&quot;]</code></li></ol><blockquote><p><code>environment</code>:环境变量,可以设置数据库账号密码等</p></blockquote><ol><li>如果您的服务指定了构建environment选项，则在构建期间定义的变量 不会自动可见。</li><li>使用 args子选项build定义构建的环境变量.可以直接在这里获取</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> RACK_ENV=development  <span class="token punctuation">-</span> SHOW=true <span class="token comment"># 布尔值不会被编译</span>  <span class="token punctuation">-</span> SESSION_SECRET <span class="token comment"># 从args获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>expose</code>:公开端口而不将它们发布到主机 - 它们只能被链接服务访问。只能指定内部端口</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">expose</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"3000"</span>  <span class="token punctuation">-</span> <span class="token string">"8000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>images</code>:指定启动容器的镜像。可以是<code>存储库/标签</code>或<code>镜像ID</code></p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">18.04</span><span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>networks</code>:要加入的网络，引用顶级<code>networkskey</code>下的条目</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">some-service</span><span class="token punctuation">:</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> some<span class="token punctuation">-</span>network     <span class="token punctuation">-</span> other<span class="token punctuation">-</span>network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ports</code>:映射的端口号.如果有这个network_mode: host&#96;,不会启用</p></blockquote><ol><li>指定两个端口 (HOST:CONTAINER)</li><li>仅指定容器端口(为主机端口选择一个临时主机端口)</li><li>指定要绑定到两个端口的主机 IP 地址（默认为 0.0.0.0，表示所有接口）：( IPADDR:HOSTPORT:CONTAINERPORT)。如果 HOSTPORT 为空（例如127.0.0.1::80），则选择一个临时端口来绑定到主机上</li></ol><ul><li><strong>使用长语法</strong>:长格式语法允许配置无法以短格式表示的附加字段。<ol><li><code>target</code>: 容器内的端口</li><li><code>published</code>: 公开的端口</li><li><code>protocol</code>：端口协议（tcp或udp）</li><li><code>mode</code>：host用于在每个节点上发布主机端口，或ingress用于集群模式端口进行负载平衡</li></ol></li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">target</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">published</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> tcp    <span class="token key atrule">mode</span><span class="token punctuation">:</span> host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>restart</code>:什么情况下重启项目</p></blockquote><ol><li><code>no</code>:默认的重启策略，在任何情况下都不重启容器。</li><li><code>always</code>:容器总是重新启动。</li><li><code>on-failure</code>:如果退出代码指示出现故障错误，则该 策略会重新启动容器。</li><li><code>unless-stopped</code>:总是重新启动容器，除非容器停止（手动或其他方式）</li></ol><blockquote><p><code>volumes</code>可以将主机路径挂载为单个服务定义的一部分，无需在顶级(第三层)volumes键中定义它</p></blockquote><ol><li>type: 挂载类型volume, bind,tmpfs或npipe</li><li>source: 挂载的来源，主机上用于绑定挂载的路径，或者在 顶级volumeskey中定义的卷的名称。不适用于 tmpfs 挂载。</li><li>target: 容器中安装卷的路径</li><li>read_only: 将卷设置为只读的标志</li><li>bind: 配置额外的绑定选项<ul><li>propagation：用于绑定的传播模式</li></ul></li><li>volume：配置额外的音量选项<ul><li>nocopy: 创建卷时禁止从容器复制数据的标志</li></ul></li><li>tmpfs: 配置额外的 tmpfs 选项<ul><li>size: tmpfs 挂载的大小（以字节为单位）</li></ul></li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> volume    <span class="token key atrule">source</span><span class="token punctuation">:</span> mydata    <span class="token key atrule">target</span><span class="token punctuation">:</span> /data    <span class="token key atrule">volume</span><span class="token punctuation">:</span>      <span class="token key atrule">nocopy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> bind    <span class="token key atrule">source</span><span class="token punctuation">:</span> ./static    <span class="token key atrule">target</span><span class="token punctuation">:</span> /opt/app/static<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>短语法</strong>:直接使用短语挂载<code>data-volume:/var/lib/backup/data</code></li></ul><h4 id="network配置"><a href="#network配置" class="headerlink" title="network配置"></a>network配置</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">network1</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>  <span class="token key atrule">network2</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>  <span class="token punctuation">...</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#host-or-none"><code>driver</code></a>:指定应为此网络使用的驱动程序</p></blockquote><ol><li><code>bridge</code>:桥接模式(docker默认)</li><li><code>overlay</code>:参考文档</li><li><code>host</code>和<code>none</code>:和主机共享网络或者不配置网络</li></ol><blockquote><p><code>external</code>:如果设置为true，则指定此网络是在 Compose 之外创建的</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">outside</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>name</code>:为此网络设置自定义名称</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 不创建新网络,加入已存在的网络</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">network1</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程连接</title>
      <link href="/2022/01/21/yuan-cheng-lian-jie/"/>
      <url>/2022/01/21/yuan-cheng-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><ol><li><p><code>windows</code>客户端在应用可选项中下载<code>Openssh</code>的客户端(客户端一般是自带的)和服务端,使用<code>ssh -V</code>查看有没有下载成功</p></li><li><p>在计算机管理的服务中去开启带有<code>openssh</code>管理的页面,<code>Get-Service -Name *ssh*</code>,查看运行状态(需要在<code>powershell</code>中查看)</p></li><li><p>查看ssh是否连接默认的22端口<code>netstat -an | findstr :22</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PS C:\Users\15531&gt; netstat -an | findstr :22  TCP    0.0.0.0:22             0.0.0.0:0              LISTENING  TCP    [::]:22                [::]:0                 LISTENING<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>打开终端,输入<code>ipconfig</code>,可以看到<code>无线局域网适配的WLAN</code>的地址.然后就可以使用ssh连接了</p></li><li><p>连接ssh的方法有很多(比如vscode的RemoteSSH)</p></li></ol><h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><blockquote><p>使用windows远程桌面,需要升级到windows专业版</p></blockquote><ul><li>由于windows远程桌面是被阉割的,需要去下载<a href="https://github.com/stascorp/rdpwrap/releases">修复工具</a></li><li>下载完之后,要以管理员身份运行<code>install.bat</code></li><li>出现<code>Successfully installed</code>代表成功</li></ul><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><blockquote><p>如果同在一个局域网就非常的简单</p></blockquote><ul><li>一定要在同一个局域网下<ul><li>在移动端设备下载<code>RD Client</code>,输入windows的ip,身份,密码即可</li></ul></li></ul><h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><blockquote><p>高性能的反向代理应用,对web服务支持根据域名进行路由转发行</p></blockquote><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><ul><li><p>在服务器中使用wget下载<a href="https://github.com/fatedier/frp/releases">frp</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.38.0&#x2F;frp_0.38.0_linux_amd64.tar.gz# 解压tar -zxvf frp_0.22.0_linux_amd64.tar.gz# 就不一一详说了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入到frp目录后,输入以下内容</p><ul><li>server_add:服务器公网ip</li><li>token:可以改复杂一些和后面的客户端配置保持一致即可</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[common]  server_addr &#x3D; xxx.xxx.xxx.xxx   bind_port &#x3D; 7000 dashboard_port &#x3D; 7500 token &#x3D; 12345678  dashboard_user &#x3D; admin dashboard_pwd &#x3D; admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行<code>./frps -c frps.ini</code>,发现成功没问题</li></ul><blockquote><p>为了保证服务器连接关闭之后,还能继续运行,需要下载screen(虚拟终端)</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf install screen# 建立起一次会话screen -S frp# 到frp目录下.&#x2F;frps -c frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><blockquote><p>windows端需要和服务端配置相同版本的<a href="ttps://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_windows_amd64.zip">frp</a></p></blockquote><ul><li>token:同服务端配置token保持一致</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[common]server_addr &#x3D; xxx.xxx.xxx.xxx server_port &#x3D; 7000token &#x3D; 12345678 [rdp]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 3389remote_port &#x3D; 7001[smb]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 445remote_port &#x3D; 7002 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行<code>.\frpc.exe -c .\frpc.ini</code>成功后即可在<code>RD Client</code>使用远程连接</p></blockquote><ul><li><span style="color:red">以上所有端口都要在服务器中开启</span></li></ul><h2 id="安卓投屏到电脑"><a href="#安卓投屏到电脑" class="headerlink" title="安卓投屏到电脑"></a>安卓投屏到电脑</h2><blockquote><p>需要下载两个软件<a href="https://github.com/Genymobile/scrcpy/releases"><code>scrcpy</code></a>和<a href="https://developer.android.com/studio/releases/platform-tools"><code>platform-tools</code></a></p></blockquote><ul><li>我使用的是可视化:<a href="https://github.com/Tomotoes/scrcpy-gui/releases"><code>scrcpy-gui</code></a><ul><li>如果不使用可视化,可以看原作者地址,有很详细的教程<a href="https://github.com/Genymobile/scrcpy/releases">https://github.com/Genymobile/scrcpy/releases</a></li></ul></li></ul><blockquote><p>下载完成后需要设置系统环境变量,按照自己的下载地址设置</p></blockquote><p><img src="./%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="设置环境变量"></p><ul><li>测试adb是否装好,如下是成功装好</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">C:\Users\15531&gt;adb versionAndroid Debug Bridge version 1.0.41Version 31.0.3-7562133Installed as G:\Screen\platform-tools\adb.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置手机开发人员选项(各个手机可能不同,以mi10举例)</p></blockquote><ol><li>使用以下操作:<code>打开设置&gt;更多设置&gt;开发者选项&gt;USB调试</code></li><li>使用数据线将手机和电脑连接</li><li>在cmd使用<code>scrcpy</code>如果成功投屏手机就代表设置成功</li><li>然后打开<code>scrcpy-GUI</code>会出现一个连接的手机设备<br>  <img src="./scrcpy-GUI.png" alt="scrcpy-GUI"></li><li>如果在同一个局域网下也是可以投屏的</li></ol><h2 id="将ipad作为副屏使用"><a href="#将ipad作为副屏使用" class="headerlink" title="将ipad作为副屏使用"></a>将ipad作为副屏使用</h2><blockquote><p>众所周知<code>duet</code>是一款要钱的工具,不过<a href="https://www.spacedesk.net/#download">spacedesk</a>的性能也是很顶的(目前还在内测中)</p></blockquote><ol><li>在ipad中也需要下载<code>spacedesk</code>.</li><li>需要在同一个局域网下.同时打开<code>spacedesk</code>就可以互相连接</li><li>很明显看出电脑端已经连接上ipad.<br>  <img src="./spacedesk.png" alt="spacedesk"></li><li>接下来需要在<code>设置&gt;显示</code>中设置副屏.一定要选择扩展这些显示器.按照自己喜欢的方式排列<br><img src="./spacedesk%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE.png" alt="spacedesk显示设置"></li></ol>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install-pkg</title>
      <link href="/2022/01/20/install-pkg/"/>
      <url>/2022/01/20/install-pkg/</url>
      
        <content type="html"><![CDATA[<h2 id="install-pkg"><a href="#install-pkg" class="headerlink" title="install-pkg"></a>install-pkg</h2><blockquote><p>编程式的方式安装包,并且自动检测包管理器</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> installPackage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@antfu/install-pkg'</span><span class="token keyword">await</span> <span class="token function">installPackage</span><span class="token punctuation">(</span><span class="token string">'vite'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><blockquote><p><code>execa</code>:在子进程中生成shell命令,并执行.<code>child_process</code>的加强版</p><p>参考<a href="https://github.com/sindresorhus/execa">https://github.com/sindresorhus/execa</a></p></blockquote><ol><li>首先是一个下载包的选项</li><li><a href="http://nodejs.cn/api/child_process/options_stdio.html">有关进程的选项</a></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InstallPackageOptions</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定包管理的下载目录</span>  cwd<span class="token operator">?</span><span class="token operator">:</span> string  <span class="token comment">// 是否是开发环境依赖,默认为生产环境依赖</span>  dev<span class="token operator">?</span><span class="token operator">:</span> boolean  <span class="token comment">// 配置父进程和子进程之间建立的管道</span>  silent<span class="token operator">?</span><span class="token operator">:</span> boolean  <span class="token comment">// 指定包管理器</span>  packageManager<span class="token operator">?</span><span class="token operator">:</span> string  <span class="token comment">// 是否启用从缓存中加载</span>  preferOffline<span class="token operator">?</span><span class="token operator">:</span> boolean  <span class="token comment">// 指定增加的shell命令</span>  additionalArgs<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>installPackage</code>中也并不是很难</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.传入包管理器,则使用包管理器</span><span class="token comment">// 2.没有传入包管理器,则使用detectPackageManager查找锁文件,根据锁文件下载</span><span class="token comment">// 3.如果上面两个都没有,则默认使用npm</span><span class="token keyword">const</span> agent <span class="token operator">=</span> options<span class="token punctuation">.</span>packageManager <span class="token operator">||</span> <span class="token keyword">await</span> <span class="token function">detectPackageManager</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>cwd<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'npm'</span><span class="token comment">// 需要下载的包名,如果只有一个包名转换成数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span>  names <span class="token operator">=</span> <span class="token punctuation">[</span>names<span class="token punctuation">]</span><span class="token keyword">const</span> args <span class="token operator">=</span> options<span class="token punctuation">.</span>additionalArgs <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>preferOffline<span class="token punctuation">)</span>  <span class="token comment">// 预先检查缓存,如果缓存中没有,则连接互联网下载</span>  args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'--prefer-offline'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="detectPackageManager"><a href="#detectPackageManager" class="headerlink" title="detectPackageManager"></a>detectPackageManager</h3><blockquote><p>根据当前目录的锁文件探测包管理器</p><p>findUp:查找文件所在的路径</p><p>参考<a href="https://github.com/sindresorhus/find-up#readme">https://github.com/sindresorhus/find-up#readme</a></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">import</span> findUp <span class="token keyword">from</span> <span class="token string">'find-up'</span><span class="token keyword">export</span> type PackageManager <span class="token operator">=</span> <span class="token string">'pnpm'</span> <span class="token operator">|</span> <span class="token string">'yarn'</span> <span class="token operator">|</span> <span class="token string">'npm'</span><span class="token keyword">const</span> <span class="token constant">LOCKS</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PackageManager<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'pnpm-lock.yaml'</span><span class="token operator">:</span> <span class="token string">'pnpm'</span><span class="token punctuation">,</span>  <span class="token string">'yarn.lock'</span><span class="token operator">:</span> <span class="token string">'yarn'</span><span class="token punctuation">,</span>  <span class="token string">'package-lock.json'</span><span class="token operator">:</span> <span class="token string">'npm'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果没有指定下载的目录,则在当前的目录.`process.cwd()`指当前进程</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">detectPackageManager</span><span class="token punctuation">(</span><span class="token parameter">cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回包含锁文件的绝对路径</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findUp</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">LOCKS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> cwd <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 如果有锁文件,就返回锁文件对应的包管理器</span>  <span class="token keyword">const</span> agent <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token constant">LOCKS</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> agent<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><blockquote><p><code>package.json</code>包里的脚本</p></blockquote><h3 id="ni"><a href="#ni" class="headerlink" title="ni"></a>ni</h3><blockquote><p>npm,yarn,pnpm的包管理器</p><p>参考:<a href="https://github.com/antfu/ni">https://github.com/antfu/ni</a></p></blockquote><table><thead><tr><th>命令</th><th>替代</th></tr></thead><tbody><tr><td>ni</td><td>npm install</td></tr><tr><td>ni axios</td><td>npm i axios</td></tr><tr><td>nx</td><td>npx&#x2F;yarn dlx&#x2F;pnpm dlx</td></tr><tr><td>nr</td><td>npm run</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><blockquote><p>配置eslint检查:<a href="https://eslint.org/docs/user-guide/command-line-interface">https://eslint.org/docs/user-guide/command-line-interface</a></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint \"&#123;src,test&#125;/**/*.ts\""</span><span class="token punctuation">,</span><span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"nr lint -- --fix"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>第一个是检查文件<ul><li><code>&quot;eslint&quot;: &quot;eslint src --ext .ts&quot;</code>:代表src下的所有文件都要检查</li></ul></li><li>是检查并且修复问题</li></ol><h2 id="总结与感受"><a href="#总结与感受" class="headerlink" title="总结与感受"></a>总结与感受</h2><blockquote><p>看到英文注释一概懵逼.</p><p>关于常用的工具还是不是很熟悉了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sourceCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sourceCode </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流</title>
      <link href="/2022/01/18/fang-dou-jie-liu/"/>
      <url>/2022/01/18/fang-dou-jie-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#container</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #444<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> divContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">getUserAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      divContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    divContainer<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> getUserAction  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当鼠标一放到矩形框中,就会不停的触发事件(如果是复杂的回调或者ajax的请求就会很频繁的触发事件)</p><p>有两种解决方案:防抖和节流</p></blockquote><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>防抖的原理就是:尽管触发事件,但是我只触发最后一次事件,且n秒内不再触发.总之,就是要等你触发完事件 n 秒内不再触发事件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>divContainer<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<ol><li>setTimeout中建议使用箭头函数,会指向函数外的this(<span style="color:red">这个this就是调用这个事件的id为container的div</span>)</li><li>如果使用普通的函数,会指向setTimeout内部设定好的this,即window</li><li>timeout在外部初始化,<code>clearTimeout</code>会清理上一次的定时器</li></ol></li></ul><blockquote><p>如果不使用箭头函数,就得考虑this绑定问题,还有事件对象<code>event</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout  <span class="token keyword">let</span> _self<span class="token operator">=</span><span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span>_self<span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h3><blockquote><p>如果希望事件<span style="color:red">每次重新点击都会立刻执行,然后等到停止触发n秒后,才可以重新触发</span>.而不是非要等到事件停止触发后才执行</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//timeout为false才会立即执行</span>    <span class="token keyword">let</span> hasImmediate <span class="token operator">=</span> <span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> immediate    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//执行完定时器之后也会立即执行</span>      timeout <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasImmediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>两种立即执行的情况<ol><li>当开始滑动时,再次触发事件,事件会立即执行</li><li>setTimeout是宏任务,初始化之后会放到队列中.</li><li>当定时器执行完毕时,再次触发事件,事件会立即执行</li><li>除了定时器之外的依然会按照事件的频率触发</li></ol></li></ul><h3 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">debounced</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> hasImmediate <span class="token operator">=</span> <span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> immediate    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      timeout <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasImmediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  debounced<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> debounced<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用:<code>click</code>事件绑定一个监听器</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> setUserAction <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>divContainer<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> setUserActiondocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  setUserAction<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不要绑定<code>click</code>事件,这是浏览器开放的一个鼠标点击自定义接口</li><li>不要与<code>onclick</code>事件搞混</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  setUserAction<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>持续触发事件,每隔一段时间,只执行一次事件</p></blockquote><h3 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h3><blockquote><p>当触发事件的时候,取出当前的时间戳,然后减去之前的时间戳(一开始值为0),如果大于设置的时间周期,然后更新时间戳为当前的时间戳.反之不执行</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>previous<span class="token operator">></span>wait<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      previous<span class="token operator">=</span>now    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>container<span class="token punctuation">.</span>onmousemove<span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>getuserAction<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h3><blockquote><p>当触发事件的时候,设置一个定时器,再触发事件的时候,如果定时器存在,就不执行,直到定时器执行完,执行函数,清空定时器</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timeout<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      timeout<span class="token operator">=</span><span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>container<span class="token punctuation">.</span>onmousemove<span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>使用时间戳事件会立刻执行,并且停止触发后不会再执行</li><li>使用定时器事件会在n秒后执行,并且停止触发后依然会在执行一次</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote><p>如果鼠标移入能立刻执行,且停止触发的时候还能在执行一次</p></blockquote><ol><li>leading:false表示禁用第一次</li><li>trailing:false表示警用停止触发</li><li>不能同时设置为false,同时为false的时候.鼠标移出过了设置的时间,在移入就会立即执行</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout<span class="token punctuation">,</span>previous<span class="token operator">=</span><span class="token number">0</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    privous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading<span class="token operator">===</span>fasle <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">throttled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>leading<span class="token operator">===</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>privous<span class="token punctuation">)</span> privous<span class="token operator">=</span>now    <span class="token keyword">let</span> remaining<span class="token operator">=</span> wait<span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>      previous <span class="token operator">=</span> now      <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token operator">&amp;&amp;</span>options<span class="token punctuation">.</span>trailing <span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span>remaining<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> throttled<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>为什么会有<code>!timeout</code>,当触发的时间小于等待的时间的时候会执行,<span style="color:red">并且因为是定时器会在一段时间后再执行</span>(并且不断的触发定时器都会重新执行,直到<code>remaining&lt;=0</code>)</li><li><code>remaining &lt;= 0 || remaining &gt; wait</code>:小于等待时间,或者时间超过了等待时间(<span style="color:red">previous只有在if…内部会更新.第一次触发后只有now会不停更新</span>)</li></ol><h3 id="throttled取消"><a href="#throttled取消" class="headerlink" title="throttled取消"></a>throttled取消</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">throttled<span class="token punctuation">.</span><span class="token function-variable function">cancel</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  timeout<span class="token operator">=</span><span class="token keyword">null</span>  previous<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XHR</title>
      <link href="/2022/01/09/xhr/"/>
      <url>/2022/01/09/xhr/</url>
      
        <content type="html"><![CDATA[<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><blockquote><p>只能访问同源URL,(域名相同,端口相同,协议相同).如果发送请求的url与页面有任何方面有所不同,则会抛出安全错误</p></blockquote><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote><p>使用自定义的HTTP头部允许浏览器和服务器相互了解,以确实请求或相应应该成功还是失败</p></blockquote><ul><li>例如GET或者POST请求,没有自定义头部,而且请求体是<code>text/plain</code>类型发送请求会包含额外的头部Origin.<ul><li><code>Origin</code>包含发送请求页面的源(协议,域名,端口):<code>Origin:https://www.baidu.com</code></li><li><strong>服务器</strong>如果要响应请求<code>Access-Control-Allow-Origin</code>设为<code>&#39;*&#39;</code>或者<strong>源地址</strong>(例如:<code>https://www.baidu.com</code>)</li></ul></li></ul><blockquote><p>CORS会通过一种叫预检请求的服务器验证机制,允许使用自定义头部,除GET,POST之外的方法,以及不同请求体内容的类型.</p></blockquote><ol><li>请求会使用OPTIONS方法发送并包含以下头部<ul><li><code>Origin</code>: 源</li><li><code>Access-Control-Request-Method</code>:请求希望使用的方法</li><li><code>Access-Control-Request-Headers</code>:(可选)要使用<code>,</code>分隔的自定义头部列表</li></ul></li><li>服务器接收后会在响应中发送如下头部和浏览器沟通<ul><li><code>Origin</code>: 源</li><li><code>Access-Control-Request-Method</code>:请求希望使用的方法</li><li><code>Access-Control-Request-Headers</code>:服务器允许使用的头部</li><li><code>Access-Control-Max-Age</code>:缓存预检请求的秒数</li></ul></li></ol><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><blockquote><p>默认情况下,跨域请求不提供凭据(cookie,HTTP认证和SSL证书等)</p></blockquote><ul><li><span style="color:red">如果要发送Cookie,<code>Access-Control-Allow-Origin</code>就不能设为星号(<code>*</code>)，必须指定明确的、与请求网页一致的域名</span></li></ul><ol><li>服务器端<ul><li><code>Access-Control-Allow-Credentials:true</code>表明服务器端允许带凭据的请求</li><li><code>Access-Control-Allow-Origin:源</code>(例如:<a href="https://www.baidu.com/">https://www.baidu.com</a>)</li></ul></li><li>客户端<ul><li>设置<code>withCredentials</code>为<code>true</code>表明请求会发送凭据</li></ul></li></ol><h2 id="理解原生Ajax"><a href="#理解原生Ajax" class="headerlink" title="理解原生Ajax"></a>理解原生Ajax</h2><blockquote><p>ajax本质是在 HTTP 协议的基础上以异步的方式与服务器进行通信.</p><blockquote><p>异步：指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序，相反则为同步.</p></blockquote></blockquote><ul><li>使用<code>XMLHttpRequest</code> 对象的 <code>open()</code> 和 <code>send()</code> 方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>open(method,url,async)</code></td><td>规定请求的类型、URL 以及是否异步处理请求,method：请求的类型.url：文件在服务器上的位置.async：true（异步）或 false（同步）</td></tr><tr><td><code>send(string)</code></td><td>将请求发送到服务器。string：适用于 POST 请求</td></tr></tbody></table><ul><li>其它的属性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>status</code></td><td>200: “OK”</td></tr><tr><td><code>responseText</code></td><td>获得字符串形式的响应数据。</td></tr><tr><td><code>responseXML</code></td><td>获得 XML 形式的响应数据。</td></tr><tr><td><code>setRequestHeader</code></td><td>设置请求头</td></tr><tr><td><code>readyState</code></td><td>存有 XMLHttpRequest 的状态。请求发送到后台后，状态会从 0 到 4 发生变化</td></tr><tr><td><code>onreadystatechange</code></td><td>绑定readyState改变监听</td></tr><tr><td><code>reponseType</code></td><td>指定响应函数的数据类型，如果是json，得到响应后自动解析响应体函数</td></tr><tr><td><code>response</code></td><td>响应体数据，类型取决于responseType的指定</td></tr><tr><td><code>timeout</code></td><td>指定请求超时时间，默认为0代表没有限制</td></tr><tr><td><code>ontimeout</code></td><td>绑定超时的监听</td></tr><tr><td><code>onerror</code></td><td>绑定请求网络错误的监听</td></tr><tr><td><code>abort()</code></td><td>中断请求</td></tr><tr><td><code>getResponseHeader(name)</code></td><td>获取指定名称的响应头值</td></tr><tr><td><code>getAllResponseHeaders()</code></td><td>获取所有的响应头组成的字符串</td></tr></tbody></table><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><blockquote><p>能够执行XHR的所有任务,并且能够在Web工作者线程等现代Web工具中使用,提供拦截,重定向和修改通过fetch()生成的请求接口</p><blockquote><p><strong>fetch() 方法的参数与 Request() 构造器是一样的</strong></p></blockquote></blockquote><ul><li><code>fetch</code>一定是异步的,天生支持promise,接收两个参数<ol><li>第一个参数:源.是必须的(例如<code>https://www.baidu.com</code>),只传第一个参数,默认是get请求</li><li>第二个参数是<span style="color:red">可选的</span>,是一个对象</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/roundtable/2021year"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>mode<span class="token operator">:</span><span class="token string">'no-cors'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>mode:用于指定请求模式.以及客户端读取多少响应<ol><li>cors:允许遵守CORS的跨域请求.(非简单跨域,需要预检)</li><li>no-cors:允许不需要发送预检请求的跨域请求.(同源请求或者简单跨域)</li><li>same-origin:任何跨域请求都不允许发送</li></ol></li></ul><blockquote><p>以上就不一一介绍</p><blockquote><p>参考:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/fetch</a></p></blockquote></blockquote><h3 id="fetch跨域问题"><a href="#fetch跨域问题" class="headerlink" title="fetch跨域问题"></a>fetch跨域问题</h3><blockquote><p>从不同源请求资源,响应要包含CORS头部才能保证浏览器收到响应.<span style="color:red">如果我们测试用的别人的接口,使用<code>mode:cors</code>是不会成功的</span></p></blockquote><ul><li>如果代码不需要服务器响应,可以设置<code>mode:&#39;no-cors&#39;</code></li></ul><h3 id="Headers对象"><a href="#Headers对象" class="headerlink" title="Headers对象"></a>Headers对象</h3><blockquote><p>Headers对象是发送请求和入站响应头部的容器.并且都可以通过<code>Request.prototype.headers</code>修改属性</p></blockquote><ul><li>Headers和Map极其相似.都有<code>set()</code>,<code>has()</code>,<code>delete()</code>方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> r<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>init<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>与之前的fetch是一模一样的.如果init中没有设置的值,会使用默认值</p></blockquote><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>bodyUesd</td><td>false</td></tr><tr><td>cache</td><td>“default”</td></tr><tr><td>credentials</td><td>“same-origin”</td></tr><tr><td>destination</td><td>“”</td></tr><tr><td>headers</td><td>Headers {}</td></tr><tr><td>integrity</td><td>“”</td></tr><tr><td>keepalive</td><td>false</td></tr><tr><td>method</td><td>“GET”</td></tr><tr><td>mode</td><td>“cors”</td></tr><tr><td>redirect</td><td>“follow”</td></tr><tr><td>referrer</td><td>“about:client”</td></tr><tr><td>referrerPolicy</td><td>“”</td></tr><tr><td>signal</td><td>AbortSignal {aborted:false,onabort:null}</td></tr><tr><td>url</td><td>“&lt;current URL&gt;”</td></tr></tbody></table><blockquote><p>克隆Request对象:构造函数或者<code>clone()</code></p></blockquote><ul><li>使用构造函数第一个请求体会被标记为已使用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment">//第一种:如果传入init对象值会覆盖源对象中同名的值</span><span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token comment">//fasle</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>clone()</code>不会将任何请求体标记为已使用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> r2 <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token comment">//fasle</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在fetch中使用request对象:与clone()方法一样,fetch()不能用使用过的Request对象来发送请求</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//第一种情况</span>r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">//TypeError</span><span class="token comment">//第二种情况</span><span class="token function">fetch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">//TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>并且fetch()的<code>init</code>同样可以覆盖Request的对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>method<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>body<span class="token operator">:</span><span class="token string">"body"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><blockquote><p>产生<code>Response</code>对象主要方式是调用<code>fetch()</code>,他会返回一个promise,这个<code>Response</code>对象代表实际HTTP的响应</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://foo.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化<code>Response</code>对象<ul><li>body:(…)</li><li>bodyUsed:false</li><li>headers:Headers {}</li><li>ok:true</li><li>redirected:false</li><li>status:200</li><li>statusText:”OK”</li><li>type:”basic”</li><li>url:”<a href="https://foo.com&quot;/">https://foo.com&quot;</a></li></ul></li></ul><blockquote><p>Response类有两个静态方法<code>Response.error()</code>和<code>Response.redirect()</code></p></blockquote><ul><li><strong>Response.redirect()</strong>:接收一个url和重定向状态码,返回重定向Response对象</li><li>提供的状态码必须对应重定向,反则抛出错误</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"https://foo.com"</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> xhr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规范包管理</title>
      <link href="/2022/01/09/gui-fan-bao-guan-li/"/>
      <url>/2022/01/09/gui-fan-bao-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>只要在脚本中加以下命令就会自动约束,必须是<code>pnpm</code>管理</p><p>参考:<a href="https://pnpm.io/only-allow-pnpm">https://pnpm.io/only-allow-pnpm</a></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"preinstall"</span><span class="token operator">:</span> <span class="token string">"npx only-allow pnpm"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>preinstall</td><td>install 之前执行这个脚本</td></tr><tr><td>install</td><td>install 时执行这个脚本</td></tr><tr><td>postinstall</td><td>install 之后执行这个脚本</td></tr></tbody></table><blockquote><ul><li>如果使用<code>postinstall</code>,在下载出现之后才会执行脚本,此时已经下载完毕</li><li>npm中的生命周期<a href="https://docs.npmjs.com/cli/v6/using-npm/scripts#pre--post-scripts">https://docs.npmjs.com/cli/v6/using-npm/scripts#pre--post-scripts</a></li></ul></blockquote><ul><li>在vue源码中scripts包下的<code>preinstall.js</code>会对依赖进行检验</li></ul><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">if (!&#x2F;pnpm&#x2F;.test(process.env.npm_execpath || &#39;&#39;)) &#123;  console.warn(    &#96;\u001b[33mThis repository requires using pnpm as the package manager &#96; +      &#96; for scripts to work properly.\u001b[39m\n&#96;  )  process.exit(1)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>process</code>对象: 他是node中的全局对象,无需引入(<code>require</code>)</p><p>参考:<a href="http://javascript.ruanyifeng.com/nodejs/process.html">http://javascript.ruanyifeng.com/nodejs/process.html</a></p></blockquote><h2 id="only-allow"><a href="#only-allow" class="headerlink" title="only-allow"></a>only-allow</h2><blockquote><p>在<code>package.json</code>中写入后执行<code>pnpm preinstall</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"preinstall"</span><span class="token operator">:</span> <span class="token string">"node ./bin.js pnpm"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>process.argv</strong>属性返回一个数组由命令行执行脚本时的各个参数组成</p><ol><li>它的第一个成员总是node</li><li>第二个成员是脚本文件名</li><li>其余成员是脚本文件的参数</li></ol></li><li><p>打印<code>process.argv</code>,得到如下参数</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>  <span class="token string">'D:\\web\\node\\node.exe'</span><span class="token punctuation">,</span>  <span class="token string">'D:\\web\\sourceCode\\only-allow\\bin.js'</span><span class="token punctuation">,</span>  <span class="token string">'pnpm'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>which-pm-runs</code>当前运行的是哪一个包管理器</li><li><code>process.env.npm\_config\_user\_agent</code>,以这种方式拿到包版本</li></ul></blockquote><ul><li><code>boxen</code>是控制控制台的输出边框颜色<ul><li>参考:<a href="https://www.npmjs.com/package/boxen">https://www.npmjs.com/package/boxen</a></li></ul></li></ul><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><blockquote><p>总体来说,按照大佬的指导没有什么难度,很简单的一个包</p><p>参考:<a href="https://juejin.cn/post/7033560885050212389#heading-3">https://juejin.cn/post/7033560885050212389#heading-3</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios工具函数</title>
      <link href="/2022/01/05/axios-gong-ju-han-shu/"/>
      <url>/2022/01/05/axios-gong-ju-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><ol><li><code>.eslintrc.js</code>:ESlint需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 <code>.eslintrc.js</code> 或 <code>.eslintrc.json</code></li><li><code>tslint.json</code>:检查 typescript 代码的可读性、可维护性和功能上的错误<ul><li>核心:<a href="https://palantir.github.io/tslint/rules/">https://palantir.github.io/tslint/rules/</a></li></ul></li><li><code>bower.json</code>:建议使用npm,yarn,pnpm管理</li><li><code>CHANGELOG.md</code>:是一个由人工编辑，以时间为倒序的列表。 这个列表记录所有版本的重大变动。<ul><li><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">如何生成CHANGELOG</a></li></ul></li><li><code>CODE_OF\_CONDUCT.md</code>:axios的社区行为规范准则<ul><li>翻译:<a href="https://www.contributor-covenant.org/version/2/1/code_of_conduct/">https://www.contributor-covenant.org/version/2/1/code_of_conduct/</a></li></ul></li><li><code>CONTRIBUTING.md</code>:为潜在的项目贡献者提供了一个简短的指南，说明他们如何为您的项目或研究小组提供帮助<ul><li>参考:<a href="https://mozillascience.github.io/working-open-workshop/contributing/">https://mozillascience.github.io/working-open-workshop/contributing/</a></li></ul></li><li><code>SECURITY.md</code>:提供有关报告项目中安全漏洞的说明<ul><li>参考:<a href="https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository">https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository</a></li></ul></li><li><code>Gruntfile.js</code>:在grunt里面，我们可以使用自动编译LESS、压缩CSS、JS这样的工具。Grunt是一个平台，没有插件，Grunt什么事也不能做。它是提供了一个标准，任何插件都要去遵守的一个机制和规则<ul><li>Gulp也是相同的的功能,只不过是语法不通(上手简单)</li><li>参考:<a href="https://www.gruntjs.net/getting-started">https://www.gruntjs.net/getting-started</a></li></ul></li><li><code>karma.conf.js</code>:基于Node.js的JS测试执行过程管理工具.可用于测试所有主流Web浏览器，也可集成到<code>CI</code>工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(<code>Watch</code>)文件的变化，然后自行执行，通过<code>console.log</code>显示测试结果<ul><li>参考:<a href="http://karma-runner.github.io/6.3/config/configuration-file.html">http://karma-runner.github.io/6.3/config/configuration-file.html</a></li></ul></li></ol><h2 id="axios的工具函数"><a href="#axios的工具函数" class="headerlink" title="axios的工具函数"></a>axios的工具函数</h2><blockquote><p>很多和vue中的工具函数差不多就直接跳过了</p></blockquote><h3 id="isBuffer"><a href="#isBuffer" class="headerlink" title="isBuffer"></a>isBuffer</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span>constructor <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>isBuffer <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>typeof val.constructor.isBuffer === &#39;function&#39;</code>:判断构造函数中有没有<code>isBuffer</code>方法</li><li><code>val.constructor.isBuffer(val)</code>:用node提供的<code>isBuffer()</code></li><li>原型对象的<code>constructor</code>会指向构造函数自身</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="isArrayBuffer-amp-amp-isFormData"><a href="#isArrayBuffer-amp-amp-isFormData" class="headerlink" title="isArrayBuffer&amp;&amp;isFormData..."></a>isArrayBuffer&amp;&amp;isFormData...</h3><blockquote><p>判断是不是一个实例对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isArrayBuffer</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object ArrayBuffer]'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isFormData</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object FormData]'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="isObject-amp-amp-isPlainObject"><a href="#isObject-amp-amp-isPlainObject" class="headerlink" title="isObject&amp;&amp;isPlainObject"></a>isObject&amp;&amp;isPlainObject</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> prototype <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> prototype <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>isObject(val)</code>判断时,如果<code>val=[]</code>也会返回true</li><li><code>isPlainObject(val)</code>判断对象更纯碎<ul><li>当<code>val=Object.prototype</code>,<code>prototype === null</code>为true</li><li>其它情况下只会取得<code>Object.prototype</code></li></ul></li></ol><h3 id="isArrayBufferView"><a href="#isArrayBufferView" class="headerlink" title="isArrayBufferView"></a>isArrayBufferView</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isArrayBufferView</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ArrayBuffer <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ArrayBuffer<span class="token punctuation">.</span>isView<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isArrayBuffer</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>val如果是<code>ArrayBuffer</code>,定义和未定义的两种可能</li></ul><blockquote><p><code>ArrayBufferView</code>:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBufferView">https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBufferView</a></p></blockquote><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><blockquote><p>去除首位空格,如果是false,则用正则</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span>trim <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="stripBOM"><a href="#stripBOM" class="headerlink" title="stripBOM"></a>stripBOM</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stripBOM</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFEFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除开头的标识字节序BOM,本身是一个Unicode字符</p></blockquote><h3 id="forEach-amp-amp-merge"><a href="#forEach-amp-amp-merge" class="headerlink" title="forEach&amp;&amp;merge"></a>forEach&amp;&amp;merge</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Don't bother if no value provided</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Force an array if not already something iterable</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*eslint no-param-reassign:0*/</span>    obj <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for循环执行回调函数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for循环执行回调函数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> prototype <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> prototype <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token comment">/* obj1, obj2, obj3, ... */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">assignValue</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果键是相同的,把之前的val替换为之后的val</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//递归执行,如果是对象还是对象</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果是数组还是数组</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">forEach</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> assignValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>merge函数会将对象或者数组或者任意参数统统合并到一个对象中<ul><li>如果是对象,key就是键</li><li>如果是数组,key就是索引</li></ul></li><li>foreach重写估计是对象上没有这个方法,重写了一个更统一的<ul><li><code>fn.call(null, obj[key], key, obj)</code></li><li>回调函数不需要绑定this,并传入参数obj[key],key,obj</li></ul></li></ol><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><ol><li>看了vue的工具函数这个并不是很难了,理解也更容易了</li><li>调试方面更加熟练,不懂的文件也不停的探索</li><li>随着慢慢的深入不会的东西暴露的越来越多</li></ol>]]></content>
      
      
      <categories>
          
          <category> sourceCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的this</title>
      <link href="/2022/01/04/js-zhong-de-this/"/>
      <url>/2022/01/04/js-zhong-de-this/</url>
      
        <content type="html"><![CDATA[<h2 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h2><ol><li>在全局作用域下,this指向的window</li><li>在函数中调用,指的是函数创建的执行上下文的信息</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//1.直接调用</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//window</span><span class="token comment">//2.在对象中调用</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  bar<span class="token operator">:</span>bar<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', bar: ƒ&#125;</span><span class="token comment">//3.绑定对象</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token comment">//String &#123;'abc'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式绑定和显示绑定"><a href="#隐式绑定和显示绑定" class="headerlink" title="隐式绑定和显示绑定"></a>隐式绑定和显示绑定</h2><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><blockquote><p>它的调用位置中,是通过某个对象发起的函数调用</p></blockquote><ol><li><p>通过对象调用函数</p><ul><li>obj2又引用了obj1对象,再通过obj1对象调用foo函数</li><li>最后实际调用的是obj1对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span>  foo<span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span>  obj1<span class="token operator">:</span> obj1<span class="token punctuation">&#125;</span>obj2<span class="token punctuation">.</span>obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式丢失</p><ul><li>将以上调用赋值给一个变量,结果最终会是window</li><li>在a被调用的位置没有进行过任何绑定,形成隐式绑定</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a<span class="token operator">=</span>obj2<span class="token punctuation">.</span>obj1<span class="token punctuation">.</span>foo<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>注意点</p><ul><li>必须在调用的<strong>对象内部</strong>有一个对函数的引用(比如一个属性)</li><li>如果没有这样的引用,在进行调用时,会报找不到该函数的错误</li><li>正是通过这个引用,间接的将this绑定到了这个对象上</li></ul></li></ol><h3 id="显示绑定-call-apply-bind"><a href="#显示绑定-call-apply-bind" class="headerlink" title="显示绑定(call,apply,bind)"></a>显示绑定(call,apply,bind)</h3><blockquote><p>bind是返回对应函数,便于稍后调用.apply,call 则是立即调用</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"此人"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment">//此人zhangsan</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment">//此人zhangsan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以借助<code>call</code>或<code>apply</code>将函数的作用域绑定到对象中</li></ul><h3 id="apply和call"><a href="#apply和call" class="headerlink" title="apply和call"></a>apply和call</h3><blockquote><p>apply,call除了接收参数不同,作用完全一样.</p><blockquote><p>apply接收的第二个参数是一个数组<br>call需要把参数按顺序传进去</p></blockquote></blockquote><ul><li>稍微改造一下上面的例子,就很容易理解:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">a1<span class="token punctuation">,</span> a2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"此人"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"岁数"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">//此人zhangsan 岁数23</span><span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//此人zhangsan 岁数23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>arguments</code>对象是所有函数中(除箭头函数)都可用的局部变量.你可以使用<code>arguments</code>对象在函数中引用函数的参数.此对象包含传递给函数的每个参数,第一个参数在索引0处</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//3</span><span class="token punctuation">&#125;</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>arguments</code>是一个传递给函数参数的<strong>类数组对象</strong>(不是数组).函数本身没有形参也可以取到传入的实参</li><li><code>...</code>:k扩展运算符的使用,也是ES6中为了取代<code>arguments</code>中新增的</li><li>使用log代理console.log:第一个参数主要是绑定this,所以可以写成null</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//利用arguments</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//利用...</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将<strong>arguments伪数组</strong>转换为数组</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><blockquote><p><code>bind()</code>会返回一个新函数，使这个函数不论怎么调用都有同样的this值</p></blockquote><ul><li>bind的第二个参数和call一样,需要把参数按顺序传进去</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">a1<span class="token punctuation">,</span> a2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  bar<span class="token operator">:</span> bar<span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', bar: ƒ&#125; 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>bind的特性:返回一个新函数,柯里化.这两个是最重要的</p></blockquote><ul><li>柯里化就是将多个参数的函数转换成每次只传一个参数的函数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">&#125;</span><span class="token keyword">let</span> outTest <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">outTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outTest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>并且bind每次绑定一个实参,<code>Function.length</code>(函数期望的参数数量)就会减少一个</li></ul><h2 id="内置函数中的this"><a href="#内置函数中的this" class="headerlink" title="内置函数中的this"></a>内置函数中的this</h2><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><blockquote><p>例如map,forEach等等</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token comment">//三次zhangsan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">不能使用箭头函数,因为箭头函数自身没有this</span></li></ul><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><blockquote><p>此方法是bom对象内置的,回调函数的this也是指向window的</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autoJS</title>
      <link href="/2022/01/03/autojs/"/>
      <url>/2022/01/03/autojs/</url>
      
        <content type="html"><![CDATA[<h2 id="UiSelector"><a href="#UiSelector" class="headerlink" title="UiSelector"></a>UiSelector</h2><blockquote><p>UiSelector即选择器，用于通过各种条件选取屏幕上的控件(<strong>可以链式调用</strong>),返回的是选择器自身</p></blockquote><ol><li><code>text(str)</code>:属性是文本控件上的显示的文字</li><li><code>textContains(str)</code>:”text需要包含字符串str”的筛选条件</li><li><code>textStartsWith(prefix)</code>:text需要以prefix开头</li><li><code>textEndsWith(suffix)</code>:text需要以suffix结束</li><li><code>textMatches(reg)</code>:text需要满足正则表达式reg<ul><li>例如<code>textMatches(/\d+/)</code></li></ul></li><li><code>desc(str)</code>:desc等于字符串str,其它同<strong>text</strong></li><li><code>id(resId)</code>:控件的id属性通常是可以用来确定控件的唯一标识,同<strong>text</strong></li><li><code>className(str)</code>:示一个控件的类别,它同<strong>text</strong></li><li><code>packageName(str)</code>:表示控件所属界面的应用包名<ul><li>获取应用的包名:<code>app.getPackageName(&quot;微信&quot;)</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intern 地址结构</title>
      <link href="/2022/01/03/internet-di-zhi-jie-gou/"/>
      <url>/2022/01/03/internet-di-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="表示-IP-地址"><a href="#表示-IP-地址" class="headerlink" title="表示 IP 地址"></a>表示 IP 地址</h2><blockquote><p>IPv4 使用点分四组的表示方法</p></blockquote><ul><li>例如：<code>0.0.0.0</code>–&gt;<code>00000000 00000000 00000000 00000000</code></li></ul><blockquote><p>IPv6 地址的长度试 128 位,是 IPv4 地址长度的 4 倍。IPv6采用 4 个十六进制的数表示</p></blockquote><ul><li>例如：<code>2001:0db8:85a3:0042:1000:8a2e:0370:7334</code></li></ul><ol><li>一个块中前导的 0 可以不写：例如上面的例子<code>2001:db8:85a3:42:1000:8a2e:370:7334</code></li><li>全 0 的块可以省略,并使用 <code>::</code>代替。但是为了避免出现歧义,一个 IPv6 的地址中<code>::</code>只能使用一次(缩头不缩尾)。例如：<code>2001:db8:0000:0000:0000:8a2e:0000:0000</code>就只能写成<code>2001:db8::8a2e:0:0</code>而不能写成<code>2001:db8::8a2e::</code></li><li>IPv6 格式中嵌入 IPv4 地址可以使用混合符号形式,紧接着 IPv4 部分地址块的的值为 <code>ffff</code>,其他的使用点分四组格式。。例如<code>::ffff:10.0.0.1</code>IPv4 映射的 IPv6 地址</li></ol><h2 id="基本的-IP-地址结构"><a href="#基本的-IP-地址结构" class="headerlink" title="基本的 IP 地址结构"></a>基本的 IP 地址结构</h2><ul><li><strong>单播(unicast):</strong>:<ol><li>在网络中数据通过路由器交换机传给特定的主机</li><li>类似于现实中一个人对另一个人说的话.</li><li>适用于收发电子邮件,浏览网页等的<span style="color:red">一对一的通讯模式</span>(在IPv6中全球单播地址一般是<code>2或者3</code>开头的)</li></ol></li><li><strong>组播(multicast)</strong>:<ol><li>相对于单播广播,组播只对同组成员的数据包传递方式.在网络中,交换机会有选择的复制并传输数据.即只将组内数据传输给加入组的主机.这样一次将数据传输给多个有需要的主机,又能保证不影响其它不需要的主机其他数据</li><li>类似于现实中一个人向多个人说话,而不是所有人</li><li>适用于网络视频会议,网上视频点播等的<span style="color:red">一对一组的通讯模式</span></li></ol></li><li><strong>广播(broadcast)</strong>:<ol><li>在网络中表现为交换机会对网络中的数据无条件的赋值并转发,路由器默认不转发.这样在同一网络下的所有主机都可以接收到所有信息</li><li>类似于现实中一个喇叭对在场所有人讲话</li><li>只对同一网络下的所有成员的传输方式.适用于需要网络中主机之间<span style="color:red">一对所有的通讯模式的很多网络协议</span>例如:ARP,DHCP</li></ol></li><li><strong>任播(anycast)</strong>:<span style="color:red">是一种网络寻址和路由的策略</span>,使得资料可以根据路由拓朴来决定送到“最近”或“最好”的目的地。在任播中,在网络位址和网络节点之间存在一对多的关系：每一个位址对应一群接收节点,但在任何给定时间,只有其中之一可以接收到传送端来的资讯。<span style="color:red">在互联网中,通常使用边界网关协议来实现任播。</span></li></ul><table style="text-align:center">  <tr>    <th>IPV4</th>    <th>IPV6</th>  </tr>  <tr>    <td colspan="2" center>单播</td>  </tr>  <tr>    <td colspan="2" center>组播</td>  </tr>  <tr>    <td>广播</td>    <td>任播</td>  </tr></table><ul><li>ipv6中的广播,可以通过组播的形式实现</li></ul><h3 id="分类寻址"><a href="#分类寻址" class="headerlink" title="分类寻址"></a>分类寻址</h3><p><img src="./ipv4%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png" alt="ipv4地址空间"></p><ol><li>其中A,B,C类用于internet(单播地址)中的接口地址,D类地址供组播使用</li><li>有几个地址通常不作为单播地址使用.特别是地址快的第一个和最后一个</li></ol><h3 id="子网寻址"><a href="#子网寻址" class="headerlink" title="子网寻址"></a>子网寻址</h3><ul><li>每一个IP地址都是<strong>网络号+主机号</strong><ul><li>并不是每一个ip地址网络号主机号都是一样的,</li></ul></li></ul><table><thead><tr><th>类</th><th>网络数</th><th>主机号</th></tr></thead><tbody><tr><td>A</td><td>128</td><td>16777216</td></tr><tr><td>B</td><td>16384</td><td>65536</td></tr><tr><td>C</td><td>2097152</td><td>256</td></tr></tbody></table><ul><li>下面是一个b类地址划分为子网的例子(这种划分可有网络管理员改变)</li></ul><p><img src="./b%E7%B1%BB%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86%E4%B8%BA%E5%AD%90%E7%BD%91.png" alt="b类地址划分为子网"></p><blockquote><p>通过子网寻址,一个站点被分配一个A类,B类,C类的网络号,保留一些剩余主机号进一步用于站点分配.该站点可能将基础地址中的主机部分进一步划分位一个子网号和一个主机号</p></blockquote><ul><li>由于当前的子网字段和主机字段的定义是有站点指定(不是由网络号分类来决定)</li><li>例如以上就是前16位是某些固定的号码,后十六位有站点管理员分配</li></ul><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><p>子网掩码是由一台主机或者路由器使用的分配位,以确定如何从一台主机对应的IP地址中获得网络和子网信息.且子网掩码与ip对应的长度相同</p><blockquote><p>简单的说:划分网络号和主机号的</p></blockquote></blockquote><ul><li>例如:在一个子网下只要划分四个ip地址<ul><li>192.168.0.0 11000000.10101000.00000000.000000<span style="color:red">00</span></li><li>192.168.0.1 11000000.10101000.00000000.000000<span style="color:red">01</span></li><li>192.168.0.2 11000000.10101000.00000000.000000<span style="color:red">10</span></li><li>192.168.0.3 11000000.10101000.00000000.000000<span style="color:red">11</span></li><li>如果ip为192.168.0.4,就可以很容易的判断出不是该网络范围了</li></ul></li><li>可以确定的位都是用1来,不能确定的都使用0</li><li>由此我们可以确定的是除了后两位的所有,除了后两位都设为0,得到子网掩码</li><li>225.225.225.252 11111111.11111111.11111111.11111100</li><li>用CIDR来表示就是192.168.0.0<span style="color:red">&#x2F;30</span>,30代表其中子网掩码中的1的个数</li></ul><blockquote><p>在IPv6中没有子网掩码的概念,取而代之的是<strong>前缀长度</strong>和<strong>接口ID</strong></p></blockquote><ol><li>前缀长度默认是前64位,接口ID默认是后64位</li><li>其中前缀代表的就是网络号,接口ID代表的就是主机号</li></ol><h3 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h3><blockquote><p>特殊用途地址,不会用作单播地址分配</p></blockquote><table><thead><tr><th>前缀</th><th>特殊用途</th></tr></thead><tbody><tr><td>0.0.0.0&#x2F;8</td><td>本地网络中的主机.仅作为源IP地址使用</td></tr><tr><td>10.0.0.0&#x2F;8</td><td>专用网络(内联网)的地址.这种地址不会出现在公共的internet中</td></tr><tr><td>192.168.0.0&#x2F;16</td><td>专用网络(内联网)的地址.这种地址不会出现在公共的internet中</td></tr><tr><td>172.16.0.0&#x2F;12</td><td>专用网络(内联网)的地址.这种地址不会出现在公共的internet中</td></tr><tr><td>127.0.0.0&#x2F;8</td><td>回环地址.一般只使用<code>127.0.0.1</code></td></tr><tr><td>169.254.0.0&#x2F;16</td><td>链路本地地址,只用于一条链路,通常自动分配</td></tr><tr><td>192.0.0.0&#x2F;24</td><td>IETF协议分配(IANA保留)</td></tr><tr><td>192.88.99.0&#x2F;24</td><td>用于6to4中继(任播地址)</td></tr><tr><td>192.18.0.0&#x2F;15</td><td>用于基准和性能测试</td></tr><tr><td>192.0.2.0&#x2F;24</td><td>批准用于文档中的TEST-NET-1.这种地址不会出现在公共的internet中</td></tr><tr><td>198.51.100.0&#x2F;24</td><td>TEST-NET-1地址.被批准用于文档中</td></tr><tr><td>203.0.113.0&#x2F;24</td><td>TEST-NET-1地址.被批准用于文档中</td></tr><tr><td>224.0.0.0&#x2F;4</td><td>IPv4组播地址(以前的D类),仅作为目的ip地址使用</td></tr><tr><td>240.0.0.0&#x2F;4</td><td>保留空间(以前的E类),除了255.255.255.255</td></tr><tr><td>255.255.255.255&#x2F;32</td><td>本地网络(受限的)广播</td></tr></tbody></table><blockquote><p>IPV6的特殊地址</p></blockquote><table><thead><tr><th>前缀</th><th>特殊用途</th></tr></thead><tbody><tr><td>::&#x2F;0</td><td>默认路由条目.不用于寻址</td></tr><tr><td>::&#x2F;128</td><td>这个地址不可指定给某个网络接口,并且只有在主机尚未知道其来源IP时,才会用于软件中(相当于ipv中的0.0.0.0&#x2F;8)</td></tr><tr><td>::1&#x2F;128</td><td>IPv6的回环地址,(类似于ipv4中的127.0.0.1)</td></tr><tr><td>::ffff:0:0&#x2F;96</td><td>Ipv4映射地址(只适用于内部主机)</td></tr><tr><td>fe80::&#x2F;10</td><td>这些链路本地地址指明,这些地址只在区域连线中是合法的,这有点(类似于IPv4中的169.254.0.0&#x2F;16)</td></tr><tr><td>fc00::&#x2F;7</td><td>唯一区域地址(ULA)只可用于本地通信,(类似于IPv4的专用网络地址10.0.0.0&#x2F;8、172.16.0.0&#x2F;12和192.168.0.0&#x2F;16)</td></tr><tr><td>ff00::&#x2F;8</td><td>IPv6组播地址,仅作为目的IP地址使用</td></tr><tr><td>…</td><td></td></tr></tbody></table><h2 id="Internet常遇简写"><a href="#Internet常遇简写" class="headerlink" title="Internet常遇简写"></a>Internet常遇简写</h2><table><thead><tr><th>简写</th><th>名称</th></tr></thead><tbody><tr><td>FIFO</td><td>先进先出</td></tr><tr><td>FCFS</td><td>先到达先服务</td></tr><tr><td>TDM</td><td>时分复用</td></tr><tr><td>VC</td><td>虚电路</td></tr><tr><td>OSI</td><td>开放系统互连标准</td></tr><tr><td>ISO</td><td>国际标准化组织</td></tr><tr><td>PDU</td><td>消息对象(链路层称为帧,IP层称为IP数据报)</td></tr><tr><td>ARP</td><td>地址解析协议</td></tr><tr><td>ICMP</td><td>Internet控制消息协议(IP的辅助协议)<code>ping</code></td></tr><tr><td>IGMP</td><td>互联网组管理协议:(IPv4的一个辅助协议)</td></tr><tr><td>DCCP</td><td>数据拥塞控制协议(介于TCP&#x2F;UDP间的服务类型)</td></tr><tr><td>SCTP</td><td>流控制传输协议</td></tr><tr><td>SSH</td><td>安全外壳协议(22)</td></tr><tr><td>FTP</td><td>文件传输协议(20,21)</td></tr><tr><td>Telnet</td><td>远程终端协议(23)</td></tr><tr><td>SMTP</td><td>简单邮件传输协议(25)</td></tr><tr><td>DNS</td><td>域名系统(53)</td></tr><tr><td>HTTP&#x2F;HTTPS</td><td>超文本传输协议(80&#x2F;443)</td></tr><tr><td>IMAP&#x2F;IMAPS</td><td>交互式邮件访问协议(143&#x2F;993)</td></tr><tr><td>SNMP</td><td>简单网络管理协议(161,162)</td></tr><tr><td>LDAP</td><td>轻量级目录访问协议(389)</td></tr><tr><td>DHCP</td><td>动态主机配置协议</td></tr><tr><td>IID</td><td>接口标识符</td></tr><tr><td>EUI</td><td>扩展唯一标识符</td></tr><tr><td>OUI</td><td>组织唯一标识符</td></tr><tr><td>CIDR</td><td>无类别域间路由</td></tr><tr><td>NAT</td><td>网络地址转换</td></tr><tr><td>NTP</td><td>网路时间协议</td></tr><tr><td>SAP</td><td>会话通告协议</td></tr><tr><td>SDP</td><td>会话描述协议</td></tr><tr><td>LAN</td><td>家庭局域网</td></tr><tr><td>WLAN</td><td>无线局域网</td></tr><tr><td>ICS</td><td>Internet连接共享</td></tr><tr><td>LLC</td><td>逻辑链路控制</td></tr><tr><td>SFD</td><td>帧起始分割符</td></tr><tr><td>DST</td><td>目的地址</td></tr><tr><td>SRC</td><td>源地址</td></tr><tr><td>VLAN</td><td>虚拟局域网</td></tr><tr><td>STP</td><td>生成树协议</td></tr><tr><td>BPDU</td><td>网桥协议数据单元</td></tr><tr><td>RTS&#x2F;CTS</td><td>请求发送&#x2F;明确发送</td></tr><tr><td>ACK</td><td>重传&#x2F;确认</td></tr><tr><td>TSF</td><td>时间同步功能</td></tr><tr><td>PCF</td><td>点协调功能</td></tr><tr><td>DCF</td><td>分布式协调功能</td></tr><tr><td>HCF</td><td>混合协调功能</td></tr><tr><td>WPA</td><td>WiFi保护访问</td></tr><tr><td>TKIP</td><td>临时密钥完整性协议</td></tr><tr><td>PSK</td><td>预共享密钥</td></tr><tr><td>PPP</td><td>点到点协议(协议集合)</td></tr><tr><td>LCP</td><td>链路控制协议</td></tr><tr><td>NCP</td><td>IPv4:IP控制协议(IPCP)&#x2F;IPv6:IPV6CP</td></tr><tr><td>lo</td><td>回环接口</td></tr><tr><td>PPTP</td><td>点对点隧道协议</td></tr><tr><td>UDL</td><td>单向链路</td></tr><tr><td>DTCP</td><td>动态隧道配置协议</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bom</title>
      <link href="/2022/01/03/bom/"/>
      <url>/2022/01/03/bom/</url>
      
        <content type="html"><![CDATA[<h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><blockquote><p>视口代表一个可看见的多边形区域(通常是矩形).在浏览器的范畴里,他代表的就是浏览器网站中可见内容的部分,视口外的内容在被滚动进来前都是不可见的</p></blockquote><ul><li><strong>可见视口</strong>:视口当前可见的部分.可见视口可能回避布局视口更小,因为当用户缩小浏览器的比例,布局视口不变,而可见视口会变小</li><li><strong>布局视口</strong>:是浏览器在其中绘制网页的视口.从本质上讲,它表示可查看的内容,而可视视口表示用户显示设备上当前可见的内容</li></ul><h3 id="浏览器窗口大小"><a href="#浏览器窗口大小" class="headerlink" title="浏览器窗口大小"></a>浏览器窗口大小</h3><ol><li><code>innerWidth</code>,<code>innerHeight</code>:返回浏览器窗口中页面<strong>可见视口</strong>的大小(不包含边框,工具栏)  <ul><li>使用:<code>window.innerWidth</code></li></ul></li><li><code>outerWidth</code>,<code>outerHeight</code>:返回浏览器窗口自身的大小(整个浏览器,包含边框,工具栏)<ul><li>使用:<code>window.outerWidth</code></li></ul></li><li><code>scrollX</code>,<code>scrollY</code>:返回文档当前水平滚动和垂直滚动的像素数<ul><li>使用<code>window.scroll(0,0)</code>:这样会把文档重新滚动到左上角</li></ul></li><li><code>clientWidth</code>,<code>clientHeight</code>: 返回**布局视口(元素)**的大小<ul><li>使用:<code>document.documentElement.clientWidth</code></li></ul></li><li><code>screen.height</code>,<code>screen.width</code>:返回屏幕(整个显示器)的大小</li><li><code>screen.availHeight</code>,<code>screen.availWidth</code>:返回可使用的屏幕高度或者宽度(不会包括固定的任务栏等不可使用的区域)</li></ol><blockquote><p>注意:布局视口相对于可见视口的概念.可见视口只能显示页面的一小部分.</p></blockquote><p><img src="http://zyjcould.ltd/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3.png" alt="浏览器视口"></p><ul><li><strong>移动窗口</strong>(moveTo,moveBy)和<strong>缩放窗口</strong>(resizeTo,resizeBy)方法一般浏览器会禁用</li></ul><h3 id="DOM元素大小"><a href="#DOM元素大小" class="headerlink" title="DOM元素大小"></a>DOM元素大小</h3><ol><li><code>clientWidth</code>,<code>clientHeight</code>:CSS的width&#x2F;height和padding属性值之和<ul><li>元素边框和滚动条不包括在内,也不包含任何可能的滚动区域</li></ul></li><li><code>offsetWidth</code>,<code>offsetHeight</code>:元素在页面中占据的width&#x2F;height总和,<span style="color:red">包括width,padding,border以及滚动条的宽度</span></li><li><code>offsetLeft</code>,<code>offsetTop</code>:只读.返回元素左上角相对于<code>HTMLElement.offsetParent</code>(父元素不是<code>display:none</code>)节点的左或者上边界的偏移量</li><li><code>scrollWidth</code>,<code>scrollHeight</code>当元素不是<code>overflow:hidden</code>样式属性时,元素的总宽度(滚动宽度)<ul><li>在默认状态下,如果该属性值大于clientWidth属性值,则元素会显示滚动条,以便能够翻阅被隐藏的区域</li></ul></li></ol><h3 id="event事件上的元素大小"><a href="#event事件上的元素大小" class="headerlink" title="event事件上的元素大小"></a>event事件上的元素大小</h3><blockquote><p>该元素只会在event(如click,mousemove等)上才有的属性</p></blockquote><ul><li><p>以下属性的方位都是相对于左上方为原点的坐标系,越往右&#x2F;下,值越大</p></li><li><p><code>offsetX</code>,<code>offsetY</code>:鼠标相对于目标元素的距离.</p><ul><li>参照点是目标元素的左上角</li></ul></li><li><p><code>clientX</code>,<code>clientY</code>:鼠标相对于浏览器视口的距离.</p><ul><li>参照点是目标元素的左上角,计算鼠标点距离浏览器内容区域的左上角的距离(不包含任何可能的滚动区域)</li></ul></li><li><p><code>layerX</code>,<code>layerY</code>:鼠标相对于定位属性的距离.</p><ul><li>参照点是父元素(<span style="color:red">,如果自身有定位属性的话就是相对于自身</span>),都没有的话:就是相对于body元素</li></ul></li><li><p><code>pageX</code>,<code>pageY</code>:鼠标相对与整个页面左上角的距离.</p><ul><li>参照点是页面本身的body原点.会以body左上角计算值,并且把滚动条滚过的高或宽计算在内(受滚动区域影响)</li></ul></li><li><p><code>screenX</code>,<code>screenY</code>:鼠标相对于屏幕的距离.</p><ul><li>参照点是屏幕的左上角</li></ul></li></ul><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h2><blockquote><p>用于导航指定到url,也可以打开新的浏览器窗口(接收以下四个参数)</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 以下功能相同 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>要加载的url</li><li>目标窗口(会弹出一个新的窗口):<span style="color:red">自己决定名字</span></li><li>特性字符串</li><li>新窗口在浏览器历史记录中是否替代当前加载页面的<strong>布尔值</strong></li></ol><ul><li>例如:<code>window.open(&quot;https://www.baidu.com&quot;,&quot;wro&quot;,&quot;height=400,width=400,resizable=true&quot;)</code></li><li>打开一个400*400大小可拖动改变的<code>wro</code>窗口</li></ul><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ol><li><code>setTimeout()</code>:指定时间后执行代码.<ul><li>返回一个超时排期的ID,可用于取消该任务</li><li><span style="color:red">设置循环任务推荐,因为他在满足条件时自动停止</span>.</li></ul></li><li><code>setInterval()</code>:指定每隔一段事件后执行某些代码.<ul><li>也会返回一个循环定时ID</li></ul></li></ol><ul><li>注意:<code>clearTimeout(ID)</code>用于取消定时器</li></ul><h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><ol><li><code>alert()</code>:警告框,只有确认选项</li><li><code>confirm()</code>:确认框,有<strong>确认</strong>和<strong>取消</strong>按钮,分别返回<code>true</code>和<code>false</code></li><li><code>prompt</code>:文本提示框.<ul><li>接收两个参数,第一个是提示消息,第二个是输入框输入信息.</li><li>用户按确认按钮,返回输入框输入信息</li></ul></li></ol><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><blockquote><p><code>window.location</code>和<code>document.location</code>指向同一个对象</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Location.href</td><td>包含整个URL,location的toString()方法返回</td></tr><tr><td>Location.protocol</td><td>页面使用的协议.通常包括<code>http:</code>或<code>https:</code></td></tr><tr><td>Location.host</td><td>服务器名和端口号</td></tr><tr><td>Location.hostname</td><td>服务器名</td></tr><tr><td>Location.port</td><td>端口号</td></tr><tr><td>Location.pathname</td><td>url的路径</td></tr><tr><td>Location.search</td><td>查询字符串.以?开头</td></tr><tr><td>Location.hash</td><td>哈希散列值,开头有一个“#”</td></tr><tr><td>Location.username</td><td>域名前指定的用户名</td></tr><tr><td>Location.password</td><td>域名前指定的密码</td></tr><tr><td>Location.origin</td><td>url的源地址</td></tr></tbody></table><blockquote><p>查询字符串的解码<code>decodeURIComponent</code>和编码<code>encodeURIComponent</code></p></blockquote><ol><li><code>encodeURIComponent()</code>:原字串作为URI组成部分被编码后组成的新字符串</li><li>转义除了如下所示的所有文字<code>A-Z a-z 0-9 - _ . ! ~ * &#39; ( )</code></li><li>反之,<code>decodeURIComponent()</code>就是将编码之后的字符串解码</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token comment">//'%23'</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"%23"</span><span class="token punctuation">)</span><span class="token comment">//'#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>URLSearchParams</code>:给构造函数传入一个查询字符串即可创造一个实例.并且暴露了<code>get()</code>,<code>has()</code>,<code>delete()</code>等等,同时可以作为可迭代对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">"?name=zhangsan&amp;sex=gender"</span><span class="token punctuation">)</span>searchParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//true</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//zhangsan</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"15"</span><span class="token punctuation">)</span>searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//'name=zhangsan&amp;sex=gender&amp;age=15'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>操作地址</p></blockquote><ul><li>例如:<code>location.assign(&quot;www.baidu.com&quot;)</code>,如果使用<code>location.href</code>设置一个url,也会以同一个url值调用assign()方法</li><li><span style="color:red">除了<strong>hash</strong>之外,只要修改了<code>location</code>的一个属性,就会导致页面重新加载url</span></li></ul><blockquote><p>如果不希望浏览器的操作地址增加,可以使用<code>location.replace()</code>,用户不能回到前一页</p><p><code>location.reload()</code>:重新加载当前显示页面</p><ul><li>如果不传参数,会以最有效的方式加载(可能是缓存)</li><li>如果传<code>true</code>,会从服务器加载</li></ul></blockquote><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ol><li><code>history.go(-1)</code>相当于<code>history.back()</code>:后退一页</li><li><code>history.go(1)</code>相当于<code>history.forward()</code>:前进一页</li><li>可以接受一个字符串:可能前进也可能后退</li><li><code>history.length</code>:返回具体的数目</li></ol><blockquote><p>如果页面的url发生变化,则会在历史记录中生成一个新条目.这也包括url的散列值(<code>location.hash</code>)</p></blockquote><h3 id="管理历史状态"><a href="#管理历史状态" class="headerlink" title="管理历史状态"></a>管理历史状态</h3><ol><li><code>history.pushState()</code>:接收三个参数,<code>state对象</code>,<code>一个新状态的标题</code>,<code>相对的url(可选)</code></li><li>一旦<code>pushState()</code>方法执行后,状态信息就会被推到历史记录中,浏览器地址栏也会相应变化新的url.也就会相应的启用<code>后退</code>按钮</li><li>当活动历史记录条目更改时,将触发<code>popstate</code>事件如果被激活的历史记录条目是通过对<code>history.pushState()</code>的调用创建,或者受到对<code>history.replaceState()</code>的调用的影响,popstate事件的state属性包含历史条目的状态对象的副本</li><li>注意用<code>history.pushState()</code>或<code>history.replaceState()</code>不会触发popstate事件只有在做出浏览器动作时,才会触发该事件</li><li>测试:<a href="http://example.com/example.html">http://example.com/example.html</a></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"location: "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location <span class="token operator">+</span> <span class="token string">", state: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"title 1"</span><span class="token punctuation">,</span> <span class="token string">"?page=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"title 2"</span><span class="token punctuation">,</span> <span class="token string">"?page=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"title 3"</span><span class="token punctuation">,</span> <span class="token string">"?page=3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs "location: http://example.com/example.html, state: null</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Logs "location: http://example.com/example.html?page=3, state: &#123;"page":3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同时也可以使用<code>history.state</code>获取当前状态(<code>state对象</code>)</li></ul><blockquote><p><code>history.replaceState()</code>更新状态不会创建新历史记录,只会覆盖当前状态</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validateNPN</title>
      <link href="/2022/01/02/validatenpn/"/>
      <url>/2022/01/02/validatenpn/</url>
      
        <content type="html"><![CDATA[<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="关于部分检测工具"><a href="#关于部分检测工具" class="headerlink" title="关于部分检测工具"></a>关于部分检测工具</h3><blockquote><p><a href="https://juejin.cn/post/6977183707148845070#refetch">关于测试工具的一点了解</a></p></blockquote><ol><li><code>ava</code>:开源的Node.js测试运行器</li><li><code>xo</code>:强大的刷新工具.通过简单的命令xo –fix ，自动修复了许多问题</li><li><code>node-tap</code>:<a href="https://node-tap.org/docs/getting-started/">nodejs一款测试工具</a></li></ol><h3 id="TravisCI"><a href="#TravisCI" class="headerlink" title="TravisCI"></a>TravisCI</h3><blockquote><p><code>Travis CI</code>可以设置github托管的项目在push或者pull等时机触发构建与测试，进行持续集成</p></blockquote><ul><li>可以自动进行构建,自动运行测试,部署,随时发现问题,随时修复.</li><li>例如<code>hexo-deployer-git</code>也是一种持续集成的工具</li><li>参考:<a href="https://www.liaoxuefeng.com/article/1083103562955136">https://www.liaoxuefeng.com/article/1083103562955136</a></li></ul><h3 id="Dependabot"><a href="#Dependabot" class="headerlink" title="Dependabot"></a>Dependabot</h3><blockquote><p><code>Dependabot</code>会自动创建拉取请求以响应安全建议.每天它都会下载你的依赖文件,解析它们并检查任何过时或不安全的依赖关系</p><blockquote><p>并且提供了有关执行特定更新的所有项目的持续集成 (CI)</p></blockquote></blockquote><ul><li>参考:<a href="https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/configuring-dependabot-security-updates">https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/configuring-dependabot-security-updates</a></li></ul><h2 id="validate-npm-package-name"><a href="#validate-npm-package-name" class="headerlink" title="validate-npm-package-name"></a>validate-npm-package-name</h2><blockquote><p>检验该字符串是否是一个有效的包命名</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"validate-npm-package-name"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">" leading-space:and:weirdchars"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#123;</span><span class="token comment">//  validForNewPackages: false,</span><span class="token comment">//  validForOldPackages: false,</span><span class="token comment">//  errors: [</span><span class="token comment">//    'name cannot contain leading or trailing spaces',</span><span class="token comment">//    'name can only contain URL-friendly characters'</span><span class="token comment">//  ]</span><span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>builtins</code>:列出了 node 所有的内置模块</p></blockquote><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ol><li>不能是<code>null</code>或者<code>undefined</code>这种关键字</li><li>必须是字符串</li><li>不能是空的包</li><li>不能以<code>.</code>,<code>_</code>开头</li><li>包名两头不能有空格</li><li>不能大于214个字母</li><li>必须全是小写</li><li>不能包含<code>[~&#39;!()*]</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">name<span class="token operator">===</span><span class="token keyword">null</span>name<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token keyword">typeof</span> name <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token operator">!</span>name<span class="token punctuation">.</span>lengthname<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^_</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> namename<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">214</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> name<span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token string">'!()*]/.test(name.split('</span><span class="token operator">/</span>'<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>(?:...)</code>:匹配括号中的内容,但是不捕获</li><li>参考:<a href="https://regex101.com/">https://regex101.com/</a></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> scopedPackagePattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^(?:@([^/]+?)[/])?([^/]+?)$'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!==</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Maybe it's a scoped package name, like @user/package</span>    <span class="token keyword">var</span> nameMatch <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>scopedPackagePattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameMatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> user <span class="token operator">=</span> nameMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">var</span> pkg <span class="token operator">=</span> nameMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">===</span> user <span class="token operator">&amp;&amp;</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span> <span class="token operator">===</span> pkg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>warnings<span class="token punctuation">,</span> errors<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'name can only contain URL-friendly characters'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>warnings<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>encodeURIComponent()</code>:原字串作为URI组成部分被编码后的新字符串<ol><li>转义除了如下所示的所有文字<code>A-Z a-z 0-9 - _ . ! ~ * &#39; ( )</code></li><li>例如<code>console.log(encodeURIComponent(&quot;#&quot;))//%23</code></li></ol></li></ul><blockquote><p>不能含有nodejs等核心模块</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">builtins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">builtin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> builtin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>builtin <span class="token operator">+</span> <span class="token string">' is a core module name'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结与感受"><a href="#总结与感受" class="headerlink" title="总结与感受"></a>总结与感受</h2><ul><li>正则匹配构思巧妙,想不出来</li><li>学到一点关于测试方面的东西,弥补一直不知道的东西</li><li>项目虽小,逻辑清晰,值得学习</li></ul><blockquote><p>参考:<a href="https://juejin.cn/post/7012047954995314701">https://juejin.cn/post/7012047954995314701</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sourceCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> sourceCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>remoteGitTags</title>
      <link href="/2021/12/31/remotegittags/"/>
      <url>/2021/12/31/remotegittags/</url>
      
        <content type="html"><![CDATA[<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a>.gitattributes</h3><ul><li>文本换行的方式:<ol><li><code>CRLF</code>:对应<code>\r\n</code>两个字符(Windows 系统)</li><li><code>LF</code>:对应<code>\n</code>,Uninx(Linux,MacOS)</li></ol></li></ul><blockquote><p><code>.gitattributes</code>文件:文件中的一行定义一个路径的若干个属性,主要用于定义每种文件的属性,以方便<code>git</code>帮我们统一管理</p></blockquote><ol><li><strong>text</strong>控制行尾的规范性,其行尾将在存储库中转换为<code>LF</code></li><li><strong>eol</strong>设定行末规范<ul><li><code>eol=lf</code>,检入时将行尾规范为<code>LF</code>,检出时将行尾转换为<code>LF</code></li><li><code>eol=crlf</code>,检入时将行尾规范为<code>LF</code>,检出时将行尾转换为<code>CRLF</code></li></ul></li><li>关于<code>eol=lf</code>和<code>text</code>的区别<a href="https://stackoverflow.com/questions/32854978/what-is-the-difference-between-eol-lf-and-text-in-a-gitattributes-file">https://stackoverflow.com/questions/32854978/what-is-the-difference-between-eol-lf-and-text-in-a-gitattributes-file</a></li><li><strong>diff</strong>:<a href="https://cloud.tencent.com/developer/section/1138630">https://cloud.tencent.com/developer/section/1138630</a></li></ol><table><thead><tr><th>案例</th><th>描述</th></tr></thead><tbody><tr><td>*  text&#x3D;auto</td><td>文件自动换行.如果是文件,则在文件入Git库时,行尾自动转换为LF如果已经在入Git库中的文件的行尾为CRLF,则该文件在入Git库时,不再转换为LF</td></tr><tr><td>*.txt  text</td><td>只有<code>txt</code>文件会进行行尾规范化</td></tr><tr><td>*.jpg  -text</td><td><code>jpg</code>文件不会进行任何行尾规范化.</td></tr><tr><td>*.vcproj  text eol&#x3D;crlf</td><td>只有<code>vcproj</code>文件见如是行尾为<code>LF</code>,检出是自动转换为<code>CRLF</code></td></tr><tr><td>*.sh  text eol&#x3D;lf</td><td>只有sh文件检入时行尾为<code>LF</code>,检出时行尾不会转换为<code>CRLF</code></td></tr><tr><td>*.py  eol&#x3D;lf</td><td>只针对工作目录中的文件</td></tr></tbody></table><h3 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h3><blockquote><p>npm 从命令行、环境变量和npmrc文件中获取其配置设置该npm config命令可用于更新和编辑用户和全局<code>npmrc</code>文件的内容</p></blockquote><ol><li>每个项目的配置文件(&#x2F;path&#x2F;to&#x2F;my&#x2F;project&#x2F;.npmrc)</li><li>每个用户的配置文件(~&#x2F;.npmrc)</li><li>全局配置文件($PREFIX&#x2F;etc&#x2F;npmrc)</li><li>npm 内置配置文件(&#x2F;path&#x2F;to&#x2F;npm&#x2F;npmrc)</li></ol><h2 id="remote-git-tags"><a href="#remote-git-tags" class="headerlink" title="remote-git-tags"></a>remote-git-tags</h2><blockquote><p>关于<code>node:</code>前缀</p><blockquote><p>核心模块也可以使用 node: 前缀来标识,在这种情况下,它会绕过 require 缓存例如, <code>require(&#39;node:http&#39;)</code> 将始终返回内置的 HTTP 模块,即使该名称存在 <code>require.cache</code> 条目</p></blockquote></blockquote><ul><li>本质:<code>git ls-remote --tags repoUrl</code>,获取远程仓库的标签</li></ul><h3 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h3><ul><li>将回调函数转换成<code>promise</code>的形式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> execFile <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node:child_process"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> execFile1 <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>execFile<span class="token punctuation">)</span><span class="token function">execFile1</span><span class="token punctuation">(</span><span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ls-remote'</span><span class="token punctuation">,</span> <span class="token string">'--tags'</span><span class="token punctuation">,</span> <span class="token string">"git@github.com:vuejs/create-vue.git"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>难点:<ol><li><code>Reflect.apply</code>:this是没有必要的,可以改成null</li><li>关于使用<code>apply</code>绑定<code>execFile</code>执行此函数</li><li>还需将<code>execFile</code>所需的回调函数push进入args</li></ol></li></ul><h3 id="execFile"><a href="#execFile" class="headerlink" title="execFile"></a>execFile</h3><ul><li>在子进程中生成shell命令,并执行</li><li>参考:<a href="https://www.nodeapp.cn/child_process.html">https://www.nodeapp.cn/child_process.html</a></li></ul><blockquote><ul><li><code>execFile</code>:在<code>child_process</code>模块中,可以直接衍生命令,而无需像<code>exec</code>一样先生成shell(<strong>解码输出为UTF-8,并将字符串传给回调</strong>)</li><li><code>child_process.execFile(file[, args][, options][, callback])</code></li><li>返回一个<code>childProcess</code></li></ul></blockquote><ul><li>参考:<a href="https://juejin.cn/post/7028731182216904740">https://juejin.cn/post/7028731182216904740</a></li></ul><h2 id="总结与感受"><a href="#总结与感受" class="headerlink" title="总结与感受"></a>总结与感受</h2><ol><li>对于源码里很多文件不够了解,接触的太少</li><li>实现<code>promisify</code>发现自己对promise的操作还是不熟</li><li>对于node很多模块也不是很熟,还需要多练习</li><li>基础还不是很扎实,还需要加强练习</li></ol>]]></content>
      
      
      <categories>
          
          <category> sourceCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> sourceCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>githubPages</title>
      <link href="/2021/12/15/githubpages/"/>
      <url>/2021/12/15/githubpages/</url>
      
        <content type="html"><![CDATA[<h2 id="使用github部署网站"><a href="#使用github部署网站" class="headerlink" title="使用github部署网站"></a>使用github部署网站</h2><blockquote><p>可以直接通过master分支直接来馈送网站.而不需要另行创建分支(容易导致冲突)</p></blockquote><ol><li>创建一个<code>docs</code>文件夹</li><li>需要含有<code>index.html</code>入口文件</li><li>需要先把项目推到仓库中,然后在设置中进行设置</li></ol><p><img src="./createPages.png" alt="创建"></p><h2 id="使用webhook自动化部署"><a href="#使用webhook自动化部署" class="headerlink" title="使用webhook自动化部署"></a>使用webhook自动化部署</h2><blockquote><p>强烈建议使用ssh,而不是https</p></blockquote><h3 id="设置node环境"><a href="#设置node环境" class="headerlink" title="设置node环境"></a>设置node环境</h3><ul><li>在官网下载最新版的node:<code>https://nodejs.org/en/download/</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解压</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xz -d node-v16.13.1-linux-x64.tar.xz<span class="token function">tar</span> -xf node-v16.13.1-linux-x64.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>配置环境:在<code>/etc/profile</code>最后一行加入</li><li>注意:<span style="color:red">是node所在的路径</span>,我这里就是在<code>/</code>目录下</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/node-v16.13.1-linux-x64/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><span style="color:red">在终端输入<code>source /etc/profile</code>,使设置生效</span></p></li><li><p>测试</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> -vnode -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="构建服务"><a href="#构建服务" class="headerlink" title="构建服务"></a>构建服务</h3><blockquote><p>安装插件(按照自己的想法动手配置)</p></blockquote><ol><li>在目录<code>\opt</code>下创建文件夹<code>webhook</code>,初始化插件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> init -y<span class="token function">npm</span> i -S github-webhook-handler<span class="token function">npm</span> i pm2 -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>构建webhook服务</li></ol><blockquote><ul><li><code>secret</code>设置必须何github后台的一致</li><li>端口也必须和github的后台一致</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'github-webhook-handler'</span><span class="token punctuation">)</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> secret<span class="token operator">:</span> <span class="token string">'secret'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 上面的 secret 保持和 GitHub 后台设置的一致文章后面会提到。</span><span class="token keyword">function</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>  <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> resp <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">callback</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'gggggggggg'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received a push event for %s to %s'</span><span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'./deploy.sh'</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h3><ol><li>在设置中打开开发者设置<code>Developer settings</code></li><li>打开个人访问令牌<code>Personal access tokens</code>,生成令牌</li><li>打开存储库的设置中的网络钩子<code>webhooks</code><ul><li><code>secret</code>:就是个人访问令牌<code>Personal access tokens</code></li><li><code>url</code>:端口一定要在安全组开放</li><li>可以先看阮一峰的<code>github actions</code>:<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></li></ul></li><li>会出现连接不到主机的状况(等待做完以下步骤)</li></ol><p><img src="./webhooks.png" alt="webhooks"></p><h3 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h3><ol><li><p>在服务器端生成ssh密钥(ssh存在于<code>/root/.ssh</code>文件夹),将公钥<code>pub</code>存入<code>github</code>中</p></li><li><p><code>ssh-keygen -t rsa -C &quot;zyj17715640603@gmail.com&quot;</code>(自己的账号)</p></li><li><p>配置<code>git</code>:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --gloabl user.name<span class="token operator">=</span><span class="token string">"jack"</span><span class="token function">git</span> config --gloabl user.email<span class="token operator">=</span><span class="token number">1553198027</span>@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用<code>git clone git@...</code>克隆仓库</p></li></ol><blockquote><p>在<code>webhook</code>目录下创建<code>deploy.sh</code>写入以下内容</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 网站的根目录,用自己的目录。</span><span class="token assign-left variable">WEB_PATH</span><span class="token operator">=</span><span class="token string">'/opt/web/Jack-Zhang-1314.github.io.git'</span><span class="token builtin class-name">echo</span> “start deployment”<span class="token builtin class-name">cd</span> <span class="token variable">$WEB_PATH</span><span class="token builtin class-name">echo</span> “fetching from remote…”<span class="token function">git</span> fetch --all<span class="token function">git</span> reset --hard origin/master <span class="token function">git</span> pull<span class="token builtin class-name">echo</span> “done”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于linux权限问题,建议先执行<code>chmod 777 ./deploy.sh</code></p></blockquote><ul><li>然后运行<code>webhook.js</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pm2 start webhook.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><blockquote><p>nginx代理开启网页:<a href="http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8">http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8</a></p></blockquote><ul><li>参考:<a href="http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8">http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setPrototypeOf的区别</title>
      <link href="/2021/12/10/setprototypeof-de-qu-bie/"/>
      <url>/2021/12/10/setprototypeof-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初始化两个函数对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sound</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> sound<span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">+</span> <span class="token string">'我会喵喵'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">behavior</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'我会跑'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h2><blockquote><ul><li>当我们创建一个函数就会有一个<code>prototype</code>属性指向原型对象.通过该函数创建的实例对象会共享原型对象上的属性和方法</li><li>默认情况下原型对象会自动获得一个<code>constructor</code>属性.这个属性指向构造函数本身</li><li>使用函数创建一个实例后,该实例包含一个<strong>隐式原型</strong>(<code>__proto__</code>),指向构造函数的原型对象.</li><li>对象原型之间的嵌套组成了原型链，原型链的作用是维护访问对象属性的查询，确定访问权限</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Cat<span class="token punctuation">)</span><span class="token comment">//见图</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> cat<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.png" alt="原型对象"></p><ul><li>从图中可以看出实例的<code>隐式原型</code>和函数的显示原型指向同一个对象</li></ul><h3 id="关于继承的问题"><a href="#关于继承的问题" class="headerlink" title="关于继承的问题"></a>关于继承的问题</h3><blockquote><p>使用猫类继承动物类,<code>使用猫的原型指向动物的实例</code></p></blockquote><ol><li>关于<code>Cat.prototype.constructor</code>的指向问题</li><li>关于<code>Cat.prototype</code>的指向问题</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> a<span class="token comment">//Animal</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token comment">//将指向改成Cat</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token comment">//创建Cat实例</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'mimi'</span><span class="token punctuation">,</span> <span class="token string">'miao~miao~'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"shout"</span> <span class="token keyword">in</span> cat<span class="token punctuation">)</span><span class="token comment">//true</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//mimimiao~miao~</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"behavior"</span> <span class="token keyword">in</span> cat<span class="token punctuation">)</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> a<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>Cat.prototype.constructor</code>的指向会指向<code>Animal</code>构造函数,此时最好手动更改</li><li><code>Cat</code>的原型对象会被更改为<code>Animal</code>的实例对象,旧原型上的任何属性都会被更改(指向变换了)</li><li><code>Cat.prototype</code>的指向为<code>Animal</code>的一个实例对象a</li><li>那么同时可以在继承后的原型加方法</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">behavior</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'我会跑'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="./Cat.prototype.png" alt="Cat.prototype的原型指向"></p><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'mimi'</span><span class="token punctuation">,</span> <span class="token string">'miao~miao~'</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">behavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><img src="./setPrototypeOf.png" alt="使用setPrototypeOf"></li><li>给<code>Cat</code>的原型设置了一个名为<code>Animal</code>的原型,所以Cat的<strong>原有的原型</strong>的原型就是Animal的原型<code>Cat.prototype.__proto__ === Animal.prototype</code></li><li>所以<code>setPrototypeOf</code>会优先访问<code>Cat</code>原有的原型然后再访问原型的原型</li></ol><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><img src="./create.png" alt="create"></li><li>使用<code>Object.create()</code>会将<code>Cat.prototype</code>先将此原型清成空的原型,这个空的原型会指向Animal的原型<code>Cat.prototype.__proto__ === Animal.prototype</code></li><li>所以<code>Object.create()</code>会将<code>Cat.prototype</code>清空为干净的原型,然后去继承</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode集成go</title>
      <link href="/2021/12/08/vscode-ji-cheng-go/"/>
      <url>/2021/12/08/vscode-ji-cheng-go/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li><img src="./GO%E6%8F%92%E4%BB%B6.png" alt="安装go插件"></li><li>在控制台配置<code>go proxy</code><ul><li><code>go env -w GOPROXY=https://goproxy.cn,direct</code></li></ul></li><li><img src="./env%E9%85%8D%E7%BD%AE.png" alt="配置环境"><ul><li><strong>GO111MODULE</strong>:<ol><li>当为on时则使用<code>Go Modules</code>,go会忽略<code>$GOPATH</code>和<code>vendor</code>文件夹,只根据<code>go.mod</code>下载依赖</li><li>当为off时则不适用新特性Go Modules支持,它会查找 vendor目录和 $GOPATH来查找依赖关系,也就是继续使用“GOPATH模式”</li><li>当为auto时或未设置时则根据当前项目目录下是否存在 <code>go.mod</code>文件或<code>$GOPATH/src之</code>外并且其本身包含<code>go.mod</code>文件时才会使用新特性<code>Go Modules</code>模式(默认值)</li></ol></li><li><strong>GOPATH</strong>:可以这么理解为GO源码目录,在这个目录进行编译,链接最后生成所需要的库,可执行文件</li><li><strong>GOROOT</strong>:go语言编译,工具,标准库等的安装路径</li><li><strong>GOPROXY</strong>:下载go模块镜像(如果国外的被墙<a href="https://proxy.golang.org/">https://proxy.golang.org/</a>),<ul><li>参考:<a href="https://goproxy.cn/">https://goproxy.cn/</a></li></ul></li></ul></li></ol><h2 id="开始下载工具"><a href="#开始下载工具" class="headerlink" title="开始下载工具"></a>开始下载工具</h2><blockquote><p>此操作会将所有下载的镜像和缓存保存到<code>GOPATH</code>的路径下</p><p>在setting.json中配置<code>gopath</code>和<code>goroot</code></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"go.autocompleteUnimportedPackages"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"go.buildOnSave"</span><span class="token operator">:</span> <span class="token string">"workspace"</span><span class="token punctuation">,</span><span class="token property">"go.lintOnSave"</span><span class="token operator">:</span> <span class="token string">"package"</span><span class="token punctuation">,</span><span class="token property">"go.vetOnSave"</span><span class="token operator">:</span> <span class="token string">"package"</span><span class="token punctuation">,</span><span class="token property">"go.buildTags"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"go.buildFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.lintFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.vetFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.coverOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"go.useCodeSnippetsOnFunctionSuggest"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"go.goroot"</span><span class="token operator">:</span> <span class="token string">"F:\\go"</span><span class="token punctuation">,</span><span class="token property">"go.gopath"</span><span class="token operator">:</span> <span class="token string">"D:\\GoPath"</span><span class="token punctuation">,</span><span class="token property">"go.gocodeAutoBuild"</span><span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><code>ctrl+shift+p</code>打开命令面板</p></li><li><p>搜索<code>go:install/update tools</code>并且点击后全选</p></li><li><p>每完成一项就会返回一个成功</p></li></ol><p><img src="./goTools.png" alt="gotools"></p><p><img src="./goTools2.png" alt="gotools"></p><h2 id="启用自动调试"><a href="#启用自动调试" class="headerlink" title="启用自动调试"></a>启用自动调试</h2><blockquote><p>下载<code>GO Autotest</code>插件开启自动调试,不需要配置<code>launch.json</code>文件</p><p><code>GO111MODULE</code>一定要是<code>auto</code></p></blockquote><p><img src="./%E8%B0%83%E8%AF%95.png" alt="调试"></p>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reflect</title>
      <link href="/2021/12/04/reflect/"/>
      <url>/2021/12/04/reflect/</url>
      
        <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><ol><li>Reflect并非一个构造函数,不能通过new运算符对其进行调用,或者将Reflect对象作为一个函数来调用(将原本Object命令式改为函数行为)<ul><li><code>&#39;assign&#39; in Object</code></li><li><code>Reflect.has(Object, &#39;assign&#39;)</code></li></ul></li><li>Reflect的所有属性和方法都是静态的</li><li>Reflect提供了以下静态方法与proxy handler methods(en-US)的命名相同</li><li>其中的一些方法Object相同, 尽管二者之间存在某些细微上的差别.即Reflect对象上可以拿到语言内部的方法</li></ol><h3 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply()"></a>Reflect.apply()</h3><blockquote><p>过指定的参数列表发起对<span style="color:red">目标(target)函数</span>的调用</p></blockquote><ul><li><span style="color:red">注意:如果 target 对象不可调用,抛出 TypeError</span></li><li>调用完带着指定参数和 this 值的给定的函数后返回的结果</li></ul><ol><li><code>target</code>:目标函数</li><li><code>thisArgument</code>:target函数调用时绑定的this对象</li><li><code>argumentsList</code>:target函数调用时传入的实参列表l,该参数应该是一个类数组的对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>test<span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"confabulation"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct()"></a>Reflect.construct()</h3><blockquote><p>类似于new操作符构造函数,相当于运行<code>new target(...args)</code></p></blockquote><ul><li><span style="color:red">如果target不是构造函数,抛出TypeError</span></li><li>以target(如果newTarget存在,则为newTarget)函数为构造函数,argumentList为其初始化参数的对象实例</li></ul><ol><li><code>target</code>:被运行的目标<strong>构造函数</strong></li><li><code>argumentsList</code>:类数组,目标构造函数调用时的参数</li><li><code>newTarget</code>(可选):作为新创建对象的原型对象的constructor属性,参考<code>new.target</code>操作符,默认值为target</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">OtherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'other'</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个对象:</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>OneClass<span class="token punctuation">,</span> args<span class="token punctuation">,</span> OtherClass<span class="token punctuation">)</span><span class="token comment">// 与上述方法等效:</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">OtherClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token function">OneClass</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>当使用<code>Object.create()</code>和<code>Function.prototype.apply()</code>时,如果不使用new操作符调用构造函数,构造函数内部的new.target值会指向undefined</p></li><li><p>当调用<code>Reflect.construct()</code>来创建对象,new.target值会自动指定到target(或者newTarget,前提是newTarget指定了)</p></li></ol><h3 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty()"></a>Reflect.defineProperty()</h3><blockquote><p>基本等同于<code>Object.defineProperty()</code>方法唯一不同是返回Boolean值</p></blockquote><ul><li><span style="color:red">注意:如果target不是 Object,抛出一个 TypeError</span></li><li>Boolean 值指示了属性是否被成功定义</li></ul><ol><li><code>target</code>:目标对象</li><li><code>propertyKey</code>:要定义或修改的属性的名称</li><li><code>attributes</code>:要定义或修改的属性的描述</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"x"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">//&#123;x: 2, y: 7&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty()"></a>Reflect.deleteProperty()</h3><blockquote><p>用于删除属性.类似<code>delete operator</code>但它是一个函数</p></blockquote><ul><li><span style="color:red">如果target不是Object,抛出一个 TypeError</span></li><li>返回<code>Boolean</code>值表明该属性是否被成功删除</li></ul><ol><li><code>target</code>:删除属性的目标对象</li><li><code>propertyKey</code>:需要删除的属性的名称</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>obj <span class="token comment">// &#123; y: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>如果是数组:数组对象和下标</li><li>如果是一个空对象,删除属性,返回<code>true</code></li><li>如果属性不可配置<code>Object.freeze(&#123;foo: 1&#125;)</code>,则返回false</li></ol><h3 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has()"></a>Reflect.has()</h3><blockquote><p><code>Reflect.has(target, propertyKey)</code>作用与in操作符相同</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个boolean类型</li></ul><ol><li><code>target</code>:目标对象</li><li><code>propertyKey</code>:属性名,需要检查目标对象是否存在此属</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果该属性存在于原型链中,返回true</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token comment">// Proxy 对象的 .has() 句柄方法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> k<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"doorbell"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get()"></a>Reflect.get()</h3><blockquote><p>该方法与从对象<code>(target[propertyKey])</code>中读取属性类似,但它是通过一个函数执行来操作的</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回属性的值</li></ul><ol><li><code>target</code>:需要取值的目标对象</li><li><code>propertyKey</code>:需要获取的值的键值</li><li><code>receiver</code>:如果target对象中指定了getter,receiver则为getter调用时的this值</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span>p<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> k<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> k <span class="token operator">+</span> <span class="token string">"bar"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// "foobar"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set()"></a>Reflect.set()</h3><blockquote><p>在一个对象上设置一个属性</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个布尔值表示是否设置成功</li></ul><ol><li><code>target</code>:设置属性的目标对象</li><li><code>propertyKey</code>:设置的属性的名称</li><li><code>value</code>:设置的值</li><li><code>receiver</code>:如果遇到setter,receiver则为setter调用时的this值</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>obj<span class="token punctuation">.</span>prop <span class="token comment">// "value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-getOwnPropertyDescriptor"><a href="#Reflect-getOwnPropertyDescriptor" class="headerlink" title="Reflect.getOwnPropertyDescriptor()"></a>Reflect.getOwnPropertyDescriptor()</h3><blockquote><p>如果属性在对象中存在,则返回给定的属性的属性描述符.否则返回<code>undefined</code></p></blockquote><ul><li><span style="color:red">注意:如果目标不是<code>Object</code>,抛出一个 TypeError</span>而<code>Object.getOwnPropertyDescriptor</code>会将非对象强制转换成对象</li><li>如果在给定的目标对象中,则返回属性.如果存在,则返回 undefined</li></ul><ol><li>target:需要寻找属性的目标对象</li><li>propertyKey:获取自己的属性描述符的属性的名称</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;value: "hello", writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf()"></a>Reflect.getPrototypeOf()</h3><blockquote><p>返回指定对象的原型</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>如果属性存在于给定的目标对象中，则返回属性描述符；否则，返回 undefined</li></ul><ol><li>target:需要寻找属性的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// Object.prototype</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf()"></a>Reflect.setPrototypeOf()</h3><blockquote><p>它可设置对象的原型(即内部的<code>[[Prototype]]</code>属性)为另一个对象或 null,如果操作成功返回true,否则返回 false</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个Boolean值证明已经初步成功设置</li></ul><ol><li><code>target</code>:设置目的的目标对象。</li><li><code>prototype</code>:对象的新原型(一个对象或null)</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible()"></a>Reflect.isExtensible()</h3><blockquote><p>判断一个对象是否可扩展(即是否能够添加新的属性)</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个 Boolean 值表明该对象是否可扩展</li></ul><ol><li><code>target</code>:检查是否可扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> frozen <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>frozen<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h3><blockquote><p>返回一个由目标对象自身的属性键组成的数组</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>由目标对象的自身属性键组成的 Array</li></ul><ol><li><code>target</code>:检查是否可扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// [ "z", "y", "x" ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-preventExtensions"><a href="#Reflect-preventExtensions" class="headerlink" title="Reflect.preventExtensions()"></a>Reflect.preventExtensions()</h3><blockquote><p>阻止新属性添加到对象(例如:防止将来对对象的扩展被添加到对象中)</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个价值保证Boolean目标对象是否成功被设置为不可扩展</li></ul><ol><li><code>target</code>:阻止扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token comment">//true</span>Reflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxy</title>
      <link href="/2021/12/03/proxy/"/>
      <url>/2021/12/03/proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><ul><li>Proxy 对象用于创建一个对象的代理,从而实现基本操作的拦截和自定义(如属性查找,赋值,枚举,函数调用等)</li><li>目标对象既可以直接被操作,也可以通过代理来操作,<span style="color:red">但直接操作会绕过代理实施的行为</span></li><li>proxy在目标对象的外层搭建了一层拦截,<strong>外界对目标对象的某些操作,必须通过这层拦截</strong></li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参数:<ol><li><code>target</code>:要使用Proxy包装的目标对象(可以是任何类型的对象,包括原生数组,函数,甚至另一个代理)</li><li><code>handler</code>:一个通常以函数作为属性的对象,各属性中的函数分别定义了在执行各种操作时代理p的行为</li></ol></li></ul><h3 id="traps-捕获器"><a href="#traps-捕获器" class="headerlink" title="traps(捕获器)"></a>traps(捕获器)</h3><blockquote><p>提供属性访问的方法:每个捕获器都对应一种基本操作,可以直接或者间接在代理对象上使用</p><p>每次代理对象上调用这些基本操作是,代理可以在这些操作传播到目标对象之前<strong>先调用捕获器函数,从而拦截并修改相应的行为</strong></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被读取</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被设置为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name<span class="token comment">//name 被读取</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token comment">//name 被设置为 lisi</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//lisi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>proxy</code>读取属性的值时,实际执行的是<code>handler.get</code>:读取被代理对象的<code>target</code>属性</li><li><code>proxy</code>设置属性值时,实际上执行的是<code>handler.set</code>:读取被代理对象<code>target</code>属性</li><li>目标对象也会改变</li></ol><h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h3><blockquote><p><code>Proxy.revocable()</code>方法可以用来创建一个可撤销的代理对象</p></blockquote><ul><li>返回值:<ol><li>返回一个包含了代理对象本身和它的撤销方法的可撤销<code>Proxy</code>对象</li><li>返回值是一个对象,其结构为<code>&#123;&quot;proxy&quot;:proxy, &quot;revoke&quot;:revoke&#125;</code><ol><li><code>proxy</code>:表示新生成的代理对象本身</li><li><code>revole</code>:撤销方法,调用的时候不需要加任何参数</li></ol></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> revocable <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"[["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> revocable<span class="token punctuation">.</span>proxyproxy<span class="token punctuation">.</span>foo             <span class="token comment">// "[[foo]]"</span>revocable<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// 抛出 TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="handler的代理范围"><a href="#handler的代理范围" class="headerlink" title="handler的代理范围"></a>handler的代理范围</h3><h4 id="handler-has"><a href="#handler-has" class="headerlink" title="handler.has()"></a><strong>handler.has()</strong></h4><ul><li>在判断代理对象是否拥有某个属性时触发该操作</li></ul><blockquote><p>返回一个布尔值</p></blockquote><ul><li><p>拦截:</p><ol><li>属性查询:<code>&quot;foo&quot; in proxy</code></li><li>继承属性查询: <code>foo in Object.create(proxy)</code></li><li><code>Reflect.has()</code></li></ol></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果目标对象为<strong>不可扩展对象</strong></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> handler1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> key <span class="token keyword">in</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> monster1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  _secret<span class="token operator">:</span> <span class="token string">'easily scared'</span><span class="token punctuation">,</span>  eyeCount<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>monster1<span class="token punctuation">,</span> handler1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'eyeCount'</span> <span class="token keyword">in</span> proxy1<span class="token punctuation">)</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_secret'</span> <span class="token keyword">in</span> proxy1<span class="token punctuation">)</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_secret'</span> <span class="token keyword">in</span> monster1<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>prop</code>:需要检查是否存在的属性</li></ol><h4 id="handler-get"><a href="#handler-get" class="headerlink" title="handler.get()"></a><strong>handler.get()</strong></h4><ul><li>在读取代理对象的某个属性时触发该操作</li></ul><blockquote><p>可以返回任意值</p></blockquote><ul><li><p>拦截:</p><ol><li>访问属性:<code>proxy.bar</code></li><li>访问原型链上的属性:<code>Object.create(proxy)[foo]</code></li><li><code>Reflect.get()</code></li></ol></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果要访问的目标属性没有配置访问方法,即get方法是undefined的,则返回值必须为undefined</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>property</code>:被获取的属性名</li><li><code>receiver</code>:Proxy或者继承Proxy的对象</li></ol><h4 id="handler-set"><a href="#handler-set" class="headerlink" title="handler.set()"></a><strong>handler.set()</strong></h4><ul><li>在给代理对象的某个属性赋值时触发该操作</li></ul><blockquote><p>默认返回true</p></blockquote><ul><li><p>拦截</p><ul><li>指定属性值:<code>proxy.foo = bar</code></li><li>指定继承者的属性值:<code>Object.create(proxy)[foo] = bar</code></li><li><code>Reflect.set()</code></li></ul></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果目标属性没有配置存储方法,即set方法是undefined的,则不能设置他的值</li><li>严格模式下,如果 set() 方法返回 false,那么也会抛出一个 TypeError 异常</li></ol></li></ul><ol><li><code>target</code>目标对象</li><li><code>property</code>将被设置的属性名或 Symbol</li><li><code>value</code>新属性值</li><li><code>receiver</code>最初被调用的对象.通常是proxy本身,但handler的set方法也有可能在原型链上,或以其他方式被间接地调用(因此不一定是proxy本身)</li></ol><h4 id="handler-getPrototypeOf"><a href="#handler-getPrototypeOf" class="headerlink" title="handler.getPrototypeOf()"></a><strong>handler.getPrototypeOf()</strong></h4><ul><li>在读取代理对象的原型时触发该操作</li></ul><blockquote><p>返回值必须是一个对象或者null</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getPrototypeOf()</code></li><li><code>Reflect.getPrototypeOf()</code></li><li><code>\_\_proto\_\_</code></li><li><code>Object.prototype.isPrototypeOf()</code></li><li><code>instanceof</code></li></ul></li><li><p>TypeError:</p><ul><li><code>getPrototypeOf()</code>方法返回的不是对象也不是 null</li><li>目标对象是不可扩展的,且<code>getPrototypeOf()</code>方法返回的原型不是目标对象的原型</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target <span class="token operator">===</span> obj<span class="token punctuation">)</span>   <span class="token comment">// true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> handler<span class="token punctuation">)</span> <span class="token comment">// true</span>        <span class="token keyword">return</span> proto    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">===</span> proto<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:被代理的目标对象</li></ol><h4 id="handler-setPrototypeOf"><a href="#handler-setPrototypeOf" class="headerlink" title="handler.setPrototypeOf()"></a><strong>handler.setPrototypeOf()</strong></h4><ul><li>在设置代理对象的原型时触发该操作</li></ul><blockquote><p>成功修改了<code>[[Prototype]]</code>,<code>setPrototypeOf</code>方法返回true,否则返回 false或者抛出异常</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.setPrototypeOf()</code></li><li><code>Reflect.setPrototypeOf()</code></li></ul></li><li><p>TypeError</p><ul><li>如果 target 不可扩展, 原型参数必须与<code>Object.getPrototypeOf(target)</code>的值相同</li></ul></li></ul><ol><li><code>target</code>目标对象</li><li><code>prototype</code>对象新原型或为null</li></ol><h4 id="handler-isExtensible"><a href="#handler-isExtensible" class="headerlink" title="handler.isExtensible()"></a><strong>handler.isExtensible()</strong></h4><ul><li>在判断一个代理对象是否是可扩展时触发该操作</li></ul><blockquote><p>必须返回一个Boolean值或可转换成Boolean的值</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.isExtensible()</code></li><li><code>Reflect.isExtensible()</code></li></ul></li><li><p>TypeError:</p><ul><li>必须返回true或者为true的值,返回false和为false的值都会报错</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">isExtensible</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token comment">//也可以return 1;等表示为true的值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="handler-preventExtensions"><a href="#handler-preventExtensions" class="headerlink" title="handler.preventExtensions()"></a><strong>handler.preventExtensions()</strong></h4><ul><li>在让一个代理对象不可扩展时触发该操作</li></ul><blockquote><p>返回一个布尔值</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.preventExtensions()</code>:将一个对象变为不可扩展,返回一个不可扩展的对象</li><li><code>Reflect.preventExtensions()</code></li></ul></li><li><p>TypeError</p><ul><li>如果目标对象是可扩展的,那么只能返回 false</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called'</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:所要拦截的目标对象</li></ol><h4 id="handler-getOwnPropertyDescriptor"><a href="#handler-getOwnPropertyDescriptor" class="headerlink" title="handler.getOwnPropertyDescriptor()"></a><strong>handler.getOwnPropertyDescriptor()</strong></h4><ul><li>在获取代理对象某个属性的属性描述时触发该操作</li></ul><blockquote><p>必须返回一个对象或undefined</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getOwnPropertyDescriptor()</code></li><li><code>Reflect.getOwnPropertyDescriptor()</code></li></ul></li><li><p>TypeError</p><ol><li>必须返回一个 object 或 undefined,否则TypeError</li><li>如果属性作为目标对象的不可配置的属性存在</li><li>如果<strong>属性不存在</strong>或者<strong>作为目标对象的属性存在</strong>,并且目标对象不可扩展</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// "called: a"</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>目标对象</li><li><code>prop</code>返回属性名称的描述</li></ol><h4 id="handler-defineProperty"><a href="#handler-defineProperty" class="headerlink" title="handler.defineProperty()"></a><strong>handler.defineProperty()</strong></h4><ul><li>在定义代理对象某个属性时的属性描述时触发该操作</li></ul><blockquote><p>必须以一个Boolean返回,表示定义该属性的操作成功与否</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.defineProperty()</code></li><li><code>Reflect.defineProperty()</code></li><li><code>proxy.property=&#39;value&#39;</code></li></ul></li><li><p>TypeError</p><ol><li>目标对象不可扩展</li><li>不能添加或者修改一个属性为不可配置的</li><li>严格模式下, false 作为 handler.defineProperty 方法的返回值的话将会抛出 TypeError 异常</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">defineProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">&#123;</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token comment">// "called: a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>property</code>待检索其描述的属性名。</li><li><code>descriptor</code>定义或修改的属性的可能性</li></ol><h4 id="handler-deleteProperty"><a href="#handler-deleteProperty" class="headerlink" title="handler.deleteProperty()"></a><strong>handler.deleteProperty()</strong></h4><ul><li>在删除代理对象的某个属性时触发该操作</li></ul><blockquote><p>必须返回一个Boolean类型的值,表示该属性是否被成功删除</p></blockquote><ul><li><p>拦截:</p><ul><li>删除属性:<code>delete proxy.foo</code></li><li><code>Reflect.deleteProperty()</code></li></ul></li><li><p>TypeError</p><ul><li>如果目标对象的属性是不可配置的,那么该属性不能被删除</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">deleteProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">delete</span> p<span class="token punctuation">.</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>目标对象</li><li><code>property</code>待删除的属性名</li></ol><h4 id="handler-ownKeys"><a href="#handler-ownKeys" class="headerlink" title="handler.ownKeys()"></a><strong>handler.ownKeys()</strong></h4><ul><li>在获取代理对象的所有属性键时触发该操作</li></ul><blockquote><p>ownKeys 方法必须返回一个可枚举对象</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getOwnPropertyNames()</code></li><li><code>Object.getOwnPropertySymbols()</code></li><li><code>Object.keys()</code></li><li><code>Reflect.ownKeys()</code></li></ul></li><li><p>TypeError</p><ol><li>ownKeys 的结果必须是一个数组</li><li>数组的元素类型要么是一个 String ，要么是一个 Symbol</li><li>结果列表必须包含目标对象的所有不可配置(non-configurable),自有(own)属性的key</li><li>如果目标对象不可扩展,那么结果列表必须包含目标对象的所有自有(own)属性的key,不能有其它值</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">ownKeys</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [ 'a', 'b', 'c' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li></ol><h4 id="handler-apply"><a href="#handler-apply" class="headerlink" title="handler.apply()"></a><strong>handler.apply()</strong></h4><ul><li>在调用一个<span style='color:red'>目标对象为函数</span>的代理对象时触发该操作</li></ul><blockquote><p>可以返回任何值</p></blockquote><ul><li><p>拦截</p><ul><li><code>proxy(...args)</code></li><li><code>Function.prototype.apply()</code> 和 <code>Function.prototype.call()</code></li><li><code>Reflect.apply()</code></li></ul></li><li><p>TypeError</p><ul><li>必须是一个函数</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argumentsList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>thisArg</code>被调用时的上下文对象</li><li><code>argumentsList</code>被调用时的参数数组</li></ol><h4 id="handler-construct"><a href="#handler-construct" class="headerlink" title="handler.construct()"></a><strong>handler.construct()</strong></h4><ul><li>在给一个目标对象为<span style='color:red'>构造函数</span>的代理对象构造实例时触发该操作,<span style='color:red'>用于初始化代理的目标对象自身必须具有[[构造]]内部方法</span></li></ul><blockquote><p>construct 方法必须返回一个对象</p></blockquote><ul><li>拦截以下操作<ul><li><strong>new proxy(…args)</strong></li><li><strong>Reflect.construct()</strong></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argumentsList<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>argumentsList</code>:constructor的参数列表</li><li><code>newTarget</code>:最初被调用的构造函数,就上面的例子而言是p</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cheerio</title>
      <link href="/2021/11/30/cheerio/"/>
      <url>/2021/11/30/cheerio/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Cheerio包括了JQuery核心的子集.Cheerio从jQuery库中去除了所有DOM不一致性和浏览器尴尬的部分,揭示了它真正优雅的API.</p><p>Cheerio几乎能够解析任何的HTML和XMLdocument</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> load <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cheerio"</span><span class="token punctuation">)</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul id="fruits">              &lt;li class="pear">pear111&lt;/li>              &lt;li id="apple">apple111                &lt;div class="redapple">redapple111&lt;div>              &lt;/li>            &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p><code>$(selector,[context],[root])</code></p></blockquote><ol><li><code>selector</code>会在<code>Context</code>范围内搜索,<code>Context</code>会在<code>Root</code>的范围内搜索</li><li><code>context</code>,<code>root</code>:<strong>字符串表达式</strong>,<strong>DOM元素</strong>,<strong>DOM元素的数组</strong>或者<strong>cheerio对象</strong></li><li>返回一个<code>cheerio</code>节点对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul .pear'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>text(textString)</code>:获得元素的text内容，包括子元素.</p><p>如果指定了<code>textString</code>会替换所有内容(包括dom节点)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.redapple'</span><span class="token punctuation">,</span> <span class="token string">'#fruits'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//app</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>html(htmlString)</code>:获得元素的HTML字符串</p><p>如果<code>htmlString</code>有内容的话,将会<span style="color:red">替代原来的HTML</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;li class="mango">Mango&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//'&lt;li class="mango">Mango&lt;/li>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>$.root()</code>:拿到最上层的根节点(root)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"fruits"</span><span class="token operator">></span>shuiguo      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pear"</span><span class="token operator">></span>pear111<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"apple"</span><span class="token operator">></span>apple111        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redapple"</span><span class="token operator">></span>app<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>attr(name,value)</code>:获得或者修改属性</p></blockquote><ol><li>在匹配的元素中只能获得第一元素的属性.</li><li>如果设置一个属性的值为null,则移除这个属性</li><li>可以传递<code>键值</code>或者<code>函数</code></li><li>不指定值则返回一个对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//查找属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul .pear'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//pear</span><span class="token comment">//增加一个属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'attr'</span><span class="token punctuation">,</span> <span class="token string">"laji"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#123; id: 'fruits', attr: 'laji' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>puppeteer</title>
      <link href="/2021/11/30/puppeteer/"/>
      <url>/2021/11/30/puppeteer/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取页面或者接口数据"><a href="#爬取页面或者接口数据" class="headerlink" title="爬取页面或者接口数据"></a>爬取页面或者接口数据</h2><blockquote><p>页面得是ssr(服务器渲染)<code>post</code>,<code>get</code>等请求都可以</p><p>使用<code>axios</code>库</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs/promises"</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://music.163.com/#/song?id=30431367"</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./bilibili.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Puppeteer简介"><a href="#Puppeteer简介" class="headerlink" title="Puppeteer简介"></a>Puppeteer简介</h2><blockquote><p><code>Puppeteer</code>是一个<code>Node</code>库,它提供了一个高级API来通过DevTools协议控制<code>Chrome</code>或<code>Chromium</code>.<code>Puppeteer</code>默认无头运行,但可以配置为运行完整(非无头)<code>Chrome</code>或<code>Chromium</code>.</p></blockquote><h3 id="使用特点"><a href="#使用特点" class="headerlink" title="使用特点"></a>使用特点</h3><ol><li>生成页面的屏幕截图和PDF</li><li>抓取SPA(单页应用程序)并生成预渲染内容(即<code>SSR</code>(服务器端渲染))</li><li>自动化表单提交,UI测试,键盘输入等</li><li>创建最新的自动化测试环境使用最新的JavaScript和浏览器功能,直接在最新版本的Chrome中运行您的测试</li><li>捕获站点的时间线跟踪以帮助诊断性能问题</li><li>测试Chrome扩展</li></ol><h3 id="puppeteer-core"><a href="#puppeteer-core" class="headerlink" title="puppeteer-core"></a>puppeteer-core</h3><ul><li>当您安装<code>Puppeteer</code>时,它会下载保证与API一起使用的最新版本的 <code>Chromium</code></li><li><code>puppeteer-core</code>包,一个默认不下载任何浏览器的<code>Puppeteer</code>版本</li></ul><blockquote><p>使用<code>puppeteer-core</code>需要传<code>google</code>所在的浏览器的绝对地址,属性<code>executablePath</code></p></blockquote><ul><li>使用<strong>绝对地址</strong>或者使用插件库<code>carlo</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"puppeteer-core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> findChrome <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./node_modules/carlo/lib/find_chrome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> findChromePath <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findChrome</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> executablePath <span class="token operator">=</span> <span class="token keyword">await</span> findChromePath<span class="token punctuation">.</span>executablePath  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",</span>    executablePath<span class="token punctuation">,</span>    headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    defaultViewport<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--start-fullscreen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    ignoreHTTPSErrors<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"https://www.bilibili.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"./bilibili.png"</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">"png"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="puppeteer概述"><a href="#puppeteer概述" class="headerlink" title="puppeteer概述"></a>puppeteer概述</h3><blockquote><p><code>Puppeteer</code>API是分层的,并反映了浏览器结构</p></blockquote><p><img src="./puppeteer%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.png" alt="puppeteer分层结构"></p><ol><li><code>Puppeteer</code>:使用DevTools协议与浏览器通信.</li><li><code>Browser</code>实例可以拥有多个浏览器上下文.</li><li><code>BrowserContext</code>实例定义了一个浏览会话并且可以拥有多个页面.</li><li><code>Page</code>至少有一个框架主框架.可能还有其他框架由iframe或框架标签创建.</li><li><code>Frame</code>至少有一个执行上下文——默认执行上下文——框架的JavaScript在这里执行.Frame可能具有与扩展相关联的附加执行上下文.</li><li><code>Worker</code>有一个单一的执行上下文并促进与WebWorkers的交互.</li></ol><blockquote><p>参考:<a href="https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteer-vs-puppeteer-core">https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteer-vs-puppeteer-core</a></p></blockquote><h2 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h2><h3 id="使用connect连接"><a href="#使用connect连接" class="headerlink" title="使用connect连接"></a>使用connect连接</h3><blockquote><p>启动带有所有插件和账号的chrome</p></blockquote><ol><li>首先打开chrome的快捷方式,在目标后输入<code>--remote-debugging-port=9222</code>.大概是下面这样</li></ol><blockquote><p><code>&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; --remote-debugging-port=9222</code></p><p>切记exe后面一定要有空格,这种方式也有缺点,可能会有连接不上的时候</p><p>他的url在:<code>http://localhost:9222/json/version</code>,可能打开浏览器两三次才会有连接</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer-core'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9222/json/version"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> webSocketDebuggerUrl <span class="token punctuation">&#125;</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    browserWSEndpoint<span class="token operator">:</span> webSocketDebuggerUrl<span class="token punctuation">,</span>    defaultViewport<span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">...</span>  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的工具函数</title>
      <link href="/2021/11/26/vue-zhong-de-gong-ju-han-shu/"/>
      <url>/2021/11/26/vue-zhong-de-gong-ju-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中的工具函数"><a href="#vue中的工具函数" class="headerlink" title="vue中的工具函数"></a>vue中的工具函数</h2><h3 id="EMPTY-OBJ"><a href="#EMPTY-OBJ" class="headerlink" title="EMPTY_OBJ"></a>EMPTY_OBJ</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const EMPTY_OBJ: &#123; readonly [key: string]: any &#125; &#x3D; __DEV__  ? Object.freeze(&#123;&#125;)  : &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>Object.freeze(&#123;&#125;)</code>冻结最外面的对象,不能修改,<strong>被包裹的对象可以被修改</strong></li><li><code>EMPTY_OBJ</code>对象如果在开发环境会返回一个不可修改的空对象,如果修改就会报错</li></ul><h3 id="EMPTY-ARR"><a href="#EMPTY-ARR" class="headerlink" title="EMPTY_ARR"></a>EMPTY_ARR</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const EMPTY_ARR &#x3D; __DEV__ ? Object.freeze([]) : []<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>同上(有一个问题就是,使用<code>push</code>等方法时不能修改,所以<code>[]</code>用的还是多一点)</p></blockquote><h3 id="NOOP"><a href="#NOOP" class="headerlink" title="NOOP"></a>NOOP</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const NOOP &#x3D; () &#x3D;&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>方便压缩代码</li><li>可以方便判断(<code>component.ts</code>例子)</li></ol><h3 id="NO"><a href="#NO" class="headerlink" title="NO"></a>NO</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const NO &#x3D; () &#x3D;&gt; false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>永远返回一个<code>false</code>,方便压缩代码</p></blockquote><h3 id="isOn"><a href="#isOn" class="headerlink" title="isOn"></a>isOn</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const onRE &#x3D; &#x2F;^on[^a-z]&#x2F;export const isOn &#x3D; (key: string) &#x3D;&gt; onRE.test(key)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>onRE</code>:匹配一个开头是<code>on</code>第三个位置不是小写字母的字符</li><li><code>isOn</code>检查是否匹配</li></ol><ul><li>例如:<code>onClick</code>匹配,<code>onclick</code>不匹配</li></ul><h3 id="isModelListener"><a href="#isModelListener" class="headerlink" title="isModelListener"></a>isModelListener</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isModelListener &#x3D; (key: string) &#x3D;&gt; key.startsWith(&#39;onUpdate:&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>startsWith</strong>:匹配开头字符串是否与传入的字符串相同,第二个传一个从哪里开始的索引.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">startsWith(searchString: string, position?: number): boolean;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用于检查是不是以**onUpdate:**开头</p></blockquote><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const extend &#x3D; Object.assign<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用于合并对象,可以参考一下我之前写的<a href="http://mail.zyjcould.ltd/2021/10/20/js-de-kao-bei-fang-shi/">http://mail.zyjcould.ltd/2021/10/20/js-de-kao-bei-fang-shi/</a></p></blockquote><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const remove &#x3D; &lt;T&gt;(arr: T[], el: T) &#x3D;&gt; &#123;  const i &#x3D; arr.indexOf(el)  if (i &gt; -1) &#123;    arr.splice(i, 1)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除指定的元素</p></blockquote><ul><li><strong>indexOf</strong>:只会返回第一个匹配到的元素索引</li><li><strong>splice</strong>:第一个参数为删除元素下标,第二个为删除个数</li></ul><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const hasOwnProperty &#x3D; Object.prototype.hasOwnPropertyexport const hasOwn &#x3D; (  val: object,  key: string | symbol): key is keyof typeof val &#x3D;&gt; hasOwnProperty.call(val, key)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>hasOwnProperty用来检测一个对象是否有特定的自身属性</p><blockquote><p>hasOwn是类型守卫函数,类型守卫函数是指在函数返回值类型中使用类型谓词的函数<br>该函数返回一个布尔类型</p></blockquote></blockquote><ol><li>is是类型谓词相当于<strong>boolean</strong>类型,表示一种类型判定,例如<code>x is T</code>即判定x类型是否为T(此时就能明白只有x类型是T的时候才返回true)</li><li>使用<code>keyof typeof val</code>,拿到所有对象的键的联合类型</li><li>使用<code>call</code>显示绑定第一个参数</li></ol><h3 id="对象转字符串"><a href="#对象转字符串" class="headerlink" title="对象转字符串"></a>对象转字符串</h3><blockquote><p>使用<code>toTypeString</code>,返回一个<code>[object object]</code>第二个<code>object</code>是动态的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const objectToString &#x3D; Object.prototype.toStringexport const toTypeString &#x3D; (value: unknown): string &#x3D;&gt;  objectToString.call(value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>截取字符,例如<code>[object RawType]</code>,会截取到<code>RawType</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toRawType &#x3D; (value: unknown): string &#x3D;&gt; &#123;  &#x2F;&#x2F; extract &quot;RawType&quot; from strings like &quot;[object RawType]&quot;  return toTypeString(value).slice(8, -1)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h3><blockquote><p><strong>isArray</strong>使用数组自带的判断函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isArray &#x3D; Array.isArray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>isMap</strong>,<strong>isSet</strong>重写了<code>toString</code>方法</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isMap &#x3D; (val: unknown): val is Map&lt;any, any&gt; &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Map]&#39;export const isSet &#x3D; (val: unknown): val is Set&lt;any&gt; &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Set]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isDate</strong>,<strong>isFunction</strong>对象类型使用<code>instanceof</code>,function也可以使用<code>val instanceof Function</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isDate &#x3D; (val: unknown): val is Date &#x3D;&gt; val instanceof Dateexport const isFunction &#x3D; (val: unknown): val is Function &#x3D;&gt;  typeof val &#x3D;&#x3D;&#x3D; &#39;function&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isString</strong>,<strong>isSymbol</strong>基本数据类型使用<code>typeof</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isString &#x3D; (val: unknown): val is string &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &#39;string&#39;export const isSymbol &#x3D; (val: unknown): val is symbol &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &#39;symbol&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isObject</strong>对象类型,排除<code>null</code>,null也是object类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isObject &#x3D; (val: unknown): val is Record&lt;any, any&gt; &#x3D;&gt;  val !&#x3D;&#x3D; null &amp;&amp; typeof val &#x3D;&#x3D;&#x3D; &#39;object&#39;&#x2F;&#x2F;用一组 T 类型的属性 K 构造一个类型type Record&lt;K extends keyof any, T&gt; &#x3D; &#123;  [P in K]: T;&#125;;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isPromise</strong>判断是不是一个promise类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isPromise &#x3D; &lt;T &#x3D; any&gt;(val: unknown): val is Promise&lt;T&gt; &#x3D;&gt; &#123;  return isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isPlainObject</strong>判断是不是一个纯碎的对象</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isPlainObject &#x3D; (val: unknown): val is object &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>因为<code>isObject([])</code>返回的也是true,但是<code>isPlainObject([])</code>是false</li><li>只有参数为对象<code>&#123;&#125;</code>时才会返回<code>true</code></li></ul><blockquote><p><strong>isIntegerKey</strong>:判断是不是数字型的字符串key值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isIntegerKey &#x3D; (key: unknown) &#x3D;&gt;  isString(key) &amp;&amp;  key !&#x3D;&#x3D; &#39;NaN&#39; &amp;&amp;  key[0] !&#x3D;&#x3D; &#39;-&#39; &amp;&amp;  &#39;&#39; + parseInt(key, 10) &#x3D;&#x3D;&#x3D; key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>必须是字符串,不能是<code>NaN</code>第一个字符不能是<code>-</code>,<code>parseInt(key, 10)</code>返回该值的十进制数</li></ul><h3 id="makeMap-amp-amp-isReservedProp"><a href="#makeMap-amp-amp-isReservedProp" class="headerlink" title="makeMap&amp;&amp;isReservedProp"></a>makeMap&amp;&amp;isReservedProp</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export function makeMap(  str: string,  expectsLowerCase?: boolean): (key: string) &#x3D;&gt; boolean &#123;  &#x2F;&#x2F;创建一个没有值的空对象  const map: Record&lt;string, boolean&gt; &#x3D; Object.create(null)  const list: Array&lt;string&gt; &#x3D; str.split(&#39;,&#39;)  for (let i &#x3D; 0; i &lt; list.length; i++) &#123;    map[list[i]] &#x3D; true  &#125;  return expectsLowerCase ? val &#x3D;&gt; !!map[val.toLowerCase()] : val &#x3D;&gt; !!map[val]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>makeMap</code>将一组值保存在map对象中,根据<code>expectsLowerCase</code>返回一个函数</p></blockquote><ul><li>具体实现</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isReservedProp &#x3D; &#x2F;*#__PURE__*&#x2F; makeMap(  &#x2F;&#x2F; the leading comma is intentional so empty string &quot;&quot; is also included  &#39;,key,ref,&#39; +    &#39;onVnodeBeforeMount,onVnodeMounted,&#39; +    &#39;onVnodeBeforeUpdate,onVnodeUpdated,&#39; +    &#39;onVnodeBeforeUnmount,onVnodeUnmounted&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cacheStringFunction"><a href="#cacheStringFunction" class="headerlink" title="cacheStringFunction"></a>cacheStringFunction</h3><blockquote><p>将字符串计算结果保存在闭包中的函数,为了避免相同值的重复计算</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const cacheStringFunction &#x3D; &lt;T extends (str: string) &#x3D;&gt; string&gt;(fn: T): T &#x3D;&gt; &#123;  const cache: Record&lt;string, string&gt; &#x3D; Object.create(null)  return ((str: string) &#x3D;&gt; &#123;    const hit &#x3D; cache[str]    return hit || (cache[str] &#x3D; fn(str))  &#125;) as any&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>cacheStringFunction</code>的示例(可以使用debugger打断点)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let count &#x3D; 0const reverse &#x3D; (str: string) &#x3D;&gt; &#123;  console.log(++count) &#x2F;&#x2F; reverse 只计算一次  return str.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;const stringReverse &#x3D; cacheStringFunction(reverse)stringReverse(&#39;abc&#39;)stringReverse(&#39;abc&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一次调用<code>fn(str)</code>时会将键值保存到<code>cache[str]</code>中,由于是一个闭包,执行之后内存并不会自己释放,如果下次处理相同的<strong>字符串</strong>,会直接调用缓存,而不是<strong>fn(str)</strong></li></ul><blockquote><p>参考:<a href="https://zhuanlan.zhihu.com/p/422499151">https://zhuanlan.zhihu.com/p/422499151</a></p></blockquote><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><ul><li>如果理解了<strong>cacheStringFunction</strong>就会很容易理解</li></ul><blockquote><p><strong>camelize</strong>连字符命名转换成驼峰命名</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const camelizeRE &#x3D; &#x2F;-(\w)&#x2F;gexport const camelize &#x3D; cacheStringFunction((str: string): string &#x3D;&gt; &#123;  return str.replace(camelizeRE, (_, c) &#x3D;&gt; (c ? c.toUpperCase() : &#39;&#39;))&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>()</code>分组捕获,<code>-</code>对应的捕获就是<code>_</code>,<code>(\w)</code>对应的捕获就是<code>c</code></li></ul><blockquote><p><strong>hyphenate</strong>驼峰命名转换成连字符命名</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const hyphenateRE &#x3D; &#x2F;\B([A-Z])&#x2F;gexport const hyphenate &#x3D; cacheStringFunction((str: string) &#x3D;&gt;  str.replace(hyphenateRE, &#39;-$1&#39;).toLowerCase())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>\B</code>是非单词边界,不匹配开头</li></ul><blockquote><p><strong>capitalize</strong>:首字母转大写</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const capitalize &#x3D; cacheStringFunction(  (str: string) &#x3D;&gt; str.charAt(0).toUpperCase() + str.slice(1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>toHandlerKey</strong>,小写字母转驼峰</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toHandlerKey &#x3D; cacheStringFunction((str: string) &#x3D;&gt;  str ? &#96;on$&#123;capitalize(str)&#125;&#96; : &#96;&#96;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hasChanged"><a href="#hasChanged" class="headerlink" title="hasChanged"></a>hasChanged</h3><blockquote><p>检验两个值是否发生变化</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const hasChanged &#x3D; (value: any, oldValue: any): boolean &#x3D;&gt;  !Object.is(value, oldValue)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>和<code>===</code>的区别,除了以下,别的都一样</li></ul><table><thead><tr><th>比较值</th><th>&#x3D;&#x3D;&#x3D;</th><th>Object.is</th></tr></thead><tbody><tr><td>+0,-0</td><td>true</td><td>false</td></tr><tr><td>NaN,NaN</td><td>false</td><td>true</td></tr></tbody></table><h3 id="invokeArrayFns"><a href="#invokeArrayFns" class="headerlink" title="invokeArrayFns"></a>invokeArrayFns</h3><blockquote><p>依次调用数组中的函数,方便统一执行</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const invokeArrayFns &#x3D; (fns: Function[], arg?: any) &#x3D;&gt; &#123;  for (let i &#x3D; 0; i &lt; fns.length; i++) &#123;    fns[i](arg)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="def"><a href="#def" class="headerlink" title="def"></a>def</h3><blockquote><p>定义对象属性</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const def &#x3D; (obj: object, key: string | symbol, value: any) &#x3D;&gt; &#123;  Object.defineProperty(obj, key, &#123;    configurable: true,    enumerable: false,    value  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性描述符</li></ul><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>当试图获取属性时所返回的值</td><td>undefined</td></tr><tr><td>writable</td><td>该属性是否可写</td><td>false</td></tr><tr><td>enumerable</td><td>该属性在for in循环中是否会被枚举</td><td>false</td></tr><tr><td>configurable</td><td>该属性是否可被删除</td><td>false</td></tr><tr><td>set()</td><td>属性的更新操作所调用的函数</td><td>false</td></tr><tr><td>get()</td><td>获取属性值时所调用的函数</td><td>false</td></tr></tbody></table><ol><li>数据描述符:enumerable,configurable,value,writable</li><li>存取描述符:enumerable,configurable,set(),get()</li><li>如果定义了set(),get()之后,再定义value,writable会<span style="color:red">报错</span></li></ol><h3 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h3><blockquote><p>将字符串型数字转换成<code>number</code>类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toNumber &#x3D; (val: any): any &#x3D;&gt; &#123;  const n &#x3D; parseFloat(val)  return isNaN(n) ? val : n&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getGlobalThis"><a href="#getGlobalThis" class="headerlink" title="getGlobalThis"></a>getGlobalThis</h3><blockquote><p>获取全局<code>this</code>指向</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let _globalThis: anyexport const getGlobalThis &#x3D; (): any &#x3D;&gt; &#123;  return (    _globalThis ||    (_globalThis &#x3D;      typeof globalThis !&#x3D;&#x3D; &#39;undefined&#39;        ? globalThis        : typeof self !&#x3D;&#x3D; &#39;undefined&#39;        ? self        : typeof window !&#x3D;&#x3D; &#39;undefined&#39;        ? window        : typeof global !&#x3D;&#x3D; &#39;undefined&#39;        ? global        : &#123;&#125;)  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>第一次一定是<code>undefined</code></li><li>如果存在<code>gloablThis</code>,<code>self</code>,<code>window</code>,<code>global</code>中任意一个,就返回对应的this指向,没有则返回空对象(微信小程序)</li><li>第二次不需要再使用this判断</li></ol><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><ol><li>参考:以上都是参考若川大佬以及自己的理解:<a href="https://juejin.cn/post/6994976281053888519#heading-7">https://juejin.cn/post/6994976281053888519#heading-7</a></li><li>关于开发环境和生产环境的区别</li><li>关于使用闭包达到缓存的目的让我觉得很神奇.(我太菜了)</li><li>关于ts中is谓词的使用,我的理解是布尔类型的加强</li></ol>]]></content>
      
      
      <categories>
          
          <category> sourceCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> sourceCode </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts类型和泛型的思考</title>
      <link href="/2021/11/25/ts-lei-xing-he-fan-xing-de-si-kao/"/>
      <url>/2021/11/25/ts-lei-xing-he-fan-xing-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="联合类型-和交叉类型-amp"><a href="#联合类型-和交叉类型-amp" class="headerlink" title="联合类型(|)和交叉类型(&amp;)"></a>联合类型(|)和交叉类型(&amp;)</h2><blockquote><p>在基本数据类型中和对象中用<code>或和且</code>表示出的集合类型不同</p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>我的理解:</p></blockquote><ul><li>在基本数据类型中,联合类型(|)表示<span style="color:red">或</span></li><li>交叉类型(&amp;)表示<span style="color:red">且</span>(<strong>其实就是never</strong>)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type unionType &#x3D; number | string &#x2F;&#x2F;可以是number或者string类型的值type crossType &#x3D; number &amp; string &#x2F;&#x2F;不能赋任何值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><blockquote><p>对象是相对于属性来思考的</p><blockquote><p>交叉类型(&amp;)是是各个对象属性的<strong>且</strong><br>联合类型(|)是各个对象属性的<strong>或</strong></p></blockquote></blockquote><ul><li>首先定义两个接口:</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface A &#123;  x: number;  y: number;&#125;interface B &#123;  y: number;  z: number;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交叉类型(&amp;):是A且B产生的新类型<code>crosstype</code>,实现了A,B中的所有属性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type crossType &#x3D; A &amp; B&#x2F;&#x2F;交叉类型必须实现所有属性const obj:crossType&#x3D;&#123;  x: 1,  y: 2,  z: 3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>联合类型(|):<ul><li>可以理解为定义的类型是A类型或者B类型</li><li>联合类型可以是两个对象属性的交集(要实现所有属性,且只能访问公共属性)<ul><li>这种实现交集的方式我觉得没有意义</li></ul></li><li>也可以是单独一个对象(子集)</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type unionType &#x3D; A | Bconst obj1: Union &#x3D; &#123;  x: 1,  y: 2,  z: 3,&#125;&#x2F;&#x2F;交集:只能访问y.访问其它属性报错obj1.yconst obj2: Union &#x3D; &#123;  x: 1,  y: 2,&#125;&#x2F;&#x2F;可以访问所有属性obj2.xobj2.yconst obj3: Union &#x3D; &#123;  y: 2,  z: 3,&#125;&#x2F;&#x2F;同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h3><blockquote><p>在ts中,相同类型结构的可以称为父子类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;父类型interface Father &#123;  name: string&#125;&#x2F;&#x2F;子类型interface Son &#123;  name: string  age: number&#125;type isEqual &#x3D; Son extends Father ? true : false &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在ts类型系统中,只要类型结构相似,就可以称为父子类型<ul><li>对于子类型相对于父类型考虑:子类型会更加具体,父类型是更加松散的</li><li>例如联合类型产生的新类型,他的类型可能会变多,它产生的类型就是父类型</li><li>例如交叉类型产生的新类型,他的类型会更加具体,它产生的类型就是子类型</li></ul></li><li>在使用<code>&amp;</code>产生的新类型(交叉类型),会让新类型更具体</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Fn &#x3D; ((name: string) &#x3D;&gt; string) &amp; ((name: number) &#x3D;&gt; number)type s&lt;T&gt; &#x3D; Fn extends T ? T : nevertype x &#x3D; s&lt;(name: string) &#x3D;&gt; string&gt;&#x2F;&#x2F;(name: string) &#x3D;&gt; string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在使用<code>|</code>产生的新类型(联合类型),会让新类型更松散</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Father &#123;  name: string  x: number&#125;interface Son &#123;  name: string  age: number&#125;type FatherOrSon &#x3D; Father extends Father | Son ? true : false&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分布式条件类型"><a href="#分布式条件类型" class="headerlink" title="分布式条件类型"></a>分布式条件类型</h3><blockquote><p>当类型参数为联合类型,并且在条件类型左边直接引用该类型参数的时候,TypeScript 会把每一个元素单独传入来做类型运算,最后再合并成联合类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Union &#x3D; &#39;a&#39; | &#39;b&#39; | &#39;c&#39;;type UppercaseA&lt;Item extends string&gt; &#x3D;     Item extends &#39;a&#39; ?  Uppercase&lt;Item&gt; : Item;type res &#x3D; UppercaseA&lt;Union&gt;&#x2F;&#x2F; &#39;b&#39; | &#39;c&#39; | &#39;A&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h2><blockquote><p><code>A extends B</code>可以理解为A是B的子集(一直都对)</p></blockquote><h3 id="作为约束泛型使用"><a href="#作为约束泛型使用" class="headerlink" title="作为约束泛型使用"></a>作为约束泛型使用</h3><blockquote><p>首先理解一点:<strong>是属性之间的比较</strong>.前者是后者的子集</p><blockquote><p>泛型T中的<code>length</code>的值必须是<code>string</code>的一个子集,<code>string</code>是所有字符串的集合</p></blockquote></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface point &#123;  length: string;&#125;function a&lt;T extends point&gt;(args: T) &#123;  console.log(args.length);&#125;&#x2F;&#x2F;可以使用多个不同的属性(相对于属性)&#x2F;&#x2F;但是必须实现所有约束的属性a(&#123;length:&quot;abc&quot;,joint:8&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>point</code>是一个对象,使用<code>extends</code>就是约束泛型的类型</li></ul><h3 id="extends-用作条件泛型"><a href="#extends-用作条件泛型" class="headerlink" title="extends 用作条件泛型"></a>extends 用作条件泛型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Point &#123;  x: number  y: number&#125;type IsPointSubset&lt;T&gt; &#x3D; T extends Point ? Point : nevertype Result1 &#x3D; IsPointSubset&lt;&#123; x: 1; y: 2 &#125;&gt; &#x2F;&#x2F;Pointtype Result2 &#x3D; IsPointSubset&lt;&#123; x: 1; z: 2 &#125;&gt; &#x2F;&#x2F;never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>像三元运算符一样,有这样的属性就返回前一个,没有返回后一个</p></blockquote><ul><li>参考:<a href="https://juejin.cn/post/6997266181082054664">https://juejin.cn/post/6997266181082054664</a></li></ul><h2 id="泛型中的工具类"><a href="#泛型中的工具类" class="headerlink" title="泛型中的工具类"></a>泛型中的工具类</h2><blockquote><p>是 TypeScript 内置的工具类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson&#123;  name:string,  age:number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于<strong>keyof</strong>:对象里面的键值对里的键<strong>key</strong>给罗列取出来,并把它们联合起来形成一种联合类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type personkeys&#x3D;keyof IPerson&#x2F;&#x2F;&quot;name&quot; | &quot;age&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><blockquote><p><code>Partial</code><strong>通过泛型让目标类型中的所有属性变为可选</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IWhitePeople&#123;  face: &quot;white&quot;|&quot;black&quot;|&quot;yellow&quot;&#125;type People &#x3D; Partial&lt;IWhitePeople&gt;&amp;IPersonconst people:People&#x3D;&#123;  name:&quot;zhagnsan&quot;,  age:12&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Partial</code>的具体实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Partial&lt;T&gt; &#x3D; &#123;    [P in keyof T]?: T[P];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>使用<code>keyof</code>拿到<code>T</code>所有的键组成联合类型</li><li>使用in遍历所有的联合类型拿到键<code>P</code>,赋一个可选符</li></ol><blockquote><p>衍生:也可以将可选类型转换为必选类型<strong>Required</strong>,只读类型也是如此</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Required&lt;T&gt; &#x3D; &#123;    [P in keyof T]-?: T[P];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>映射修饰符,<code>-</code>删除,+添加,如果没有前缀,相当于使用了<code>+</code></p></blockquote><ul><li>关于这种映射类型,一个是<code>readonly</code>,一个是<code>?</code>,就可以使用<code>-</code>又或者<code>+</code>来删除或者添加银蛇类型</li></ul><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h3><blockquote><p><code>Pick</code><strong>通过泛型选择指定属性形成新的类型</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type whitPeople &#x3D; IPerson&amp;Pick&lt;IWhitePeople,&quot;face&quot;&gt;const wPeople:whitPeople&#x3D;&#123;  name:&quot;jack&quot;,  age:19,  face:&quot;white&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Pick的具体实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123;    [P in K]: T[P]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>keyof T</code>:将T所有的键值联合成一个新的类型,用于检查K是否是T的键</li><li><code>K</code>是对<code>T</code>的一个约束:用<code>in</code>遍历<code>K</code>,遍历的结果P就是要保留的键,形成新的字面量</li></ol><h3 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h3><blockquote><p><code>Omit</code>:<strong>通过泛型删除指定属性</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type chinese&#x3D; Omit&lt;IWhitePeople,&quot;face&quot;&gt;&amp;IPersonconst person1:chinese&#x3D;&#123;  name:&quot;zhangsan&quot;,  age:18,  language:&quot;Chinese&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Omit的具体实现</p></blockquote><ul><li>首先理解<code>Exclude</code>:如果<code>U</code>是<code>T</code>的一个约束,则返回<code>never</code>,否则返回本身</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Omit&lt;T, K extends keyof any&gt; &#x3D; Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>Exclude&lt;keyof T, K&gt;</code>只有本身为<code>K</code>才会返回never,其它元素都返回本身</li><li><code>Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>使用<code>Pick</code>将所有的键值联合成一个新的字面量</li></ol><h3 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h3><blockquote><p>构造一个由 function 的返回类型组成的类型Type</p></blockquote><ul><li>可以对解释函数进行返回值的推导<ul><li>test获取的类型是<code>&lt;T&gt;(...args: T[]) =&gt; Function</code></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type test &#x3D; ReturnType&lt;() &#x3D;&gt; &lt;T&gt;(...args: T[]) &#x3D;&gt; Function&gt;let useTest:test &#x3D; function &lt;T&gt;(...args: T[]) &#123;  return ()&#x3D;&gt;&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>亦可以使用<code>typeof</code>获得一个函数的返回值类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function test&lt;T&gt;(a: T, b: T, c: T) &#123;  return &quot;&quot; + a + b + c&#125;type getType &#x3D; ReturnType&lt;typeof test&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="typeof和infer"><a href="#typeof和infer" class="headerlink" title="typeof和infer"></a>typeof和infer</h2><blockquote><p>ts中的<code>typeof</code>和js中的<code>typeof</code>是有区别的</p></blockquote><ol><li>写运行代码的地方:<strong>返回出一个变量的类型字符串</strong></li><li>类型的判断:<strong>返回的是TS里的类型</strong></li></ol><blockquote><p>例如,我们可以这样写一个类型判断</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const people: People &#x3D; &#123;  name: &quot;zhagnsan&quot;,  age: 12,&#125;;type tpeople &#x3D; Pick&lt;typeof people,&quot;age&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>infer</strong>:推导作用的关键字,指待推导泛型</p></blockquote><ul><li>把<code>V</code>给标记了,等下你们给我推出这个<code>V</code>的类型然后让我用</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson &#123;  name: string;  age: number;&#125;type person&lt;T&gt;&#x3D; T extends infer v ? v : neverconst Person:person&lt;IPerson&gt;&#x3D;&#123;  name:&quot;string&quot;,  age:12&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里看<code>T</code>和待推导泛型<code>v</code>是否是类型符合,如果符合,就返回v,否则<code>never</code></li><li>简单来说就是,泛型T和待推导v元素是不是都是相同的类型写法</li><li>这里将T和v进行对比,T符合v的位置,返回待推导v即T</li><li>再举一个例子:<code>&lt;T[]&gt;</code>和<code>(infer v)[]</code>类型也是符合</li></ul><blockquote><p>参考:<a href="https://zhuanlan.zhihu.com/p/361968852">https://zhuanlan.zhihu.com/p/361968852</a></p></blockquote><h2 id="类型递归"><a href="#类型递归" class="headerlink" title="类型递归"></a>类型递归</h2><blockquote><p>像大多数编程语言中一样,类型也是可以递归的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type FillArray&lt;  Item,  N extends number,  Arr extends Item[] &#x3D; []&gt; &#x3D; Arr[&quot;length&quot;] extends N ? Arr : FillArray&lt;Item, N, [...Arr, Item]&gt;type Foos &#x3D; FillArray&lt;number, 3&gt;&#x2F;&#x2F;[number,number,number]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对于特定number类型的约束,例如,<code>N extends 3</code>,N必须是3才能成功的约束(true)</li><li><code>[number] extends number[]</code>这样返回的是true,<span style="color:red">数组的约束,只要实现数组类型的约束,和长度无关</span><ul><li><code>Arr extends Item[] = []</code>,Arr这个数组受到Item[]的约束.每次只能返回特定的(这里是Item类型的)元组</li></ul></li><li>递归边界:<code>Arr[&quot;length&quot;] extends N</code>,只有数组的长度达到N,才可以结束</li></ol>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园网通信</title>
      <link href="/2021/11/22/xiao-yuan-wang-tong-xin/"/>
      <url>/2021/11/22/xiao-yuan-wang-tong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天和孟哥试了使用校园网进行互传文件,他说他在家一直这么用.我信了,因为他是孟哥.</p></blockquote><ul><li>总结一下问题<ol><li>在同一个校园网之间可以相互ping通,是没有问题的</li><li>登录校园网后,不同的运行商之间是ping不通的</li></ol></li></ul><h2 id="网络共享的设置"><a href="#网络共享的设置" class="headerlink" title="网络共享的设置"></a>网络共享的设置</h2><blockquote><p>打开wifi设置其属性为专用网络</p></blockquote><p><img src="./wifi%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="wifi属性的设置"></p><blockquote><p>打开网络共享中心</p></blockquote><p><img src="./%E7%BD%91%E7%BB%9C%E5%92%8C%E5%85%B1%E4%BA%AB%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="网络和共享中心的设置"></p><ul><li>设置专用网络都为启用</li><li>还有所有网络设置,和专用网络很像</li></ul><blockquote><p>开启之后,如果ping通则可以互相通信</p></blockquote><h2 id="关于共享文件夹"><a href="#关于共享文件夹" class="headerlink" title="关于共享文件夹"></a>关于共享文件夹</h2><p><img src="./%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.jpg" alt="共享文件夹"></p><ul><li>关于共享文件夹的<strong>共享</strong>设置,<span style="color:red">一定要设置成<code>everyone</code>才行</span></li></ul><h2 id="接收别人的共享文件"><a href="#接收别人的共享文件" class="headerlink" title="接收别人的共享文件"></a>接收别人的共享文件</h2><ul><li>在<strong>我的电脑</strong>菜单中右击选择<strong>添加一个网络位置</strong></li><li>然后一直下一页</li></ul><p><img src="./%E6%8E%A5%E6%94%B6%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="接收共享文件夹"></p><blockquote><p>在输入框内输入对方的分享地址,即可.关于使用公网开一个端口,对方也能访问到</p></blockquote><ul><li>关于将阿里云盘映射到我的电脑(参考)<ul><li><a href="https://www.52pojie.cn/thread-1490131-1-1.html">https://www.52pojie.cn/thread-1490131-1-1.html</a></li><li><a href="https://www.aliyundrive.com/s/wLQfjyVMUq3">https://www.aliyundrive.com/s/wLQfjyVMUq3</a></li><li><img src="./%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%98%A0%E5%B0%84.png" alt="阿里云盘的映射"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的正则表达式</title>
      <link href="/2021/11/18/js-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/2021/11/18/js-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a></h2><blockquote><p>js正则语法</p></blockquote><ul><li>语法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>语法糖:<code>/pattern/flags</code></li></ul><blockquote><p>关于flags参数:</p></blockquote><table><thead><tr><th>选项</th><th>参数</th></tr></thead><tbody><tr><td>g</td><td>全局匹配.找到所有匹配,而不是再第一个匹配结束</td></tr><tr><td>i</td><td>忽略字母大小写</td></tr><tr><td>m</td><td>多行,将(^和$)视为多行工作,不只是匹配整个输入字符串最开始和结束</td></tr><tr><td>s</td><td>dotAll模式,匹配任何字符串,例如<code>\n</code></td></tr><tr><td>u</td><td>uniCode,将模式视为Unicode序列点的序列</td></tr><tr><td>y</td><td>粘性匹配.从上次匹配成功的下个位置开始后续匹配.若下个相符内容不紧接在后,则不继续匹配</td></tr></tbody></table><blockquote><p>元字符的表达方式</p></blockquote><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>句号匹配任意单个字符除了换行符</td></tr><tr><td>[]</td><td>匹配方括号内的任意字符</td></tr><tr><td>[^]</td><td>匹配除了方括号里的任意字符</td></tr><tr><td>*</td><td>匹配&gt;&#x3D;0个重复的再*号之前的字符</td></tr><tr><td>+</td><td>匹配&gt;0个重复的再+号之前的字符</td></tr><tr><td>?</td><td>标记?之间的字符为可选</td></tr><tr><td>(xyz)</td><td>匹配与xyz完全相等的字符</td></tr><tr><td>|</td><td>或,匹配符号前或后的任意字符</td></tr><tr><td>\</td><td>转义字符,用于匹配保留一些字符</td></tr><tr><td>^</td><td>从开始行开始匹配</td></tr><tr><td>$</td><td>从末端开始匹配</td></tr><tr><td>{n}</td><td>指定出现的次数,<code>/8&#123;n&#125;5/g</code>,指定8出现的次数</td></tr><tr><td>{n,}</td><td>指定至少出现的次数,<code>/8&#123;n,&#125;5/g</code>,指定8至少出现n次</td></tr><tr><td>{n,m}</td><td>指定至少出现n次,至多出现m次</td></tr><tr><td>\w</td><td>任意的本义字符,[0-9a-zA-Z_]的简写形式</td></tr><tr><td>\W</td><td>任意的非本义字符,除了[0-9a-zA-Z_]的字符</td></tr><tr><td>\d</td><td>等价于[0-9]</td></tr><tr><td>\D</td><td>等价于[^0-9]</td></tr><tr><td>\s</td><td>任意空白</td></tr><tr><td>\S</td><td>任意非空白</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表</td></tr><tr><td>(…)</td><td>代表一个捕获组,捕获括号中的匹配项</td></tr></tbody></table><h2 id="常用正则表示"><a href="#常用正则表示" class="headerlink" title="常用正则表示"></a><a href="#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E7%A4%BA">常用正则表示</a></h2><blockquote><p>[ ]表示区间</p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>单个a或b或c</td></tr><tr><td>[^abc]</td><td>非a或b或c</td></tr><tr><td>[a-Z]</td><td>相当于[a-zA-Z],匹配任意的大小写字母</td></tr></tbody></table><blockquote><p>关于文件中的正则匹配</p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>.(css|less)$</code></td><td>以css或less结尾的文件</td></tr><tr><td><code>*.ts</code></td><td>所有以ts结尾的文件</td></tr><tr><td><code>**/index.html</code></td><td>所有文件下的index.html</td></tr></tbody></table><ul><li>一个*代表文件,两个**代表文件夹</li></ul><h2 id="使用正则匹配位置"><a href="#使用正则匹配位置" class="headerlink" title="使用正则匹配位置"></a>使用正则匹配位置</h2><blockquote><p><code>^ $ \b \B (?=p) (?!p)</code> 六个锚字符</p></blockquote><ul><li><p>把位置理解空字符,是对位置非常有效的理解方式</p></li><li><p>例如hello字符等价于:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^^hello?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h3><ul><li>^匹配开头</li><li>$匹配结尾</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"#hello#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="b和-B"><a href="#b和-B" class="headerlink" title="\b和\B"></a>\b和\B</h3><p>\b是单词边界,具体就是\w和\W之间的位置,也包括\w和^之间的位置,也包括\w和$之间的位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"[#JS#] #Lesson_01#.#mp4#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="x3D-p-和-p"><a href="#x3D-p-和-p" class="headerlink" title="(?&#x3D;p)和(?!p)"></a>(?&#x3D;p)和(?!p)</h3><blockquote><p><code>?=p</code>p前面的位置,<code>?&lt;=p</code>:p后面的位置</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//#petter</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//p#etter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>?!p</code>:除了p前面的位置,匹配其它所有位置.<code>?!&lt;p</code>:除了p后面的位置,匹配其它所有位置</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//#pe#t#t#e#r#</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//p#e#t#t#e#r#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则中-的作用"><a href="#正则中-的作用" class="headerlink" title="正则中()的作用"></a>正则中()的作用</h2><ol><li>分组:匹配连续出现的<code>ab</code>时<code>/(ab)+/</code></li><li>分支:多选分支结构<code>(p1|p2)</code></li></ol><blockquote><p>引用分组:使用相应API来引用分组</p></blockquote><ol><li>关于正则匹配的构造函数的全局属性:<code>$1,$2...$99</code>分别代表分组匹配到的参数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2021-12-12"</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"12/12/2021"</span><span class="token comment">//等价</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment">//"12/12/2021"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>反向引用:在正则本身里引用分组,但只能引用之前出现的分组</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> stringArr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"2017-06-12"</span><span class="token punctuation">,</span>   <span class="token string">"2017/06/12"</span><span class="token punctuation">,</span>   <span class="token string">"2017.06.12"</span><span class="token punctuation">,</span>   <span class="token string">"2017/06.12"</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> stringArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>例如<code>\1,\2...\99</code>,分别代表1-99的分组</li><li><span style="color:red">反向引用保证前后的分割符前后一致</span></li><li>引用不存在的分组,正则不会报错,匹配到反向引用的字符本身,例如<code>\2</code>表示对2进行了转义</li><li>括号嵌套:以<span style="color:red">左括号</span>为准</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((\d)(\d(\d)))</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">4</span> <span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>$1</code>匹配的是<code>((\d)(\d(\d)))</code></li><li><code>$2</code>匹配的是<code>(\d)</code></li><li><code>$3</code>匹配的是<code>(\d(\d))</code></li><li><code>$4</code>匹配的是<code>(\d)</code></li></ol><blockquote><p>非捕获分组<code>(?:)</code>:只想要括号最原始的功能,但不会引用它,即不在API里引用,也不在正则里反向引用</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment">//["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><ol><li>没有回溯的匹配:<ul><li>例如:<code>/ab&#123;1,3&#125;c/</code>,匹配字符串<code>abbbc</code></li></ul></li><li>有回溯的匹配:<ul><li>例如:<code>/ab&#123;1,3&#125;c/</code>,匹配字符串<code>abbc</code></li><li>当匹配到第三个b时,发现接下来的字符串时”c”,就会回到之前的状态</li></ul></li><li>常见回溯的形式:贪婪量词,惰性量词,分支结构</li></ol><blockquote><p>本质:<span style="color:red">深度优先搜索算法</span>.倒退到之前的某一部着一过程,称之为<code>回溯</code></p></blockquote><h3 id="贪婪量词"><a href="#贪婪量词" class="headerlink" title="贪婪量词"></a>贪婪量词</h3><blockquote><p>例如<code>b&#123;1,3&#125;</code>:多个贪婪量词挨着,会按顺序优先匹配</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["12345","123","45"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="惰性量词"><a href="#惰性量词" class="headerlink" title="惰性量词"></a>惰性量词</h3><blockquote><p>惰性量词就是在贪婪量词后面加个问号:<span style="color:red">尽可能少的匹配</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// ["12345","1","345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><blockquote><p>分支结构也是惰性的:<code>/can|candy/</code>,去匹配字符串”candy”,得到的结果是<code>&quot;can&quot;</code>.分支会一个一个尝试,如果前面的满足了,后面就不会再试验</p></blockquote><h2 id="正则相关的api"><a href="#正则相关的api" class="headerlink" title="正则相关的api"></a>正则相关的api</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>检测一个字符串是否匹配某个模式</p></blockquote><ul><li>返回值<ol><li>成功:true</li><li>失败:false</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"abc12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><blockquote><p>该方法再指定一个字符串中执行一个搜索匹配.匹配返回一个数组或者null</p><p>设置<code>g</code>或者<code>y</code>,<code>exec()</code>可对当字符串的多次匹配结果<strong>进行逐条遍历</strong>,(通过更新<code>lastIndex</code>).然而<code>match</code>只会匹配到返回的结果</p><p>只会返回第一个成功的匹配</p></blockquote><ul><li>返回值:<ol><li>成功:返回一个数组(包括index何input),并更新<code>lastIndex</code>属性<ul><li><code>index</code>:匹配到的字符位于原始字符串的基于0的索引值</li><li><code>input</code>:原始字符串</li><li><code>lastIndex</code>:下一次匹配开始的位置</li></ul></li><li>失败:返回null</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;).?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26,2018-09-12,2018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26,', '2017', '06', '26', index: 0, input: '2017-06-26,2018-09-12,2018-09-12', groups: undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2018-09-12,', '2018', '09', '12', index: 11, input: '2017-06-26,2018-09-12,2018-09-12', groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><blockquote><p>在字符串内检索指定的值,或找到一个或多个正则表达式的匹配.</p></blockquote><ul><li>返回值:<ol><li>存放匹配结果的数组.该数组内容很大程度依赖于<code>g</code></li><li>如果没找到匹配结果返回null</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-262018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26', '2018-09-12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><blockquote><p>用于检索字符串中指定的子字符串,或检索与正则表达式相匹配的子字符串</p></blockquote><ul><li>返回值<ol><li>成功:返回到匹配到子串的起始位置</li><li>失败:返回-1</li></ol></li></ul><blockquote><p>注意:不执行全局匹配,他将忽略<code>g</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"abc12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><blockquote><p>方法使用指定的分隔符字符串将一个String对象分割成子字符串数组,以一个指定的分割字串来决定每个拆分的位置</p></blockquote><ul><li>参数:<ol><li><code>separator</code>:指定表示每个拆分应发生的点的字符串.separator 可以是一个字符串或正则表达式</li><li><code>limit</code>:限定返回的分割片段数量</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\,</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26,2018-09-12,2018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26', '2018-09-12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="replace和replaceAll"><a href="#replace和replaceAll" class="headerlink" title="replace和replaceAll"></a>replace和replaceAll</h3><blockquote><p>参数:</p></blockquote><ol><li>regexp|substr:正则表达式或者匹配的字符</li><li>newSubstr|function:要替换的字符或者函数</li></ol><table><thead><tr><th>function参数</th><th>解释</th></tr></thead><tbody><tr><td>match</td><td>匹配的子串</td></tr><tr><td>p1, p2, …</td><td>括号中的捕获组找到的第n个字符串</td></tr><tr><td>offset</td><td>被检查的整个字符串中匹配子字符串的偏移量</td></tr><tr><td>string</td><td>正在检查的整个字符串</td></tr></tbody></table><ul><li>不同:<ol><li>replace只会匹配第一个匹配到的字符,replaceAll会匹配所有字符</li><li>如果是正则,replaceAll必须加上全局修饰符<code>g</code></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//.xx</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"123xxx8add444"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+).+([a-z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//123xxx8add</span><span class="token comment">//123</span><span class="token comment">//d</span><span class="token comment">//0</span><span class="token comment">//123xxx8add444  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><blockquote><p>可以将任意的字符串类型正则转换成正则对象</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://juejin.cn/post/6844903487155732494#heading-24">https://juejin.cn/post/6844903487155732494#heading-24</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试</title>
      <link href="/2021/11/17/diao-shi/"/>
      <url>/2021/11/17/diao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="开启自动调试"><a href="#开启自动调试" class="headerlink" title="开启自动调试"></a>开启自动调试</h2><blockquote><p>按下<strong>ctrl+shift+p</strong>打开命名面板,也可以在设置中打开</p></blockquote><ul><li>输入auto Attach,开启智能自动附加调试按钮</li><li>如果node_modukes中没有调试工具,会自动附加</li><li>参考:<a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></li></ul><blockquote><p>request,必填项,有两种类型,分别是<code>launch</code>和<code>attach</code></p><p><code>launch</code>:VSCode会启动一个独立的debug进入调试.如果是chrome,会打开一个全新不带任何插件的chrome</p><p><code>attach</code>:是你已经打开了程序,然后接通<code>Node.js</code>的内部调试协议进行调试</p></blockquote><ul><li>建议使用attach进行vscode调试</li></ul><h2 id="使用vscode调式js"><a href="#使用vscode调式js" class="headerlink" title="使用vscode调式js"></a>使用vscode调式js</h2><blockquote><p>调试js时先打入端点,进入到debug中会有调试方式进行选择</p></blockquote><ul><li>启用node调试时<code>node packageName</code>会在debug中生出设置的图标</li><li><img src="./js%E8%B0%83%E8%AF%95.png" alt="js调试"></li><li>选择相应的调试方式会有相应的<strong>launch.json</strong>文件生成</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attach"</span><span class="token punctuation">,</span>  <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">9229</span><span class="token punctuation">,</span>  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>  <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"&lt;node_internals>/**"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pwa-node"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>node13之后已经有了对<code>ES6</code>模块的支持,使用扩展名区分不同模块</p></blockquote><ol><li><code>.mjs</code>结尾的文件,node会将它作为ES6模块加载.</li><li><code>.cjs</code>结尾的文件,node会将他作为CommonJs的模块加载</li><li><code>.js</code>默认为CommonJs</li></ol><ul><li>写上对应的后缀就可以对对应的语法进行调节</li></ul><h2 id="使用vscode调试ts"><a href="#使用vscode调试ts" class="headerlink" title="使用vscode调试ts"></a><a href="#%E4%BD%BF%E7%94%A8vscode%E8%B0%83%E8%AF%95ts">使用vscode调试ts</a></h2><blockquote><p>首先是<code>@types/node</code>,<code>ts-node</code>,<code>typescript</code>三个包的下载,然后后有<code>TypeScript Debugger</code>插件的下载,用于生成<strong>launch.json</strong>文件</p></blockquote><ul><li>同样也是先打断点,在进行生成文件,选择就是选择TS debugger</li><li><img src="./js%E8%B0%83%E8%AF%95.png" alt="ts调试"></li></ul><h2 id="使用chrome调试html文件"><a href="#使用chrome调试html文件" class="headerlink" title="使用chrome调试html文件"></a>使用chrome调试html文件</h2><ul><li>注意:如果不先选择调试文件,而是直接选择一个工作目录创建<code>launch.json</code>文件需要对文件选项进行配置</li></ul><blockquote><p>这里直接讲述打选择单独文件进行调试</p></blockquote><ul><li>在debug中运行下有创建<code>launch.json</code>,在工作区中弹出选项框,然后选择Chrome选项</li></ul><p><img src="./chrom%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E8%B0%83%E8%AF%95.png" alt="chrom选择文件调试"></p><blockquote><p>chrom关于工作区配置调试文件</p></blockquote><p><img src="./chrom%E8%B0%83%E8%AF%95html%E6%96%87%E4%BB%B6.png" alt="使用变量"></p><ul><li>打开chrom浏览器,在source选项卡上打上端点,刷新后会自动附加到vscode上</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>${wekspaceFolder}</td><td>当前工作区根目录</td></tr><tr><td>${file}</td><td>当前打开要进行调试的文件</td></tr><tr><td>sourceMaps</td><td>当前文件的映射</td></tr><tr><td>type</td><td>必填项,调试类型,例如<code>pwa-chrome</code></td></tr><tr><td>program</td><td>程序的启动入口</td></tr></tbody></table><blockquote><p>注意:<strong>debugger chrome</strong>已经弃用,vscode自带的<code>pwa-chrome</code></p></blockquote><ul><li>参考:<a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes">https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes</a></li></ul><h3 id="关于ES6代码的调试"><a href="#关于ES6代码的调试" class="headerlink" title="关于ES6代码的调试"></a>关于ES6代码的调试</h3><blockquote><p>需要在<code>script</code>脚本中启用:&lt;script type&#x3D;”module”&gt;</p><blockquote><p><span style="color:red">需要开启一个本地服务</span>支持ES6语法的import导入.不然会出现跨域错误</p></blockquote></blockquote><p><img src="./LiveServer.png" alt="LiveServer"></p><ul><li>首先需要下载<code>LiveServe</code>插件,在插件中更改两个配置</li></ul><ol><li>将客户端浏览器改成chrome</li><li>自动附加改成true</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"liveServer.settings.ChromeDebuggingAttachment"</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在调试文件时需要先将<code>Live Serve</code>服务开启,然后进行调试</p></blockquote><p><img src="./%E9%85%8D%E5%90%88LiveServer.png" alt="配合LiveServe进行调试"></p><ul><li>注意开启服务的端口号要和LiveServer端口号一样</li><li>file选项并不会启动一个服务,而是用浏览器打开文件.</li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于webpack</title>
      <link href="/2021/11/14/guan-yu-webpack/"/>
      <url>/2021/11/14/guan-yu-webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><blockquote><p>使用<code>npx ~</code>运行局部的脚本命令</p></blockquote><ul><li>在<code>scripts</code>配置脚本命令</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>pnpm run build</code>可以构建</li><li>脚本会直接在<strong>bin</strong>目录下寻找脚本的命令</li></ul><blockquote><p>Webpack的依赖图</p></blockquote><ol><li>webpack在处理应用程序时,它会根据命令或者配置文件找到入口文件</li><li>从入口开始,会生成一个<span style="color:red">依赖关系图</span>,这个依赖关系图会包含应用程序中所需的所有模块</li><li>然后遍历图结构,打包一个个模块(根据文件的不同使用不同的loader来解析)</li></ol><h2 id="webpack构建"><a href="#webpack构建" class="headerlink" title="webpack构建"></a>webpack构建</h2><blockquote><p>首先webpack依赖于node,要想运行webpack一定要在node环境下运行</p></blockquote><ul><li>下载<code>webpack</code>和<code>webpack-cli</code></li><li>在文件<code>webpack.config.js</code>中构建项目</li></ul><h2 id="webpack配置项"><a href="#webpack配置项" class="headerlink" title="webpack配置项"></a><a href="#webpack%E9%85%8D%E7%BD%AE%E9%A1%B9">webpack配置项</a></h2><blockquote><p>导入和导出文件的选项</p></blockquote><ul><li><strong>entry</strong>:入口文件</li><li><strong>output</strong>:出口文件<ul><li><strong>path</strong>:打包后的文件夹(path是一个绝对路径)</li><li><strong>filename</strong>:打包后的文件名</li></ul></li><li><strong>target</strong>:目标选项(可以是<code>web</code>或者<code>node</code>),什么环境打包</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"boundle.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>五个核心概念</p></blockquote><ul><li><strong>Entry</strong>:入口(Entry)指示 Webpack以哪个文件为入口起点开始打包,分析构建内部依赖图</li><li><strong>Output</strong>:输出（Output）指示Webpack打包后的资源bundles输出到那里去,以及如何命名</li><li><strong>Loader</strong>:loader让Webpack能够去处理那些非JavaScript文件（Webpack自身只理解javascript）</li><li><strong>plugins</strong>:插件（plugins）可以使用于执行范围更广的任务。插件的范围包括,从打包优化和压缩,一直到重新定义环境中的变量</li><li><strong>Mode</strong>:模式（Mode）指示Webpack使用相应模式的配置</li></ul><h3 id="model和devtool配置"><a href="#model和devtool配置" class="headerlink" title="model和devtool配置"></a>model和devtool配置</h3><blockquote><p>model默认值是<code>production</code>,可选:<code>&#39;none&#39; | &#39;development&#39; | &#39;production&#39;</code></p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>development</td><td>会将<code>DefinePlugin</code>中的<code>process.env.NODE_ENV</code>设置为<code>development</code>,为模块和chunk启用有效的名</td></tr><tr><td>production</td><td>会将<code>DefinePlugin</code>中的<code>process.env.NODE_ENV</code>设置为<code>production</code>,为模块和chunk启用确定性的混淆名,<code>FlagDependencyUsagePlugin</code>…</td></tr><tr><td>none</td><td>不适用任何默认优化</td></tr></tbody></table><ul><li>不同选项会开启不同的配置</li></ul><blockquote><p><code>devtool: &quot;source-map&quot;</code>,建立js映射文件,方便代码调试</p></blockquote><h2 id="module模块"><a href="#module模块" class="headerlink" title="module模块"></a>module模块</h2><blockquote><p>相关module模块中rules的配置,使用数组的形式</p></blockquote><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a href="#loader">loader</a></h3><blockquote><p>用于加载模块,例如<code>css</code>,<code>less</code>或者<code>png</code>等文件模块</p></blockquote><ul><li><strong>rules</strong>属性对应的值是一个数组<ul><li>数组中存放的是一个个的<code>Rule</code>,<code>Rule</code>是一个对象,对象中可以设置多个属性</li><li><strong>test</strong>:用于对resource进行匹配,对象中可以设置多个属性</li><li><strong>use</strong>:对应的属性:一般情况下是一个数组<ul><li><strong>loader</strong>:必须有一个 loader属性,对应的值是一个字符串</li><li><strong>options</strong>:可选的属性,值是一个字符串或者对象,值会被传入到loader中</li></ul></li><li><strong>include</strong>(匹配文件)和<strong>exclude</strong>(排除文件):字符串数组的形式</li></ul></li></ul><blockquote><p><code>css-loader</code>的使用</p></blockquote><ul><li><code>loader</code>可以用对<span style="color:red">模块的源代码</span>进行转换</li><li>我们可以<span style="color:red">将css文件也看成是一个模块</span>,我们是<span style="color:red">通过import来加载这个模块的</span></li><li>在加载这个模块时,<span style="color:red">webpack其实并不知道如何对其进行加载</span>,我们必须制定对应的loader来完成这个功能</li></ul><blockquote><p><code>style-loader</code>的使用</p></blockquote><ul><li><strong>css-loader</strong>只是负责将<code>.css</code>文件进行解析,并不会将解析之后的css插入到页面中</li><li><strong>style-loader</strong>完成解析后插入&lt;style&gt;的操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">//1.loader的写法(语法糖)</span>        <span class="token comment">//loader:'css-loader'</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>          <span class="token string">"postcss-loader"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>loader的两种写法<ol><li>直接使用<code>loader:&quot;css-loader&quot;</code></li><li>使用<code>use:[]</code>数组的形式可以传入配置</li></ol><ul><li>第一种:use的简写,传入多个<code>loader</code></li><li>第二种:use对象的写法,可以配置多个属性</li></ul></li></ul><h3 id="css预处理"><a href="#css预处理" class="headerlink" title="css预处理"></a><a href="#css%E9%A2%84%E5%A4%84%E7%90%86">css预处理</a></h3><ol><li>首先下载<code>less</code>编译工具</li><li>下载<code>less-loader</code>工具转换<code>less</code>到<code>css</code></li></ol><blockquote><p>关于use中loader的顺序问题,是从最后一个解析到第一个,顺序不能错</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">rules<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"style-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"css-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"less-loader"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="postCSS工具"><a href="#postCSS工具" class="headerlink" title="postCSS工具"></a><a href="#postcss%E5%B7%A5%E5%85%B7">postCSS工具</a></h3><blockquote><p>借助于js来转换css的适配,例如浏览器前缀等</p></blockquote><ul><li><p>构建PostCSS(导入其中需要的插件)</p><ol><li>查找<code>webpack</code>中的<strong>postcss-loader</strong></li><li>在项目中查找<code>postcss.config.js</code>文件</li></ol></li><li><p>下载工具<code>postcss、postcss-cli</code></p><ul><li><code>pnpm add postcss postcss-cli -D</code></li></ul></li></ul><blockquote><p>使用<code>postcss-loader</code>来进行处理</p></blockquote><ul><li>直接在<code>webpack.config.js</code>配置文件中处理</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token string">"style-loader"</span><span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      postcssOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用单独的配置文件<code>postcss.config.js</code>来配置</p></blockquote><ul><li><code>webpack</code>中只需要提供预处理,并不需要导入操作,webpack会自动查找并导入</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a><a href="#file-loader">file-loader</a></h3><blockquote><p>图片的导入</p></blockquote><ul><li>webpack中rules的配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<ol><li>使用<code>url()</code>可以直接引入图片</li><li>如果是<code>src</code>引入,<span style="color:red">切记要用import引入图片</span></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> mvc <span class="token keyword">from</span> <span class="token string">"../img/mvc封装式开发.png"</span><span class="token comment">//设置img元素的src</span><span class="token keyword">const</span> imgEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>imgEl<span class="token punctuation">.</span>src <span class="token operator">=</span> mvcdocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgEl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<strong>options</strong>处理文件名称按照一定的规则进行显示:</p></blockquote><ul><li>使用<strong>PlaceHolders</strong>来完成,webpack提供了大量的<strong>PlaceHolders</strong>来显示不同的内容:<ul><li><p><a href="https://webpack.js.org/loaders/file-loader/#placeholders">https://webpack.js.org/loaders/file-loader/#placeholders</a></p></li><li><p><strong>[ext]</strong>: 处理文件的扩展名</p></li><li><p><strong>[name]</strong>: 处理文件的名称</p></li><li><p><strong>[hash]</strong>: 文件的内容,使用MD4的散列函数处理,生成的一个128位的hash值（32个十六进制）</p></li><li><p><strong>[contentHash]</strong>: 在file-loader中和[hash]结果是一致的（在webpack的一些其他地方不一样,后面会讲到）</p></li><li><p><strong>[hash:&lt;length&gt;]</strong>: 截图hash的长度,默认32个字符太长了</p></li><li><p><strong>[path]</strong>: 文件相对于webpack配置文件的路径</p></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    outputPath<span class="token operator">:</span> <span class="token string">"img"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"[name]_[hash:6].[ext]"</span><span class="token punctuation">,</span>    <span class="token comment">//可以直接将包名和文件名分开</span>    <span class="token comment">//name: "img/[name]_[hash:6].[ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><blockquote><p>可以将较小的文件,转成<strong>base64的URI</strong>(与<code>file-loader</code>相似)</p></blockquote><ul><li><p>使用base64转码可以减少http请求,小的图片转换base64之后可以和页面一起被请求</p><ul><li>注意:<code>大的图片也进行转换,反而会影响页面的请求速度</code></li></ul></li><li><p>但是在dist文件夹中,我们会看不到图片文件</p><ul><li>这是因为我的两张图片的大小分别是38kb和295kb</li><li>默认情况下<strong>url-loader</strong>会将所有的图片文件转成base64编码</li></ul></li></ul><blockquote><p>在<code>url-loader</code>中<code>options</code>属性<code>limit</code></p></blockquote><ul><li>下面的代码38kb的图片会进行base64编码,而295kb的不会</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    outputPath<span class="token operator">:</span> <span class="token string">"img"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"[name]_[hash:6].[ext]"</span><span class="token punctuation">,</span>    <span class="token comment">//可以直接将包名和文件名分开</span>    <span class="token comment">//name: "img/[name]_[hash:6].[ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack5新特性"><a href="#webpack5新特性" class="headerlink" title="webpack5新特性"></a>webpack5新特性</h2><blockquote><p><span style="color:red">资源模块类型(asset module type)</span>,来替代加载某些资源我们需要使用一些loader,比如<code>raw-loader</code> ,<code>url-loader</code>,<code>file-loader</code></p></blockquote><ul><li>四种新的资源模块类型<ul><li><strong>asset&#x2F;resource</strong>:替代file-loader:发送一个单独的文件并导出URL</li><li><strong>asset&#x2F;inline</strong>:替代url-loader:导出一个资源的 data URI</li><li><strong>asset&#x2F;source</strong>:替代raw-loader:导出资源的源代码,之前通过使用实现</li><li><strong>asset</strong>:替代url-loader,并且配置资源体积限制实现:在导出一个data URI和发送一个单独的文件之间自动选择</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>  generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">"img/[name]_[hash:6][ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  parser<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      maxSize<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1024</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体的打包-file-loader"><a href="#字体的打包-file-loader" class="headerlink" title="字体的打包(file-loader)"></a>字体的打包(file-loader)</h3><blockquote><p>这里使用webpack5新特性</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(eot|ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>  generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">"font/[name]_[hash:6][ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="plugin模块"><a href="#plugin模块" class="headerlink" title="plugin模块"></a>plugin模块</h2><blockquote><p>plugin贯穿webpack的生命周期</p></blockquote><ul><li>Loader是用于特定的模块类型进行转换；</li><li>Plugin可以用于执行更加广泛的任务,比如打包优化、资源管理、环境变量注入等</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h3><blockquote><p>自动清除每次打包之后的文件,例如<code>dist</code></p></blockquote><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><blockquote><p>在进行项目部署的时,生成对应的入口文件<code>index.html</code></p></blockquote><ul><li>默认情况下是根据<code>ejs的一个模块</code>来生成的</li><li>根据<code>html-webpack-plugin</code>中<code>default_index.ejs</code>模块来生成</li></ul><h4 id="自定义HTML模块"><a href="#自定义HTML模块" class="headerlink" title="自定义HTML模块"></a>自定义HTML模块</h4><ul><li>添加一个noscript标签,在用户的JavaScript被关闭时,给予响应的提示</li><li>开发vue或者react项目时,使用一个可以挂载后续组件的根标签 &lt;div id&#x3D;”app”&gt;</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= BASE_URL %>favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= htmlWebpackPlugin.options.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>We're sorry but &lt;%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- built files will be auto injected --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>EJS模块填充数据</strong>:语法&lt;% 变量 %&gt;</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">"./public/index.html"</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"webpack项目"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>template：指定我们要使用的模块所在的路径</li><li>title：在进行<code>htmlWebpackPlugin.options.title</code>读取时,就会读到该信息</li></ul><blockquote><p>使用<strong>DefinePlugin</strong>:在编译时创建配置的全局常量(<code>BASE_URL</code>),是一个webpack内置的插件</p></blockquote><ul><li>&lt;link rel&#x3D;”icon” href&#x3D;”&lt;%&#x3D; BASE_URL %&gt;favicon.ico”&gt;</li><li>如果没有设置过这个常量值,会出现没有定义的错误</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">"'./'"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CopyWebpackPlugin"><a href="#CopyWebpackPlugin" class="headerlink" title="CopyWebpackPlugin"></a>CopyWebpackPlugin</h4><blockquote><p>在vue的打包过程中,将一些文件从public的目录下复制到dist文件夹中</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  patterns<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      from<span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span>      to<span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>      globOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ignore<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"**/index.html"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>patterns</code>:复制的规则<ul><li>from:设置从哪一个源中开始复制</li><li>to:复制到打包的目录下(dist)的位置(可以省略)</li><li>globOptions:设置一些额外的选项,其中可以编写需要忽略的文件<ul><li>ignore:忽略的文件</li></ul></li></ul></li></ul><h2 id="babel工具的使用"><a href="#babel工具的使用" class="headerlink" title="babel工具的使用"></a>babel工具的使用</h2><blockquote><p>在编译间段(loader)中使用,babel可以将ES6以上的语法转换为ES5</p></blockquote><ul><li><p>将我们的<strong>源代码</strong>,转换成浏览器可以直接识别的<strong>另外一段源代码</strong>(可以看作一个编译器)</p><ul><li>Babel的工作流程:<ul><li>解析阶段</li><li>转换阶段</li><li>生成阶段</li></ul></li><li>具体的工作流程是经过<code>词法分析</code>生成<code>tokens数组</code>然后<code>语法分析AST(抽象语法树)</code>,遍历所有的AST,使用<code>插件(plugins)</code>生成新的<code>AST(抽象语法树)</code></li></ul></li><li><p>vue,react项目都是使用babel转换向后兼容的版本(vite是使用ESBuild)</p></li></ul><blockquote><p>babel本身和postcss一样可以作为一个独立的工具,不需要和webpack构建工具搭配起来使用(不过命令行中要写很多命令,麻烦)</p></blockquote><ul><li>babel的两个核心库:<code>@babel/cli</code>(命令行工具) <code>@babel/core</code>(核心代码)</li><li>有<code>@babel/core</code>核心代码库之后可以使用插件(可以自己写相关的插件)<ul><li><code>@babel/plugin-transform-arrow-functions</code>:转换箭头函数</li><li><code>@babel/plugin-transform-block-scoping</code>:转换const或let这样的词法作用域</li></ul></li></ul><blockquote><p>使用预设<code>@babel/preset-env</code>来加载插件,而不需要特定的指定加载插件,避免加载内容过多</p><blockquote><p>常见的预设有,<strong>env</strong>,<strong>react</strong>,<strong>TypeScript</strong></p></blockquote></blockquote><ul><li>使用<code>babel-loader</code>在webpack中进行构建</li></ul><blockquote><p>直接在webpack中配置所有选项</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span>  use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      presets<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/preset-env"</span>        <span class="token comment">//如果想传入其他参数</span>        <span class="token comment">//["@babel/preset-env",&#123;&#125;]</span>      <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另写一个<code>babel.config.js</code>文件,webpack会根据预设自动加载</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//webpack</span><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">&#125;</span><span class="token comment">//babel</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  presets<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-env"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于webpack打包vue源码"><a href="#关于webpack打包vue源码" class="headerlink" title="关于webpack打包vue源码"></a>关于webpack打包vue源码</h2><h3 id="关于vue打包不同版本的解析"><a href="#关于vue打包不同版本的解析" class="headerlink" title="关于vue打包不同版本的解析"></a>关于vue打包不同版本的解析</h3><ul><li><code>production</code>是生产版本下的模式</li><li><code>runtime</code>是运行时</li></ul><blockquote><p><strong>vue(.runtime).global(.prod).js</strong></p></blockquote><ul><li>通过浏览器中的 &lt;script src&#x3D;“…”&gt; 直接使用</li><li>我们之前通过CDN引入和下载的Vue版本就是这个版本</li><li>会暴露一个全局的Vue来使用</li></ul><blockquote><p><strong>vue(.runtime).esm-browser(.prod).js</strong></p></blockquote><ul><li>用于通过原生 ES 模块导入使用 (在浏览器中通过 &lt;script type&#x3D;”module”&gt; 来使用)</li></ul><blockquote><p><strong>vue(.runtime).esm-bundler.js</strong></p></blockquote><ul><li>用于 webpack,rollup 和 parcel 等构建工具</li><li>构建工具中默认是vue.runtime.esm-bundler.js</li><li>如果我们需要解析模板template,那么需要手动指定vue.esm-bundler.js</li></ul><blockquote><p><strong>vue.cjs(.prod).js</strong></p></blockquote><ul><li>服务器端渲染使用</li><li>通过<code>require()</code>在<code>Node.js</code>中使用</li></ul><h3 id="vue中关于DOM元素的编写"><a href="#vue中关于DOM元素的编写" class="headerlink" title="vue中关于DOM元素的编写"></a>vue中关于DOM元素的编写</h3><ol><li><code>template</code>模板的方式:<ul><li>template: <code>&lt;h2&gt;傻瓜&lt;/h2&gt;</code></li><li>渲染:手动指定<strong>vue.esm-bundler.js</strong></li></ul></li><li>render函数方式渲染<ul><li>h函数可以直接返回一个虚拟节点,也就是Vnode节点</li></ul></li><li>通过<code>.vue</code>文件中的<code>template</code>来编写模板<ul><li><code>.vue</code>文件中的template</li><li>通过在<code>vue-loader</code>对其进行编译和处理</li></ul></li></ol><blockquote><p>Vue选择版本:<strong>运行时+编译器</strong>和<strong>仅运行时</strong></p></blockquote><ul><li><strong>运行时+编译器</strong>包含了对template模板的编译代码,更加完整,但是也更大一些</li><li><strong>仅运行时</strong>没有包含对template版本的编译代码,相对更小一些</li></ul><h4 id="关于App-vue的打包过程"><a href="#关于App-vue的打包过程" class="headerlink" title="关于App.vue的打包过程"></a>关于App.vue的打包过程</h4><blockquote><p>关于SFC(单文件组件),真是开发中大多数情况下都是使用这个</p></blockquote><ul><li>使用<code>vue-loader</code>编译<code>.vue文件</code>,<code>vue-loader</code>会调用<code>@vue/compiler-sfc</code>来对<code>template</code>进行解析</li><li>下载:<code>npm i vue-loader @vue/compiler-sfc -D</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span><span class="token string">"vue-loader"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置Vue的插件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>VueLoaderPlugin<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader/dist/index"</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>以上配置可以支持<code>App.vue</code>的写法</li></ul><blockquote><p>关于编译时会出现的警告:<br><img src="./markdownVueBuildError.png" alt="vue构建出现的警告"></p></blockquote><ul><li><p><span style="color:red">建议正确配置它们以便在最终包中获得适当的 tree-shaking</span></p></li><li><p><strong>VUE_OPTIONS_API</strong>:（启用&#x2F;禁用选项API的支持,默认:true）</p></li><li><p><strong>VUE_PROD_DEVTOOLS</strong>:（启用&#x2F;禁用devtools生产支持,缺省false）</p></li><li><p>在<code>DefinePlugin</code>插件中配置这两个属性,属于wenpack自带的插件</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">"'./'"</span><span class="token punctuation">,</span>  __VUE_OPTIONS_API__<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  __VUE_PROD__DEVTOOLS<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="devServe模块"><a href="#devServe模块" class="headerlink" title="devServe模块"></a>devServe模块</h2><blockquote><p><strong>contentBase</strong>属性:<code>contentBase:&quot;./public&quot;</code></p></blockquote><ul><li>在开发阶段不需要使用<code>copy-webpack-plugin</code>打包文件,而是直接以contentBase为相对位置查找资源位置.</li></ul><blockquote><p>设置host主机地址</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  host<span class="token operator">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>localhost</code>和<code>0.0.0.0</code>的区别</p></blockquote><ul><li>localhost本质是一个域名,通过DNS解析成127.0.0.1<ul><li>其实就是一个<strong>回环地址</strong>,不需要经过数据链路层,物理层,直接在网络层就能获取数据</li><li>例如监听127.0.0.1,在同一网段下的主机中,通过ip地址是不能访问的</li></ul></li><li>0.0.0.0:监听所有IPV4上所有的地址,根据端口找到不同的程序<ul><li>监听0.0.0.0时,同一个网段下的主句,可以通过ip地址访问</li></ul></li></ul><blockquote><p>port,open,compress</p></blockquote><ul><li><strong>port</strong>设置监听的端口,默认是8080</li><li><strong>open</strong>设置是否打开浏览器,默认false</li><li><strong>compress</strong>是否为静态文件开启<code>gzip compression</code><ul><li>默认是false.</li><li>在响应头中<code>Content-Encoding:gzip</code></li></ul></li></ul><h3 id="HMR-热模块替换"><a href="#HMR-热模块替换" class="headerlink" title="HMR(热模块替换)"></a>HMR(热模块替换)</h3><blockquote><p>不刷新整个页面,替换,添加,删除模块.而立即在浏览器更新</p></blockquote><ul><li><code>webpack-dev-server</code>已经支持HMR,(只要开启即可)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>由于没有指定哪一个模块热更新,需要手动实现<code>module.hot.accpet</code></p></blockquote><ul><li>不过在大型框架中已经有包替我们实现好,例如<code>vue-loader</code></li></ul><blockquote><p>关于HMR的原理</p></blockquote><ul><li><code>webpack-dev-server</code>会创建两个服务：提供静态资源的服务<code>express</code>发送http请求和Socket服务<code>net.Socket</code><ul><li><code>express server</code>负责直接提供静态资源的服务<span style="color:red">打包后的资源直接被浏览器请求和解析</span></li><li><code>HMR Socket Server</code>负责监听模块的变化<ul><li>会生成两个文件:<code>.json</code>文件是对js需要更改的文件模块的映射</li><li><code>.js</code>是更新后端文件</li></ul></li></ul></li></ul><p><img src="./markdownHMR.png" alt="HMR"></p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"^/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    target<span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>    pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"^/api"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用代理服务器解决开发中的跨域问题</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>表示的是代理到的目标地址</td></tr><tr><td>pathRewrite</td><td>使用此属性可以删除写入的<code>/api</code></td></tr><tr><td>secure</td><td>默认情况下不接受转发到https服务器上,如果希望支持使用false</td></tr><tr><td>changeOrigin</td><td>是否更新代理后请求的headers中的host地址</td></tr></tbody></table><h2 id="resolve模块"><a href="#resolve模块" class="headerlink" title="resolve模块"></a>resolve模块</h2><blockquote><p>通常是用来解析文件的路径</p></blockquote><ul><li>关于webpack可以解析的路径<ul><li><strong>绝对路径</strong>:可以直接解析</li><li><strong>相对路径</strong>:在 import&#x2F;require 中给定的相对路径,会拼接此上下文路径,来生成模块的绝对路径</li><li><strong>模块路径</strong>:<ul><li>默认值是<code>[&#39;node_modules&#39;]</code>,默认会在这个包里查找文件</li><li>使用<code>alias</code>配置别名的方式来替换初识模块路径</li></ul></li></ul></li></ul><blockquote><p>extensions和alias配置</p></blockquote><ul><li>extensions是解析到文件时自动添加扩展名：<ul><li>默认值是 <code>[&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;]</code></li><li>所以如果我们代码中想要添加加载 .vue 或者 jsx 或者 ts 等文件时,我们必须自己写上扩展名</li></ul></li><li>alias配置别名<ul><li>如果项目结构比较深,可以使用别名简化</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化环境配置"><a href="#优化环境配置" class="headerlink" title="优化环境配置"></a>优化环境配置</h2><blockquote><p>开发环境性能优化</p></blockquote><ul><li>优化打包构建速度<ul><li>HMR</li></ul></li><li>优化代码调试<ul><li>source-map</li></ul></li></ul><blockquote><p>生产环境性能优化</p></blockquote><ul><li>优化打包构建速度 <ul><li>oneOf</li><li>babel缓存</li><li>多进程打包<ul><li>externals</li></ul></li><li>dll</li></ul></li><li>优化代码运行的性能<ul><li>缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li><li>code split</li><li>懒加载&#x2F;预加载</li><li>PWA</li></ul></li></ul><h3 id="devtools配置"><a href="#devtools配置" class="headerlink" title="devtools配置"></a>devtools配置</h3><blockquote><p>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</p><blockquote><p>内联和外部的区别:外部生成映射的文件,内联没有.内联构建速度更快</p></blockquote></blockquote><ul><li><strong>source-map</strong>:外部<ul><li>错误代码的准确信息和源代码错误位置</li></ul></li><li><strong>inline-source-map</strong>:内联<ul><li>错误代码的准确信息和源代码错误位置</li></ul></li><li><strong>hidden-source-map</strong>:外部<ol><li>错误代码的错误原因,但是但是没有错误位置</li><li>不能追踪源代码的错误,只能提示到构建后的代码的错误位置</li></ol></li><li><strong>eval-source-map</strong>:内联<ol><li>每一个文件都生成对应的source-map,都在eval</li><li>错误代码的准确信息和源代码错误位置</li></ol></li><li><strong>nosources-source-map</strong>:外部<ul><li>错误代码的准确信息,但是没有任何源代码的信息</li></ul></li><li><strong>cheap-source-map</strong>:外部<ol><li>错误代码的准确信息和源代码错误位置</li><li>只能精确到行</li></ol></li><li><strong>cheap-module-source-map</strong>:外部  <ol><li>错误代码的准确信息和源代码错误位置</li><li>module会将loader的source map加入</li></ol></li></ul><blockquote><p>开发环境:速度和友好的调式</p></blockquote><ul><li>速度:<code>eval&gt;inline&gt;cheap&gt;...</code><ul><li>eval-cheap-source-map</li><li>eval-source-map</li></ul></li><li>调试:<ul><li>souce-map</li><li>cheap-module-source-map</li><li>cheap-souce-map</li></ul></li></ul><blockquote><p>生产环境下不使使用内,内联会使代码变的更大</p></blockquote><ul><li>nosources-source-map</li><li>hidden-source-map</li></ul><h3 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h3><blockquote><p>使用Oneof加载loader,这里的loader只会匹配一个,不能有两个配置处理同一种文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//复用loader</span><span class="token keyword">const</span> commonCssloader <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token comment">//还需再package.json中定义browerslist,</span>  <span class="token comment">//或者.browerslist文件</span>  loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    indent<span class="token operator">:</span> <span class="token string">"postcss"</span><span class="token punctuation">,</span>    <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">oneOf<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssloader<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssloader<span class="token punctuation">,</span><span class="token string">"less-loader"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote><p>babal缓存:<code>cacheDirectory:true</code>.解析js文件时使用</p></blockquote><h4 id="文件名的哈希"><a href="#文件名的哈希" class="headerlink" title="文件名的哈希"></a><a href="#file-loader">文件名的哈希</a></h4><ul><li><strong>hash</strong>:每次webpack构建时会生成一个唯一的hash值<ol><li>问题:因为js和css同时使用一个hash值</li><li>如果重新打包,会导致所有的缓存失效</li></ol></li><li><strong>chunkhash</strong>:根据chunk生成的hash值。如果打包来源于同一个chunk,那么hash值就一样<ol><li>问题：js和css的hash值还是一样的</li><li>因为css是在js中被引入的,所以同属于一个chunk</li></ol></li><li><strong>contenthash</strong>:根据文件的内容生成hash值。不同文件的hash值一定不一样</li></ul><blockquote><p>例如:<code>css/built.[contenthash:10].css</code></p></blockquote><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h3><blockquote><p><strong>tree shaking</strong>:去除无用代码</p></blockquote><ul><li>前提:<ol><li>必须使用ES6模块化 </li><li>开启production环境</li></ol></li><li>配置:在<code>package.json</code>中配置<code>sideEffects</code>属性<ul><li><code>&quot;sideEffects&quot;:false</code>,所有的代码都沒有副作用(都可以進行tree shaking)<ul><li>但是可能会把<code>css/@babel/polyfil</code>(有副作用)文件干掉</li></ul></li><li><code>&quot;sideEffects&quot;:[&quot;*.css&quot;,&quot;*.less&quot;]</code></li></ul></li></ul><h3 id="code-split-代码分割"><a href="#code-split-代码分割" class="headerlink" title="code split(代码分割)"></a>code split(代码分割)</h3><ul><li>多入口:每有一个入口就会输出一个js入口文件</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  index<span class="token operator">:</span> <span class="token string">"./src/js/index.js"</span><span class="token punctuation">,</span>  test<span class="token operator">:</span><span class="token string">"./src/js/test.js"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以将<code>node_modules</code>中的代码单独打包一个chunk最终输出.自动分析多入口chunk中,有没有公共的文件.如果有会打包成一个公共的文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">optimization<span class="token operator">:</span><span class="token punctuation">&#123;</span>  splitChunks<span class="token operator">:</span><span class="token punctuation">&#123;</span>    chunks<span class="token operator">:</span><span class="token string">"all"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lazy-loading"><a href="#lazy-loading" class="headerlink" title="lazy loading"></a>lazy loading</h3><ul><li>懒加载(现在es6已经支持):当文件需要用的时候才加载</li><li>预加载prefetch:等其他资源加载完毕,等浏览器空闲,再偷偷加载资源</li><li>正常加载可以认为是并行加载(同一时间可以加载多个文件)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>mul<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p><code>workbox-webpack-plugin</code>:渐进式网络开发应用程序</p></blockquote><ol><li>帮助serviceworker快速启动</li><li>删除旧的serviceworker</li><li>生成一个serviceworker配置文件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">WorkboxWebpackPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> clientsClaim<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> skipWaiting<span class="token operator">:</span><span class="token boolean">true</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h3><blockquote><p>进程启动大概约600ms,进程通信也有开销.只有工作消耗时间比较长,才需要多进程打包</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span><span class="token string">"thread-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span><span class="token punctuation">&#123;</span>      workers<span class="token operator">:</span><span class="token number">2</span><span class="token comment">//进程2个</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><blockquote><p>拒绝某个包被打包起来</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  externals<span class="token operator">:</span><span class="token punctuation">&#123;</span>    jQuery<span class="token operator">:</span><span class="token string">"jQuery"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><blockquote><p>使用dll技术,对某些库(第三方库:jquery、react、vue…)进行单独打包</p></blockquote><ul><li>直接运行webpack时,默认查找 <code>webpack.config.js</code> 配置文件</li><li>需求：需要运行<code>webpack.dll.js</code>文件:<code>webpack --config webpack.dll.js</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 最终打包生成的[name] --> jquery</span>    <span class="token comment">// ['jquery'] --> 要打包的库是jquery</span>    jquery<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    library<span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span> <span class="token comment">// 打包的库里面向外暴露出去的内容叫什么名字</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 打包生成一个 manifest.json --> 提供和jquery映射</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span><span class="token punctuation">,</span> <span class="token comment">// 映射库的暴露的内容名称</span>      path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll/manifest.json'</span><span class="token punctuation">)</span> <span class="token comment">// 输出文件路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同环境的区分"><a href="#不同环境的区分" class="headerlink" title="不同环境的区分"></a>不同环境的区分</h2><blockquote><p>配置相同的入口文件,配置不同的脚本参数区分他们</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack --config ./config/prod.config --env production"</span><span class="token punctuation">,</span>  <span class="token property">"serve"</span><span class="token operator">:</span><span class="token string">"webpack serve --config ./config/dev.config"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>区分环境的配置</p></blockquote><ul><li>将文件的共同部分分离<ul><li><code>webpack.comm.conf.js</code>:开发和生产环境的共同部分</li><li><code>webpack.dev.conf.js</code>:开发环境的配置</li><li><code>webpack.prod.conf.js</code>:生产环境的配置</li></ul></li><li>用到<code>webpack-merge</code>包将代码整合<ul><li>merge函数第一个传入要整合的对象,第二个为自己特有配置编写</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>merge<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.comm.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>入口文件(<code>entry</code>)的解析规则</p></blockquote><ul><li>如果将webpack写在config目录中,<span style="color:red">并不需要</span>将<code>entry:./src/main.js</code>改成<code>entry:../src/main.js</code></li><li>入口文件与webpack暴露出的一个api<code>context</code>有关</li><li><code>context</code>默认是解析入口和加载器<code>loader</code></li><li>所以入口文件的解析默认是webpack的启动目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2021/11/08/ji-suan-ji-wang-luo-ying-yong-ceng/"/>
      <url>/2021/11/08/ji-suan-ji-wang-luo-ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><ul><li>应用进程交换的报文类型,如<strong>请求报文</strong>和<strong>响应报文</strong></li><li>各种报文类型的语法,如报文中各个字段极其响应描述</li><li>字段的语义,即包含在字段中的各个字段极其详细描述</li><li>进程何时,如何发送报文,以及对报文进行响应的规则</li></ul><blockquote><p>应用层协议只是网络应用的一部分.应用层的许多协议都是基于客户服务其方式</p></blockquote><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><blockquote><p>DNS-从域名解析出ip地址</p></blockquote><ul><li>把待解析的域名放在DNS请求报文中,以UDP用户数据报方式发给本地域名服务器.<ul><li>本地域名服务器找到域名后,把对应的ip地址放在回答报文中返回</li><li>应用进程获得目的主机的ip地址后即可进行通信</li></ul></li><li>若本地域名服务器不能回答该请求<ul><li>则此服务器端暂时成为DNS的另一个客户,并向其它域名发送查询请求</li></ul></li></ul><blockquote><p>DNS高效率:DNS的大部分名字都在本地进行解析,仅少量的解析需要在互联网上通信.</p></blockquote><ul><li><code>mail.cctv.com</code><ul><li><code>mail</code>是三级域名</li><li><code>cctv</code>是二级域名</li><li><code>com</code>是一级域名</li></ul></li></ul><h3 id="万维网-www"><a href="#万维网-www" class="headerlink" title="万维网(www)"></a>万维网(www)</h3><blockquote><ul><li>万维网是一个大规模的,联机式的信息储藏所,简称Web</li><li>万维网是一个分布式的超媒体系统,他是超文本系统的扩充</li></ul></blockquote><ul><li>万维网以客户服务器的方式工作<ul><li>客户程序向服务程序发出请求,服务程序向客户程序送回客户所要的万维网文档<ul><li><code>超文本文档</code>仅包含文本信息</li><li><code>超媒体文档</code>还包含其它表示方式的信息,如图像,声音,视频等</li></ul></li><li>如何标志分布在整个互联网上的万维网文档<ul><li>统一资源定位符<strong>URI</strong></li></ul></li><li>用什么样的协议实现万维网上的各种链接<ul><li>超文本传输协议(<code>HTTP</code>)</li></ul></li><li>如何使用户能方便找到用户信息<ul><li>使用<strong>超文本标记语言HTML</strong></li></ul></li></ul></li></ul><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><blockquote><p>URI:统一资源标识符,URI包含URL和URN,由于URL过于普及,默认作为URI</p></blockquote><ul><li><p>URL:统一资源定位符</p></li><li><p>URN:统一资源名称</p></li><li><p>例:例如一个文件<code>a.html</code>可以用<code>https://www.baidu.com/a.html</code>  </p><ul><li>也可以用<code>URN</code>:<code>urn:a:1535-3613</code></li></ul></li><li><p><img src="./URI.png" alt="URI"></p></li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>scheme</td><td>协议名,比如http, https</td></tr><tr><td>user:passwd@</td><td>登录主机时的用户信息,不过很不安全,不推荐使用,也不常用</td></tr><tr><td>host:port</td><td>主机名(<strong>域名或者IP地址</strong>)和端口</td></tr><tr><td>path</td><td>请求路径,标记资源所在位置</td></tr><tr><td>query</td><td>查询参数,为<code>key=val</code>这种形式,多个键值对之间用&amp;隔开</td></tr><tr><td>fragment</td><td>URI 所定位的资源内的一个锚点,浏览器可以根据这个锚点跳转到对应的位置</td></tr></tbody></table><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/http/003.html#uri-%E7%9A%84%E7%BB%93%E6%9E%84">https://sanyuan0704.top/blogs/net/http/003.html#uri-%E7%9A%84%E7%BB%93%E6%9E%84</a></p></blockquote><ul><li><code>https</code>就是<code>scheme</code></li><li><code>sanyuan0704.top</code>就是<code>host:port</code>,(http,https)默认端口是80,443可以省略不写</li><li><code>/blogs/net/http/003.html</code>就是<code>path</code></li><li><code>uri-%E7%9A%84%E7%BB%93%E6%9E%84</code>就是<code>fragment</code></li></ul><blockquote><p>关于URI编码</p></blockquote><ul><li>URI只能使用ASCII, ASCII之外的字符是不支持显示的,而且还有一部分符号是界定符,如果不加以处理就会导致解析出错.<ul><li>URI引入了编码机制,将所有非ASCII码字符和界定符转为十六进制字节值,然后在前面加个%.</li><li>空格被转义成了%20,<code>的结构</code>就被转译成<code>%E7%9A%84%E7%BB%93%E6%9E%84</code></li></ul></li></ul><h3 id="HTTP的操作过程-特点"><a href="#HTTP的操作过程-特点" class="headerlink" title="HTTP的操作过程(特点)"></a>HTTP的操作过程(特点)</h3><blockquote><p>每个万维网的网点都有一个服务进程,他不断的监听<code>TCP</code>的端口<code>80</code>,一遍发现浏览器向它发出连接建立请求</p></blockquote><ul><li><p><strong>HTTP的协议本身是无连接的</strong></p><ol><li>HTTP使用了面向连接的TCP作为传输层协议,保证数据的可靠传输</li><li>虽然HTTP使用TCP连接,但通信的双方在交换HTTP报文之前不需要先建立HTTP建立</li></ol></li><li><p><strong>HTTP协议是无状态的</strong>  </p><ol><li>协议对于事务处理没有记忆能力</li><li>同一个客户第二次访问同一个服务器上的页面时,服务器响应与第一次访问时相同</li><li>每次的请求都是独立的,它的执行情况和结果与前面的请求和之后的请求是无直接关系的,它不会受前面的请求应答情况直接影响,也不会直接影响后面的请求应答情况(<code>无直接联系</code>)</li><li>服务器中没有保存客户端的状态,客户端必须每次带上自己的状态去请求服务器</li></ol></li><li><p><strong>明文传输</strong></p><ol><li>即协议里的报文(主要指头部)不使用二进制数据.而是文本形式</li><li>方便调试的同时,HTTP的报文信息暴露给了外界,给攻击者也提供了便利</li></ol></li><li><p><strong>队头阻塞问题</strong></p><ol><li>http开启长连接时,使用同一个TCP连接</li><li>同一时刻只能处理同一个请求,当前请求时间过长,其它请求只能处于阻塞状态</li></ol></li><li><p><strong>HTTP协议首先要和服务器建立TCP连接</strong></p><ol><li>建立TCP连接三次握手的前面两部分完成后(即经过了一个RTT时间后)</li><li>万维网客户就把HTTP请求报文,<strong>作为建立TCP连接的第三个报文</strong>的数据发送给万维网数据</li><li>服务器收到HTTP请求报文后,就把所请求的文档作文响应报文返回给客户</li></ol></li></ul><p><img src="./%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3%E6%89%80%E9%9C%80%E7%9A%84%E6%97%B6%E9%97%B4.png" alt="请求一个文档所需的时间"></p><ul><li>该文档的传输时间(与文档大小成正比)加上两倍往返时间(RTT)<ul><li>一个RTT用于连接TCP连接</li><li>另一个RTT用于请求和接收万维网文档</li><li>TCP建立的第三个报文段中的数据就是客户端对万维网的请求报文</li></ul></li></ul><h3 id="串行连接、持久连接、管道化持久连接、http-x2F-2-0多路复用简介"><a href="#串行连接、持久连接、管道化持久连接、http-x2F-2-0多路复用简介" class="headerlink" title="串行连接、持久连接、管道化持久连接、http&#x2F;2.0多路复用简介"></a>串行连接、持久连接、管道化持久连接、http&#x2F;2.0多路复用简介</h3><ul><li><p><strong>串行连接</strong>:HTTP有<code>无连接的特性,即每次连接只能处理一个请求,收到响应后立即断开连接</code>.<code>HTTP/1.0</code>版本称为<strong>串行连接或短连接、短轮询</strong>中每次HTTP通信后都要断开TCP连接,所以每个新的HTTP请求都需要建立一个新的连接.但在现在网站动则几十条HTTP请求的情况下,很容易达到浏览器请求上限,并且每次请求都建立新的tcp连接(每次都有三次握手四次挥别)<span style="color:red">极大的增加了通信开销</span>.</p></li><li><p><strong>持久连接</strong>:为解决这个问题,有人提出了<code>持久连接(也叫长连接、长轮询)</code>.一定时间内,同一域名下的HTTP请求,只要两端都没有提出断开连接,则<strong>持久保持TCP连接状态</strong>,其他请求可以<code>复用这个连接通道</code>.<code>HTTP/1.1</code> 实现并<u style="color:red">默认了所有连接都是持久连接</u>,这样客户端发起多个HTTP请求时就减少了TCP握手造成的网络资源和通信时间的浪费.<span style="color:red">但是持久连接采用阻塞模式,下次请求必须等到上次响应返回后才能发起,如果上次的请求还没返回响应内容,下次请求就只能等着</span>(就是常说的线头阻塞)</p></li><li><p><strong>管道化持久连接</strong>:管道化则可以不用等待响应返回而发送下个请求并按顺序返回响应,现代浏览器并未默认开启管道化.</p></li><li><p><strong>HTTP&#x2F;2.0多路复用</strong>： 每个HTTP请求都有一个<strong>序列标识符</strong>,这样浏览器可以并发多个请求,服务器接收到数据后,再根据序列标识符重新排序成不同的请求报文,而不会导致数据错乱.同样,服务端也可以并发返回多个响应给浏览器,浏览器收到后根据序列标识重新排序并归入各自的请求的响应报文.<span style="color:red">并且同一个域名下的所有请求都复用同一个TCP连接,极大增加了服务器处理并发的上限</span>.</p></li><li><p><strong>WebSocket</strong>： WebSocket是HTML5提出的一种客户端和服务端通讯的全双工协议,由客户端发起请求,<u>建立连接之后不仅客户端可以主动向服务端发送请求,服务端可以主动向客户端推送信息.</u></p></li></ul><p><img src="./%E8%BF%9E%E6%8E%A5.jpg" alt="连接"></p><blockquote><p>参考:<a href="https://juejin.cn/post/6844903844216832007#heading-3">https://juejin.cn/post/6844903844216832007#heading-3</a></p></blockquote><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><ul><li>代理服务器相当于中间人<ul><li>它既可以当作客户端发送请求,也可以当作服务端响应请求</li></ul></li></ul><p><img src="./%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="代理服务器"></p><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><blockquote><p>HTTP&#x2F;2而言性能的提升主要两点:</p></blockquote><ul><li>头部压缩</li><li>多路复用</li></ul><h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><ul><li>关于请求体压缩的方式<ul><li>使用<code>Content-Encoding</code>可以指定头部字段来指定请求体响应的压缩编码过程</li></ul></li><li>HTTP&#x2F;2针对头部字段,也采用对应的压缩算法–<strong>HPACK</strong>,对请求头进行压缩</li></ul><blockquote><p>HPACK算法专门为HTTP&#x2F;2服务</p></blockquote><ul><li>首先是在服务器和客户端之间建立哈希表,将用到的字段存放在这张表中,那么在传输的时候对于之前出现过的值,只需要把索引(比如0,1,2,…)传给对方即可,对方拿到索引查表就行了.</li></ul><p><img src="./%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9.png" alt="头部压缩"></p><blockquote><p>HTTP&#x2F;2 当中废除了起始行的概念,将起始行中的请求方法、URI、状态码转换成了头字段,不过这些字段都有一个”:”前缀,用来和其它请求头区分开.</p></blockquote><ul><li>参考:<a href="https://sanyuan0704.top/blogs/net/http/017.html#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9">https://sanyuan0704.top/blogs/net/http/017.html#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9</a></li></ul><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><blockquote><p>在HTTP&#x2F;2中,有两个非常重要的概念,分别是帧<code>frame</code>和流<code>stream</code>,理解这两个概念是理解下面多路复用的前提.<strong>帧代表数据传输的最小的单位</strong>,每个帧都有序列标识表明该帧属于哪个流,<strong>流也就是多个帧组成的数据流</strong>,每个流表示一个请求.</p></blockquote><ul><li><p>http队头阻塞:在同一个 TCP 长连接中，前面的请求没有得到响应，后面的请求就会被阻塞</p><ul><li>解决1:使用<strong>并发连接</strong>和<strong>域名分片</strong>的方式来解决,<span style="color:red">只是增加了 TCP 连接,并没有解决HTTP层面的问题</span></li></ul></li><li><p>HTTP&#x2F;2 便从 HTTP 协议本身解决了队头阻塞问题。</p></li><li><p>注意，这里并不是指的<code>TCP队头阻塞</code>，而是<code>HTTP队头阻塞</code>，两者并不是一回事。<u>TCP的队头阻塞是在数据包层面，单位是数据包</u>，前一个报文没有收到便不会将后面收到的报文上传给 HTTP，而HTTP 的队头阻塞是在 HTTP <strong>请求-响应层面</strong>，前一个请求没处理完，后面的请求就要阻塞住。两者所在的层次不一样。</p></li></ul><blockquote><p>解决对头阻塞的问题(二进制分帧)</p></blockquote><ul><li>首先HTTP&#x2F;2之前使用的明文传输,不方便计算机的解析.列如回车换行是内容还是分割符,所以HTTP&#x2F;2就把报文全部转换为二进制<ul><li>将<code>Headers + Body</code>的报文格式如今被拆分成了一个个二进制的帧</li><li>用Headers帧存放头部字段，Data帧存放请求体数据</li><li>分帧之后不再是一个个完整的HTTP请求报文,而是一堆乱序的二进制帧</li><li>二进制帧没有先后关系,也不存在队头阻塞</li></ul></li></ul><blockquote><p>关于通信双方给对方互相发送的二进制帧的双向传输的序列就是<strong>流(stream)</strong>.HTTP&#x2F;2 </p></blockquote><ul><li><strong>多路复用</strong>:用<strong>流</strong>来在一个 TCP 连接上来进行多个数据帧的通信</li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/http/017.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7">https://sanyuan0704.top/blogs/net/http/017.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7</a></p></blockquote><h3 id="http报文属性"><a href="#http报文属性" class="headerlink" title="http报文属性"></a>http报文属性</h3><ul><li><a href="http://mail.zyjcould.ltd/2021/09/20/nodejs-ji-wang-luo-qing-qiu/">http://mail.zyjcould.ltd/2021/09/20/nodejs-ji-wang-luo-qing-qiu/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-传输层</title>
      <link href="/2021/11/04/ji-suan-ji-wang-luo-chuan-shu-ceng/"/>
      <url>/2021/11/04/ji-suan-ji-wang-luo-chuan-shu-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="关于计算机网络的体系结构"><a href="#关于计算机网络的体系结构" class="headerlink" title="关于计算机网络的体系结构"></a>关于计算机网络的体系结构</h2> <table>    <tr>        <th>OSI的七层协议</th><th>四层协议</th><th>五层协议</th>    </tr>    <tr>        <td>应用层</td><td rowspan="3">应用层(各种应用层协议TELNENT,FTP,SMTP等)</td><td rowspan="3">应用层</td>    </tr>    <tr>        <td>表示层</td>    </tr>    <tr>        <td>会话层</td>    </tr>    <tr>        <td>传输层(TCP/UDP)</td><td>传输层(TCP/UDP)</td><td>传输层(TCP/UDP)</td>    </tr>    <tr>        <td>网络层IP</td><td>网络层IP</td><td>网络层IP</td>    </tr>    <tr>        <td>数据链路层</td><td rowspan="2">数据链路层</td><td>数据链路层</td>    </tr>    <tr>        <td>物理层</td><td>物理层</td>    </tr></table><ul><li>应用层协议:域名系统:<strong>DNS</strong>,支持万维网应用:<strong>HTTP</strong>,支持电子邮件:<strong>SMTP</strong>…我们把应用层交互的数据单元称为<strong>报文</strong></li><li>传输层:负责两台主机中进程之间的通信提供的数据传输服务<ul><li>TCP(传输控制协议):<span style="color:red">提供面向连接的,可靠的数据传输服务</span>,其数据传输的单位是<strong>报文段</strong></li><li>UDP(用户数据报协议):<span style="color:red">提供无连接的,尽最大努力的数据传输服务(不保证数据传输的可靠性)</span>,其数据传输的单位是<strong>用户数据段</strong></li></ul></li><li>网络层:负责为分组交换网上的不同主机提供通信服务<ul><li>互联网的网络层协议是<strong>无连接的网际协议IP</strong>和多种路由选择协议.</li></ul></li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><ol><li>用户数据报协议(UDP):不需要先建立连接.不提供可靠交付,<strong>但在有些情况下是最有效的</strong></li><li>传输控制协议(TCP):提供面向连接的服务.</li></ol><blockquote><p>举例:使用UDP和TCP协议的某些应用</p></blockquote><table><thead><tr><th>应用</th><th>应用层协议</th><th>运输层协议</th></tr></thead><tbody><tr><td>名字转换</td><td>DNS(域名系统)</td><td>UDP</td></tr><tr><td>文件传送</td><td>TFTP(简单文件传送协议)</td><td>UDP</td></tr><tr><td>IP地址配置</td><td>DHCP(动态主机配置协议)</td><td>UDP</td></tr><tr><td>网络管理</td><td>SNMP(简单网络管理协议)</td><td>UDP</td></tr><tr><td>电子邮件</td><td>SMTP(简单邮件传送协议)</td><td>TCP</td></tr><tr><td>远程终端协议</td><td>TELNET(远程终端协议)</td><td>TCP</td></tr><tr><td>万维网</td><td>HTTP(超文本传输协议)</td><td>TCP</td></tr><tr><td>文件传输</td><td>FTP(文件传输协议)</td><td>TCP</td></tr></tbody></table><blockquote><p>运输层的端口:对于两个计算机相互通信,不仅必须知道对方的IP地址(找到对方的计算机),而且要知道对方的端口号(找到对方计算机中的应用进程)</p></blockquote><ul><li>服务器端使用的端口号<ul><li>熟知端口号或系统端口号,数值:0~1023</li><li>登记端口号:数值1024~49151.这类端口必须在IANA按照规定的手续登记,以防止重复</li></ul></li></ul><table><thead><tr><th>应用程序</th><th>FTP</th><th>HTTP</th><th>DNS</th><th>HTTPS</th><th>…</th></tr></thead><tbody><tr><td>熟知端口号</td><td>21</td><td>80</td><td>53</td><td>443</td><td>…</td></tr></tbody></table><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ol><li><code>源端口</code>:源端口号.在需要对方回信时选用.不需要课全用0</li><li><code>目的端口</code>:目的端口.在终点交付报文时必须使用</li><li><code>长度</code>:UDP用户数据报的长度.其最小值是8(仅有首部)</li><li><code>检验和</code>:检测UDP用户数据报在传输中是否有错.有错就丢弃</li></ol><p><img src="./UDP%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt="UDP报文头部字段"></p><ul><li>UDP传输协议的主要特点<ol><li>UDP是无连接的,发送数据之前是不需要建立连接</li><li>UDP使用尽最大努力交付,不保证可靠交付</li><li>面向报文.即应用层对UDP交付的报文,不管多长,照样发送,即一次发送一个报文</li><li>没有拥塞控制.如(ip电话,实时视屏会议等)要求源主机以恒定的速率发送数据,并且允许在网路拥堵时丢失一些数据</li><li>UDP支持一对一,一对多,多对一,多对多的交互通信</li><li>UDP首部开销小,只有8个字节,比TCP的20个字节的首部要短</li></ol></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ol><li><code>面向连接</code>。所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程。</li><li><code>可靠性</code>。TCP 花了非常多的功夫保证连接的可靠，这个可靠性体现在哪些方面呢？一个是有状态，另一个是可控制。<ul><li>TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是有状态。</li><li>当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是可控制。相应的，UDP 就是无状态, 不可控的。</li></ul></li><li><code>面向字节流</code>。UDP 的数据传输是基于数据报的，这是因为仅仅只是继承了 IP 层的特性，而 TCP 为了维护状态，将一个个 IP 包变成了字节流。</li><li>每一条TCP连接<code>只能有两个端点</code>,每一条TCP连接之间能是点对点的.<ul><li>TCP两端都设有发送缓存和接收缓存,用来临时存放双向通信的数据</li><li>发送数据:应用程序将数据传送给TCP缓存后,就可以做自己的事,tcp会在合适时候发送数据</li><li>接收数据:TCP把收到的数据放入缓存,上层的应用进程在合适的时候读取缓存的数据</li></ul></li><li><code>提供双全工通信</code>.允许通信双方的应用进程在任何时候都能发送数据</li></ol><h3 id="报文头部字段介绍"><a href="#报文头部字段介绍" class="headerlink" title="报文头部字段介绍"></a>报文头部字段介绍</h3><p><img src="./tcp%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5.jpg" alt="tcp报文头部字段"></p><ul><li>TCP的序号和确认号<ol><li>32位序号seq:<code>Sequence number</code>的缩写是seq,TCP通信过程中某一个传输方向上的字节流的每一个字节的序号,通过这个来通过这个来发送的数据是有序的(序列号是一个长为 4 个字节，也就是 32 位的无符号整数)</li><li>32位确认号 ack:<code>Ackonwledge number</code>缩写ack,TCP对上一次seq序号做出的确认号,用来响应TCP的报文段,给收到的</li></ol></li><li>TCP的标志位<blockquote><p>每个TCP段都有一个目的,这是借助于TCP标志位选项来确定的,允许发送方或接收方指定哪些标志应该被使用,以便端被另一端正确处理</p></blockquote><ol><li>SYN:简写为<code>S</code>,同步标志位,用于建立会话连接,同步序列号</li><li>ACK:简写为<code>.</code>,确认标志位,对已接收的数据包进行确认</li><li>FIN:简写为<code>F</code>,完成标志位,表示我已经没有数据要发送,即将关闭连接</li><li>PSH:简写为<code>P</code>,推送标志位,表示该数据包被对方接收后应立即交给上层应用,而不在缓冲区排队</li><li>RST:简写为<code>R</code>,紧急标志位,重置标志位,用于连接复位,拒绝错误和非法的数据包</li><li>URG:简写为<code>U</code>,紧急标志位,表示数据包的紧急指针域有效,用来保证连接不被阻断,并督促中间设备尽快处理</li></ol></li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/005.html#%E5%BA%8F%E5%88%97%E5%8F%B7">https://sanyuan0704.top/blogs/net/tcp/005.html#%E5%BA%8F%E5%88%97%E5%8F%B7</a></p></blockquote><h3 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h3><blockquote><p>模拟三次握手:TCP 三次握手跟现实生活中的人与人打电话是很类似的</p></blockquote><ul><li>三次握手</li><li>“你好，听到吗”</li><li>“我听得到啊，你听得到吗?”</li><li>“我能听到你，我在…”</li></ul><p><img src="./tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="tcp三次握手"></p><blockquote><p>第一次握手</p></blockquote><ol><li>客户端将TCP报文标志位SYN位置为1,随机产生一个序号值seq&#x3D;x,并保存在TCP首部的ACK序列号(seq)例,指明客户端打算连接的服务器的端口,并将该数据包发送给服务器端</li><li>发送完毕,客户端进入<code>SYN_SENT</code>状态,等待服务器端确认</li></ol><blockquote><p>第二次握手</p></blockquote><ol><li>服务器端收到数据包后由标志位SYN&#x3D;1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack&#x3D;x+1，随机产生一个序号值seq&#x3D;y，并将该数据包发送给客户端以确认连接请求，</li><li>服务器端进入<code>SYN_RCVD</code>状态</li></ol><blockquote><p>第三次握手</p></blockquote><ol><li>客户端收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack&#x3D;y+1，并将该数据包发送给服务器端，服务器端检查ack是否为y+1，ACK是否为1，</li><li>如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，</li><li>完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</li><li>第三次握手时可以携带数据</li></ol><ul><li>SYN 是需要消耗一个序列号的，下次发送对应的ack(序列号)要加1，为什么呢？只需要记住一个规则:<blockquote><p>凡是需要对端确认的，一定消耗TCP报文的序列号。</p></blockquote></li></ul><blockquote><p>两次握手建立连接的问题:<strong>服务端无法确认客户端的接收能力</strong></p></blockquote><ul><li>第一次握手:服务端确认客户端有发送数据的能力</li><li>第二次握手:客户端确认服务端有接收和发送数据的能力</li><li>第三次握手:服务端端确认客户端有接收数据的能力</li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/002.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1">https://sanyuan0704.top/blogs/net/tcp/002.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1</a></p></blockquote><h3 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h3><blockquote><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开</p></blockquote><ul><li>TCP连接是全双工的，因此，每个方向都必须要单独进行关闭</li><li>这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN</li><li>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭</li></ul><p><img src="./tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.jpg" alt="tcp四次挥手"></p><blockquote><p>第一次挥手</p></blockquote><ul><li>客户端发送挥手请求,向服务端发送的标志位是FIN报文段,设置序列号<strong>seq&#x3D;p</strong></li><li>客户端端进入<code>FIN_WAIT_1</code>状态，这表示客户端端没有数据要发送给服务端</li><li>服务端接收后向客户端确认，变成了<code>CLOSED-WAIT</code>状态</li></ul><blockquote><p>第二次挥手</p></blockquote><ul><li>客户端收到了服务端发送的FIN报文段，向服务端返回一个标志位是<code>ACK</code>的报文段，<strong>ack设为seq加1(ack&#x3D;p+1)</strong></li><li>客户端进入<code>FIN_WAIT_2</code>状态，客户端告诉服务端，我确认并同意你的关闭请求</li></ul><blockquote><p>第三次挥手</p></blockquote><ul><li>客户端向服务端发送标志位是FIN的报文段，请求关闭连接，</li><li>设服务端的<strong>seq&#x3D;q</strong>,<strong>ack&#x3D;p+1</strong>同时服务端进入<code>LAST_ACK</code>状态</li></ul><blockquote><p>第四次挥手</p></blockquote><ul><li>客户端收到服务端发送的FIN报文段，向服务端发送标志位是ACK的报文段，然后客户端进入<code>TIME_WAIT</code>状态。</li><li>服务端收到客户端的ACK报文段以后，就关闭连接。此时，客户端等待2MSL的时间后依然没有收到回复，则证明服务端已正常关闭，</li><li>那客户端也可以关闭连接了</li></ul><blockquote><p>等待2MSL的意义</p></blockquote><ul><li>如果客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。所以，最保险的做法是等服务器发来的数据包都死翘翘再启动新的应用。</li><li>使用2个MSL<ul><li>1个MSL确保四次挥手中主动关闭方最后的<code>ACK</code>报文最终能达到对端</li><li>1个MSL确保对端没有收到ACK重传的<code>FIN</code>报文可以到达</li></ul></li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/003.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%89%E6%AC%A1">https://sanyuan0704.top/blogs/net/tcp/003.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%89%E6%AC%A1</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5标签</title>
      <link href="/2021/10/31/html5-biao-qian/"/>
      <url>/2021/10/31/html5-biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="获取标签属性"><a href="#获取标签属性" class="headerlink" title="获取标签属性"></a>获取标签属性</h2><ul><li><code>console.dir</code>:打印标签的属性</li></ul><blockquote><p>获取display:行内元素还是块级元素</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getDisplay</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html5的标记方法"><a href="#html5的标记方法" class="headerlink" title="html5的标记方法"></a>html5的标记方法</h2><ul><li><p>html5的内容类型</p><ul><li><code>ContentType</code>任然为<code>text/html</code></li></ul></li><li><p><code>DOCTYPE</code>声明</p><ul><li>&lt;!DOCTYPE html&gt;:不需要指定版本</li></ul></li><li><p>指定字符编码</p><ul><li>&lt;meta charset&#x3D;”UTF-8”&gt;,可以直接追加charest属性的方式来指定</li><li>注意:不能将html4中的<code>content</code>元素属性指定和html5中<code>charset</code>指定混写</li></ul></li></ul><h2 id="有关兼容性"><a href="#有关兼容性" class="headerlink" title="有关兼容性"></a>有关兼容性</h2><blockquote><p>HTML5的语法是为了保证之前的HTML语法达到最大的兼容性而设计</p></blockquote><ul><li><p>不允许写结束标记的元素:</p><ul><li>br,hr,img,input,link,meta…</li></ul></li><li><p>可以省略结束标记的元素:</p><ul><li>li,p,option,tr,td,th…</li></ul></li><li><p>可以省略全部标记的元素:</p><ul><li>html,body,head,colgroup,tbody.</li></ul></li><li><p>例:<code>&lt;br&gt;...&lt;/br&gt;</code>是错误的,正确的是&lt;&#x2F;br&gt;,HTML5之前的&lt;br&gt;也是可以的</p></li><li><p>例:可以省略全部标记的元素,如将<code>body</code>元素省略不写,但是<span style="color:red">他在文档结构中还是存在,可以使用<code>document.html</code>访问到</span></p></li></ul><blockquote><p>具有<code>boolean</code>值的属性</p></blockquote><ul><li><p>设置属性为true:</p><ul><li>不写属性值:&lt;input type&#x3D;”checkbox” checked&gt;</li><li>属性值&#x3D;属性名:&lt;input type&#x3D;”checkbox” checked&#x3D;”checked”&gt;</li><li>属性值&#x3D;空字符串:&lt;input type&#x3D;”checkbox” checked&#x3D;””&gt;</li></ul></li><li><p>设置属性为false:</p><ul><li>不写属性值:&lt;input type&#x3D;”checkbox”&gt;</li></ul></li><li><p><code>hidden</code>:元素的隐藏与显示.不会影响别的元素(可以看做<code>display:none</code>的简写)</p></li><li><p><code>contentEditable</code>:使元素变成可更改的.富文本操作的原理</p><ul><li><code>document.body.contentEditable=true</code>:使整个页面可更改</li></ul></li></ul><h2 id="html5结构"><a href="#html5结构" class="headerlink" title="html5结构"></a>html5结构</h2><blockquote><p>关于内容区块的编排,可以分为<strong>显示编排</strong>和<strong>隐式编排</strong></p></blockquote><ul><li>显示编排值明确使用section等元素创建文档结构</li><li>隐式编排值不明确使用section等元素</li></ul><blockquote><p>标题分级</p></blockquote><ul><li>隐式编排的规则<ul><li>如果新出现的标题比上一个标题级别低,生成下级内容区块</li><li>如果新出现的标题比上一个标题级别搞或相等,生成新的内容区块</li></ul></li></ul><blockquote><p>不同内容的区块可以使用相同级别的标题</p></blockquote><ul><li>父内容区块和子内容区块可以使用相同级别的标题,例如h1<ul><li>优点:每个级别的标题都可以单独设计</li></ul></li></ul><h2 id="新增的元素"><a href="#新增的元素" class="headerlink" title="新增的元素"></a>新增的元素</h2><h3 id="新增的结构元素"><a href="#新增的结构元素" class="headerlink" title="新增的结构元素"></a>新增的结构元素</h3><blockquote><p>章节,页眉,页脚或页面中的其它部分,可以与h1,h2,h3,h4,h5,h6</p><blockquote><p>取代的是&lt;div&gt;…&lt;&#x2F;div&gt;</p></blockquote></blockquote><ol><li>&lt;section&gt;…&lt;&#x2F;section&gt;:<strong>分段分块</strong><ul><li>对网站或者应用程序中页面上的内容进行分块</li><li>注意:<ul><li>当一个容器需要被直接定义样式或者通过脚本定义行为是,推荐使用div而非section</li><li>不推荐为那些没有标题的内同使用section</li></ul></li></ul></li><li>&lt;article&gt;…&lt;&#x2F;article&gt;:<strong>强调独立性</strong><ul><li>代表文档,页面或者应用程序中独立的,完整的,可以独自被外部引用的内容</li><li>可以为博客或报刊中的文中,独立的帖子,独立的插件或者任意独立的内容</li><li>注意:<ol><li>将所有页面从属部分,譬如导航条,菜单,版权说明等包含在一个统一的页面,以便统一使用CSS样式来进行装饰</li><li>不要将section元素用作<span style="color:red">设置样式的页面容器</span>,那是div元素的工作</li><li>如果article,aside或nav更符合使用条件,不要使用section元素</li><li>不要为没有标题的内容区块使用section元素</li></ol></li></ul></li><li>&lt;nav&gt;…&lt;&#x2F;nav&gt;取代的是:&lt;ul&gt;&lt;&#x2F;ul&gt;<ul><li>用作页面导航的链接组</li><li>只需要将主要的,基本的链接组放进nav元素</li><li>一个页面可以使用多个nav</li></ul></li><li>&lt;aside&gt;…&lt;&#x2F;aside&gt;<ul><li>表示当前页面的附属信息部分</li><li>可以包含当前页面或主要内容相关的引用,侧边栏,广告等有别于主要内容</li></ul></li><li>&lt;time&gt;&lt;&#x2F;time&gt;,取代的&lt;span&gt;&lt;&#x2F;span&gt;<ul><li>表示24小时某个时刻或者某个日期</li></ul></li></ol><h3 id="新增的非主体结构元素"><a href="#新增的非主体结构元素" class="headerlink" title="新增的非主体结构元素"></a>新增的非主体结构元素</h3><ul><li>&lt;header&gt;…&lt;&#x2F;header&gt;<ul><li>引导和导航作用的结构元素,通常防止整个页面或页面中的一个内容区块的标题</li><li>例如数据表格,搜索表单或相关的logo</li></ul></li><li>&lt;hgroup&gt;…&lt;&#x2F;hgroup&gt;<ul><li>将标题极其子标题进行分组的元素</li></ul></li><li>&lt;footer&gt;…&lt;&#x2F;footer&gt;<ul><li>可以作为上层父级内容区块或是一个跟区块的脚注</li><li>通常包括起教官区块的脚注信息,如作者,相关阅读链接等</li></ul></li><li>&lt;address&gt;…&lt;&#x2F;address&gt;<ul><li>用来在文档中呈现联系信息,包括文档作者或文档维护者的网站链接,电子邮箱,名字,手机号等</li></ul></li></ul><blockquote><p>figure元素:表示一段独立的流内容,一般表示文档主体流内容中的一个独立单元.使用<code>figcaption</code>元素为figure元素组添加标签</p></blockquote><ul><li>html5中代码示例</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>PRC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>zzzzzzzzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>html4中代码示例:</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>prc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>zzzzzzzzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新增的其它元素"><a href="#新增的其它元素" class="headerlink" title="新增的其它元素"></a>新增的其它元素</h3><ul><li>video元素定义视频,比如电影片段或其它视频流:<ul><li>&lt;video src&#x3D;”moive.ogg” controls&#x3D;”controls”&gt;video元素&lt;&#x2F;video&gt;</li></ul></li><li>audio元素定义音频:<ul><li>&lt;audio src&#x3D;”someaudio.wav”&gt;audio元素&lt;&#x2F;audio&gt;</li></ul></li><li>embed元素用来插入各种多媒体,格式可以是Midi,Wav,AIFF,AU,MP3:<ul><li>&lt;embed src&#x3D;”horse.wav”&gt;&lt;&#x2F;embed&gt;</li></ul></li><li>mark元素主要用来在视觉上向用户呈现那些需要突出显示或高亮显示的文字<ul><li>&lt;mark&gt;&lt;&#x2F;mark&gt;取代&lt;span&gt;&lt;&#x2F;span&gt;</li></ul></li><li>progress元素表示JavaScript中耗费时间的函数的进程<ul><li>&lt;progress&gt;&lt;&#x2F;progress&gt;,需要使用js脚本控制</li></ul></li><li>meter元素规定范围内的数值  <ul><li>&lt;meter&gt;&lt;&#x2F;meter&gt;</li></ul></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>表示出来的实际值</td></tr><tr><td>min</td><td>规定范围是允许使用的最小值</td></tr><tr><td>max</td><td>规定范围是允许使用的最大值</td></tr><tr><td>low</td><td>规定范围的下限值,必须小于high属性值</td></tr><tr><td>high</td><td>规定范围上限值</td></tr><tr><td>optimum</td><td>最佳值,属性值必须在min与max之间</td></tr></tbody></table><ul><li><p>注意:</p><ul><li>如果low属性值小于min属性值,把min属性值视为low属性的值</li><li>如果high属性大于max属性,把max属性的值视为high属性的值</li></ul></li><li><p>wbr元素表示软换行,</p><ul><li>br是必须换行</li><li>wbr是浏览器窗口或父级元素的宽度足够宽时(没必要换行时),不进行换行,当宽度不够,主动进行换行(对中文没有啥用)</li></ul></li><li><p>canvas:本身没有行为,只提供一块画布,但他把一块绘图api展现给客户端js,使脚本能够把向蕙质的东西绘制这块画布上</p></li><li><p>command元素表示命令暗流,比如单选框,复选框,或者按钮(只有ie支持)</p><ul><li>该元素必须在menu元素中</li></ul></li><li><p>menu指元素表示菜单列表.希望列出表单控件时使用该元素</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>command<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Save<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>command</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>datalist元素表示可选数据列表,与input元素配合使用,可以制作输入值的下拉列表<ul><li>&lt;datalist&gt;&lt;&#x2F;datalist&gt;</li></ul></li><li>datagrid表示可选数据列表,他以树形列表的形式来显示<ul><li>&lt;datagrid&gt;&lt;&#x2F;datagrid&gt;</li></ul></li><li>keygen元素表示生成密钥<ul><li>&lt;keygen&gt;</li></ul></li><li>source元素为媒介元素(如&lt;video&gt;和&lt;audio&gt;)定义媒介资源<ul><li>&lt;source&gt;</li></ul></li></ul><h3 id="音频视频标签"><a href="#音频视频标签" class="headerlink" title="音频视频标签"></a>音频视频标签</h3><ol><li><p>视频标签</p><ul><li><code>&lt;video src=&quot;url&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code>视频标签</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(谷歌浏览器需要添加<code>muted=&quot;muted&quot;</code>来解决)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>proload</td><td>是否等加载完再播放</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>Imgurl</td><td>加载等待的画面图片</td></tr><tr><td>autobuffer</td><td>autobuffer</td><td>设置为浏览器缓冲方式，不设置autopaly才有效</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table></li><li><p>音频标签</p><ul><li><code>&lt;audio src=&quot;url&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</code>音频标签</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪自动播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该音频，循环播放</td></tr><tr><td>src</td><td>url</td><td>音频url地址</td></tr></tbody></table><ul><li>注意:谷歌浏览器把音频和视频自动播放禁止了</li></ul></li></ol><h3 id="新增的input类型"><a href="#新增的input类型" class="headerlink" title="新增的input类型"></a>新增的input类型</h3><blockquote><p>表示必须输入什么样的类型</p></blockquote><table><thead><tr><th>email</th><th>邮件地址</th></tr></thead><tbody><tr><td>url</td><td>URL地址</td></tr><tr><td>number</td><td>数值的文本输入框</td></tr><tr><td>range</td><td>一定范围内数字值的文本输入框</td></tr><tr><td>Date</td><td>日期类…</td></tr><tr><td>file</td><td>上传文件</td></tr></tbody></table><h3 id="新增的属性"><a href="#新增的属性" class="headerlink" title="新增的属性"></a>新增的属性</h3><blockquote><p>表单相关的属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>autofocus</td><td>画面打开自动获取焦点</td><td>input,select,textarea,button</td></tr><tr><td>placeholder</td><td>对用户输入进行提示内容</td><td>input,textarea</td></tr><tr><td>form</td><td>声明它属于哪个表单,可以不放在表单内,属性值为该表单id</td><td>input,select,textarea,button…</td></tr><tr><td>multiple</td><td>允许上传文件一次上传多个</td><td>input</td></tr><tr><td>required</td><td>提交时,检查该元素内一定要有内容</td><td>input,textarea</td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table><ul><li>input与button新增属性:<ul><li><code>formaction</code>重载action:传入一个url</li><li><code>formenctype</code>重载enctype:设置请求头中的<code>content-type</code></li><li><code>formmethod</code>重载method:设置请求方法</li></ul></li></ul><blockquote><p>链接相关的属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>media</td><td>规定目标url时为什么类型的媒介进行优化,只能在href属性存在时使用</td><td>a</td></tr><tr><td>sizes</td><td>与icons元素结合使用(通过rel属性),指定关联(icons元素)的大小</td><td>link</td></tr></tbody></table><blockquote><p>其它属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>reversed</td><td>列表倒序显示</td><td>ol</td></tr><tr><td>charset</td><td>文档的字符编码</td><td>meta</td></tr><tr><td>scoped</td><td>规定样式的作用域范围</td><td>style</td></tr><tr><td>async</td><td>脚本是否异步执行</td><td>script</td></tr><tr><td>sandbox,seamless,srcdoc</td><td>提高页面的安全性</td><td>iframe</td></tr></tbody></table><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><blockquote><p><strong>hidden</strong>属性:通值浏览器不渲染该元素,使用元素处于不可见状态</p></blockquote><ul><li>允许使用js脚本将该属性取消<ul><li>设置为true:元素处于不可见的状态</li><li>设置为false:元素处于可见的状态</li></ul></li></ul><blockquote><p><strong>spellcheck</strong>:针对<code>input</code>和<code>textarea</code>,对用户输入的文本内容进行拼写和语法检查</p></blockquote><ul><li>必须明确提供true和false<ul><li>正确:&lt;textarea spellcheck&#x3D;”true”&gt;</li><li>错误:&lt;textarea spellcheck&gt;</li></ul></li><li>注意: 如果元素的<code>readOnly</code>或者<code>disabled</code>属性设为true,则不进行检查</li></ul><blockquote><p><strong>designMode</strong>和<strong>contentEditable</strong>(略)</p></blockquote><h2 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>在html5中可以直接使用id的签名获取标签对象</p></li><li><p>如果只有一个不重名的name属性,使用<code>document.name</code>会获取该对象</p><ul><li>如果有多个重名的name属性,会<span style="color:red">获取一个数组</span>(这个方式就是<code>nameItem()</code>的简写)</li><li>同样可以使用<code>document.forms.namedItem(&#39;test&#39;)</code>获取元素,’test’是<code>name</code>属性的名称<ul><li>如果<strong>有重名的name属性</strong>,只会获取第一个name属性</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>test <span class="token operator">===</span> form<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>document.forms</code>获得的是一个表单的集合(<code>HTMLCollection</code>)</p><ul><li>可以使用索引的方式:<code>document.forms[0]</code>.其实这也就是<code>document.forms.item(0)</code>的属性的简写</li></ul></li></ol><blockquote><p>获取表单的元素.同样,由于forms返回的是<code>HTMLCollections</code>,完全可以使用Item,nameItem()等或者简写的方式</p></blockquote><ul><li><p>当然同样可以使用id元素或者索引来获取元素</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>accountOne <span class="token operator">===</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>和表单元素不同的是,获取表单内元素需要使用<code>elements</code>属性</p><ul><li>可以使用<code>name</code>属性的名称来获取表单元素</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token string">"account"</span><span class="token punctuation">]</span> <span class="token operator">===</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>account<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><blockquote><p><code>required</code>可用在大多数元素上(除了隐藏元素,图片元素按钮上)</p></blockquote><ul><li>如果元素内容为空白,则不允许提交</li></ul><blockquote><p><code>pattern</code>的属性值为一个正则表达式,在提交时会检查是否符合给定格式</p></blockquote><ul><li>适用于input元素中email,number,url等</li></ul><blockquote><p>mix和max属性:数值类型或日期类型的input元素专用属性</p></blockquote><ul><li>限制输入的数值与日期的范围</li></ul><blockquote><p>step属性控制input元素中的值增加或减少的步幅</p></blockquote><h2 id="文件API"><a href="#文件API" class="headerlink" title="文件API"></a>文件API</h2><blockquote><p>添加multiple属性,file控件内允许一次放置多个文件</p></blockquote><h3 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h3><blockquote><p>Blob表示二进制数据,提供一个slice方法,通过该方法可以访问到字节内部的原始数据块</p></blockquote><ul><li>size属性表示一个Blob对象的字节长度</li><li>type属性表示MIME类型,如果是未知类型,返回一个空字符串</li></ul><h3 id="FileReader接口"><a href="#FileReader接口" class="headerlink" title="FileReader接口"></a>FileReader接口</h3><blockquote><p>用于把文件读入内存,并且读取文件中的数据.且提供了一个异步API,使用该API可以在浏览器主线程中异步访问文件系统,读取文件中的数据</p></blockquote><ul><li>在js脚本中<code>new FileReader()</code></li></ul><blockquote><p>接口的方法</p></blockquote><table><thead><tr><th>方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>readAsBinaryString</td><td>file</td><td>将文件读取为二进制码,传送到后端,后端通过这段字符串存储文件</td></tr><tr><td>readAsText</td><td>file,[encoding]</td><td>将文件读取为文本,默认值UTF-8</td></tr><tr><td>readAsDataURL</td><td>file</td><td>将文件读取为DataURL,是将雄安文件以一种特殊格式的URL地址直接读入页面</td></tr><tr><td>abort</td><td>(none)</td><td>终断读取操作</td></tr></tbody></table><blockquote><p>接口的事件</p></blockquote><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>读取数据中断时触发</td></tr><tr><td>onerror</td><td>读取数据出错时触发</td></tr><tr><td>onloadstart</td><td>读取数据开始时触发</td></tr><tr><td>onprogress</td><td>读取数据中</td></tr><tr><td>onload</td><td>读取数据成功完成时触发</td></tr><tr><td>onloadend</td><td>读取数据完成时触发,无论成功或者失败</td></tr></tbody></table><h2 id="拖放API"><a href="#拖放API" class="headerlink" title="拖放API"></a>拖放API</h2><blockquote><p>实现拖放的步骤</p><blockquote><p>想要拖放对象元素的draggable属性设为true<code>(daggable=&quot;true&quot;)</code>.这样才能时该元素进行拖放.另外img与a元素(必须指定href)默认允许拖放</p></blockquote></blockquote><table><thead><tr><th>事件</th><th>产生事件的元素</th><th>描述</th></tr></thead><tbody><tr><td>dragstart</td><td>被拖放的元素</td><td>开始拖放的操作</td></tr><tr><td>drag</td><td>被拖放的元素</td><td>拖放过程中</td></tr><tr><td>dragenter</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素开始进入本元素的范围内</td></tr><tr><td>dragover</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素正则本元素的范围内移动</td></tr><tr><td>dragleave</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素离开本元素的范围</td></tr><tr><td>drop</td><td>被拖放的元素</td><td>有其他的元素被拖放到本元素中</td></tr><tr><td>dragend</td><td>拖放的对象元素</td><td>拖放操作结束</td></tr></tbody></table><ul><li>拖动处理的MIME类型<ul><li>text&#x2F;plain:文本文字</li><li>text&#x2F;html:HTML文字</li><li>text&#x2F;xml:xml文字</li><li>text&#x2F;url-list:url列表,每个url为一行</li></ul></li></ul><h3 id="DataTransfer对象的属性和方法"><a href="#DataTransfer对象的属性和方法" class="headerlink" title="DataTransfer对象的属性和方法"></a>DataTransfer对象的属性和方法</h3><table><thead><tr><th>属性&#x2F;方法</th><th>描述</th></tr></thead><tbody><tr><td>dropEffect</td><td>拖放操作的视觉效果,允许指定的值为none,copy,link,move</td></tr><tr><td>effectAllowed</td><td>用来指定当元素被拖放时的视觉效果,可以指定none,copy,copyLink,copyMove,link,linkMove,all,unintialize</td></tr><tr><td>types</td><td>存入数据的种类,字符串的伪数组</td></tr><tr><td>clearData(DOMString format)</td><td>清楚DataTransfer对象中存放的数据,省略参数format,则清楚全部数据</td></tr><tr><td>setDragImage(Element image,long x,long y)</td><td>用img元素来设置拖放图标</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署</title>
      <link href="/2021/10/30/fu-wu-qi-bu-shu/"/>
      <url>/2021/10/30/fu-wu-qi-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="关于使用VSCode远程连接服务器"><a href="#关于使用VSCode远程连接服务器" class="headerlink" title="关于使用VSCode远程连接服务器"></a><a href="#%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8">关于使用VSCode远程连接服务器</a></h2><ul><li>首先下载插件<code>Remote-SSH</code><ul><li>打开出现远程资源管理器的图标,按右上角的<code>+</code>,连接服务器</li><li>用ssh连接直接使用ip地址即可(选择user下的.ssh的config配置)</li><li><a href="vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.png">vscode远程连接</a></li><li>…</li></ul></li><li>配置好后,右击服务器,即可连接远程服务器</li></ul><h2 id="项目自动化部署"><a href="#项目自动化部署" class="headerlink" title="项目自动化部署"></a><a href="#%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2">项目自动化部署</a></h2><blockquote><p>传统开发与<code>DevOps</code>开发模式</p></blockquote><ul><li><p><strong>传统开发</strong>的弊病:开发人员在开发阶段，测试和运维人员其实是处于等待的状态</p></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt2wf9lezj60xc0b40u102.jpg" alt="早期的开发模式" style="zoom:67%;" /></li><li><p><strong>DevOps开发模式</strong>Development和Operations两个词的结合，将开发和运维结合起来的模式:</p></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt33f78kdj60fk0fkgmc02.jpg" alt="DevOps模式" style="zoom:67%;" /></li></ul><h3 id="持续集成和持续交付"><a href="#持续集成和持续交付" class="headerlink" title="持续集成和持续交付"></a>持续集成和持续交付</h3><ul><li>CI是<code>Continuous Integration</code>(持续集成)</li><li>CD是两种翻译:<code>Continuous Delivery</code>（持续交付）或<code>Continuous Deployment</code>(持续部署)</li></ul><h3 id="自动化部署流程"><a href="#自动化部署流程" class="headerlink" title="自动化部署流程"></a>自动化部署流程</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt5buus2kj60wu0lgq7002.jpg" alt="自动化部署的流程"></p><h2 id="搭建服务器环境"><a href="#搭建服务器环境" class="headerlink" title="搭建服务器环境"></a><a href="#%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83">搭建服务器环境</a></h2><h3 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a>linux基本命令</h3><table><thead><tr><th>ls</th><th>查看该文件列表</th></tr></thead><tbody><tr><td>cd &#x2F;fileName</td><td>进入fileName文件夹</td></tr><tr><td>cd ~</td><td>进入主用户目录</td></tr><tr><td>cd ..</td><td>返回上级目录</td></tr><tr><td>cd ~</td><td>进入主用户目录</td></tr><tr><td>mkdir &#x2F;fileName</td><td>建立名为fileName文件夹</td></tr><tr><td>touch &#x2F;doc</td><td>创建名为doc的文件</td></tr><tr><td>rm 文件名</td><td>删除这个文件夹&#x2F;文件</td></tr><tr><td>rm -rf</td><td>强制删除文件或目录,删除时不提示</td></tr></tbody></table><ul><li>mv 文件名  文件名         修改文件名</li><li>mv 文件1路径  文件2路径   移动文件1到文件2的目录中</li></ul><blockquote><p>vim  con.cfg：可带路径，没有则新建，有则修改</p></blockquote><ul><li>使用<code>i</code>进入编辑</li><li><strong>保存退出（ESC+:wq）、正常退出(ESC+q)、不保存退出（ESC+:q!）及强制退出（ESC+:!）</strong></li></ul><h3 id="关于dnf"><a href="#关于dnf" class="headerlink" title="关于dnf"></a>关于dnf</h3><ul><li>dnf是新一代的包版本工具,在<code>CentOS8</code>以上的版本</li><li>dnf使用的<code>rpm</code>,<code>libsolv</code>和<code>hawkey</code>库进行包管理操作</li></ul><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>dnf -version</td><td>查看版本</td></tr><tr><td>dnf repolist all</td><td>查看系统中所有的可用或不可用的<code>dnf</code>软件库</td></tr><tr><td>dnf list</td><td>列出用户系统上所有来自软件库的可用安装包以及已经安装的包</td></tr><tr><td>dnf list install</td><td>列出所有安装了的rpm包</td></tr><tr><td>dnf list available</td><td>列出用户系统上所有来自软件库的可用安装包</td></tr><tr><td>dnf search packagename 搜索软件库的可用安装包,可以传部分名称</td><td></td></tr></tbody></table><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><blockquote><p>下载和启动nginx</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动nginx：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginxsystemctl status nginxsystemctl enable nginxnginx -s reload # 重新启动nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置nginx的用户和默认访问目录</p></blockquote><ul><li><p>nginx配置用户:这里改为用户名root</p><ul><li><img src="./nginx%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7.jpg" alt="nginx配置用户"></li></ul></li><li><p>通过Linux命令创建文件夹和文件:</p></li><li><p>创建当文件夹和文件</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;root&#x2F;mall_cmscd &#x2F;root&#x2F;mall_cmstouch index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置访问目录 <code>vim /etc/nginx/nginx.conf</code></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4cka6hgj60n00bwgmc02.jpg" alt="image-20210825163406566" style="zoom:67%;" /></li></ul><h3 id="java环境的配置"><a href="#java环境的配置" class="headerlink" title="java环境的配置"></a>java环境的配置</h3><blockquote><p>由于Jenkins本身是依赖Java的,所以我们需要先安装Java环境:</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf search java-11dnf install java-11-openjdk.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装JenKins-默认使用8080端口提供服务"><a href="#安装JenKins-默认使用8080端口提供服务" class="headerlink" title="安装JenKins(默认使用8080端口提供服务)"></a>安装JenKins(默认使用8080端口提供服务)</h3><blockquote><p>Jenkins本身是没有在dnf的软件仓库包中的</p></blockquote><ul><li>使用<code>wget</code>指定的<code>url</code>下载资源,wget支持HTTP,HTTPS和FTP下载<ul><li>-O表示输出到某个文件夹并且命名为什么文件</li><li>将下载内容读写到<code>jenkins.repo</code>文件中</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget –O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat-stable&#x2F;jenkins.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>导入GPG密钥以确保您的软件合法<ul><li><code>rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</code></li></ul></li></ul><blockquote><p>编辑文件<code>/etc/yum.repos.d/jenkins.repo</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[jenkins]name&#x3D;Jenkins-stablebaseurl&#x3D;http:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhatgpgcheck&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Jenkins:<code>dnf install jenkins</code></p></blockquote><ul><li>启动Jenkins服务<ul><li>systemctl start jenkins:启动服务</li><li>systemctl status jenkins:查看状态</li><li>systemctl enable jenkins:每次重新启动,保持服务器状态</li></ul></li></ul><h4 id="修改Jenkins用户"><a href="#修改Jenkins用户" class="headerlink" title="修改Jenkins用户"></a>修改Jenkins用户</h4><blockquote><p>由于Jenkins默认使用的用户是 <code>jenkins</code>,可能没有访问权限</p></blockquote><ul><li>修改文件的路径：<code>/etc/sysconfig/jenkins</code></li><li><img src="./jenkins%E4%BF%AE%E6%94%B9user.jpg" alt="jenkins修改user"><ul><li>重启<code>systemctl restart jenkins</code></li></ul></li></ul><h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><blockquote><p>输入自己的IP地址<code>http://ip:8080</code></p></blockquote><ul><li>获取输入管理员密码<ul><li>在下面的地址中 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></li><li>下载安装推荐的插件</li></ul></li></ul><h4 id="使用Jenkins任务"><a href="#使用Jenkins任务" class="headerlink" title="使用Jenkins任务"></a>使用Jenkins任务</h4><blockquote><p>任务创建</p></blockquote><ul><li><img src="./%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA.jpg" alt="任务创建"></li></ul><h4 id="使用git管理"><a href="#使用git管理" class="headerlink" title="使用git管理"></a>使用git管理</h4><blockquote><p><span style="color:red">不仅本地要有git,云服务器也要有git</span></p></blockquote><ul><li>使用<code>dnf install git</code>下载git</li></ul><h5 id="使用http-用到git的token凭证"><a href="#使用http-用到git的token凭证" class="headerlink" title="使用http,用到git的token凭证"></a>使用http,用到git的token凭证</h5><ul><li>如果使用http,需要到github仓库生成token</li><li>在设置下的开发者设置</li><li><img src="./github%E7%9A%84token.png" alt="github的token"></li></ul><h5 id="使用ssh-用到git的私钥"><a href="#使用ssh-用到git的私钥" class="headerlink" title="使用ssh,用到git的私钥"></a>使用ssh,用到git的私钥</h5><ul><li><p><img src="./%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5.png" alt="使用ssh连接"></p></li><li><p>选择ssh连接,需要私钥以及github仓库的连接方式</p></li></ul><h4 id="触发器的构建"><a href="#触发器的构建" class="headerlink" title="触发器的构建"></a>触发器的构建</h4><blockquote><p>勾选定时构建</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#每半小时构建一次OR每半小时检查一次远程代码分支，有更新则构建H&#x2F;30 * * * *#每两小时构建一次OR每两小时检查一次远程代码分支，有更新则构建H H&#x2F;2 * * *#每天凌晨两点定时构建H 2 * * *#每月15号执行构建H H 15 * *#工作日，上午9点整执行H 9 * * 1-5#每周1,3,5，从8:30开始，截止19:30，每4小时30分构建一次H&#x2F;30 8-20&#x2F;4 * * 1,3,5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h4><blockquote><p>注意:我们需要搭建Node的环境</p></blockquote><ul><li>第一步：配置Node的环境</li><li>第二步：安装Node的插件</li></ul><blockquote><p>系统管理中,全局工具配置和插件管理,插件管理中下载Node插件</p></blockquote><p>构建执行的任务：</p><ul><li>查看Node的版本等是否有问题；</li><li>执行 <code>npm install</code> 安装项目的依赖；</li><li>移除原来mall_cms文件的所有内容；</li><li>将打包的dist文件夹内容移动到mall_cms文件夹</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwdnode -vnpm -vnpm install npm run buildpwdecho &#39;构建成功&#39;ls# 删除&#x2F;root&#x2F;mall_cms文件夹里所有的内容rm -rf &#x2F;root&#x2F;mall_cms&#x2F;* cp -rf .&#x2F;dist&#x2F;* &#x2F;root&#x2F;mall_cms&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础问题</title>
      <link href="/2021/10/29/js-ji-chu-wen-ti/"/>
      <url>/2021/10/29/js-ji-chu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><blockquote><p>var,let,const三种变量</p></blockquote><h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a><a href="#var%E5%85%B3%E9%94%AE%E5%AD%97"><strong>var关键字</strong></a></h3><ul><li><p>var的声明提升</p><ul><li>所谓的声明提升,就是把所有的变量声明到函数作用域的最顶部.可以反复多次用var声明同一个变量</li></ul></li><li><p>使用var声明的变量会变成window对象的属性</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//undefined</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个等同于以下这种的状况</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> age  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//undefined</span>  age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a><a href="#let%E5%85%B3%E9%94%AE%E5%AD%97"><strong>let关键字</strong></a></h3><blockquote><p>使用let会产生<span style="color:red">暂时性死区</span></p></blockquote><ul><li>let声明变量时,如果在let之前引用此变量,let声明之前的执行瞬间被称为”<span style="color:red">暂时性死区</span>“</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//ReferenceError:age没用定义</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>全局声明:使用let在全局作用域中声明的变量不会成为window对象的属性</li></ul><h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a><a href="#const%E5%85%B3%E9%94%AE%E5%AD%97"><strong>const关键字</strong></a></h3><blockquote><p>与let基本相同,如果尝试修改const声明的变量会导致运行时错误</p></blockquote><ul><li>如果const变量引用的时一个对象,那么修改这个对象的内部属性并不违反const限制<ul><li>即不能修改该该变量引用的地址值,而通过地址值可以修改对象内部的属性</li></ul></li></ul><h3 id="声明风格"><a href="#声明风格" class="headerlink" title="声明风格"></a>声明风格</h3><blockquote><p>不使用var,const优先,let次之</p></blockquote><ul><li>使用const可以让浏览器运行时强制保持变量的不变,也可以让静态的代码分析工具提前发现不合法的操作</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></h2><blockquote><p><a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a>和<a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">引用数据类型</a></p></blockquote><ul><li><strong>typeof</strong>操作符<ul><li>使用typeof操作符确定任意变量的数据类型</li></ul></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></h3><blockquote><p>undefined,null,boolean,number,string,symbol,object</p></blockquote><ul><li><strong><code>null</code></strong>:表示一个空对象</li><li><strong><code>undefined</code></strong>:由null派生而来<ul><li>如果使用var或者let声明了变量而为初始化时,就是<code>undefined</code></li><li>未初始化的变量会被自动赋予<code>undefined</code>,建议在声明变量的时候初始化.</li></ul></li><li><strong><code>Boolean</code></strong>:</li></ul><table><thead><tr><th>数据类型</th><th>转换为true</th><th>转换为false</th></tr></thead><tbody><tr><td>String</td><td>空字符串</td><td>非空字符串</td></tr><tr><td>Number</td><td>非零数值(包括无穷)</td><td>0</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td>不存在</td><td>undefinfed</td></tr></tbody></table><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a><strong><code>Number</code></strong></h4><blockquote><p>值的范围:<code>-Infinity</code> ~ <code>Infinity</code></p></blockquote><ul><li><strong>NaN</strong>:意思是<code>不是数值</code></li></ul><blockquote><p>转换为数值类型</p></blockquote><ul><li><code>Number()</code>是转型函数,可以用于任何类型的转换</li><li><code>paresInt()</code>用于字符串转换为number类型,可以解析任何进制的<ul><li>传入一个浮点数字符,只会返回一个整数字符</li><li>第二个参数用于指定进制数</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//二进制</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//八进制</span><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//十进制</span><span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">//十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>parseFloat()</code>只用于转换十进制字符,可以转换浮点数字符</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"22.3"</span><span class="token punctuation">)</span><span class="token comment">//22.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li>length属性返回字符数(包括空字符串)</li></ul><blockquote><p>转化为字符串</p></blockquote><ul><li>使用<code>toString()</code>方法可见于数值,布尔类型,对象和字符串值.<ul><li><span style="color:red">null和undefined没有toString()方法</span></li><li>如果是数值类型可以传一个进制</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"1010"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"12"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h4><blockquote><p>略</p></blockquote><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><blockquote><p>略</p></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a><a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">引用数据类型</a></h3><blockquote><ul><li>引用数据类型,变量在栈内存中存储的是堆内存中的地址值(函数名和引用型变量以及全局变量)</li><li>值得注意的是:局部的基本数据类型变量在栈内存初始化</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> obj1obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jack"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//"jack"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="./%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="引用类型"></p></li><li><p>obj1保存的是这个实例对象的地址,obj2也是引用的实例的地址值(即浅拷贝)</p><ul><li>在给obj1增加属性name的时候,obj2同时也能访问到(深拷贝)</li><li>因为他们同时指向同一个对象</li></ul></li></ul><h2 id="JS按位操作符"><a href="#JS按位操作符" class="headerlink" title="JS按位操作符"></a>JS按位操作符</h2><blockquote><p>按位操作符会将操作数被转换为<strong>32位二进制表示</strong>(0和1).超过32位的数字将丢弃其最高有效位.</p></blockquote><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><blockquote><p>以八位二进制举例,第一位表示符号位,其余位表示值(正数该位为0，负数该位为1)</p></blockquote><ul><li>+1 &#x3D; 0b0000 0001(原)</li><li>-1 &#x3D; 0b1000 0001(原)</li></ul><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><blockquote><p>正数的反码是他本身,负数的反码在源码的基础上符号位不变,其余各位取反</p></blockquote><ul><li>+1 &#x3D; 00000001(原) &#x3D; 00000001(反)</li><li>-1 &#x3D; 10000001(原) &#x3D; 11111110(反)</li></ul><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><blockquote><p>正数的补码就是本身,负数的补码在反码的基础上加1</p></blockquote><ul><li>+1 &#x3D; 00000001(原) &#x3D; 00000001(反) &#x3D; 00000001(补)</li><li>-1 &#x3D; 10000001(原) &#x3D; 11111110(反) &#x3D; 11111111(补)</li></ul><h3 id="按位操作符"><a href="#按位操作符" class="headerlink" title="按位操作符"></a>按位操作符</h3><blockquote><p>所有进制的数都会装换成二进制的数进行操作</p></blockquote><table><thead><tr><th>运算符</th><th>用法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>按位与（ AND）</td><td>a &amp; b</td><td>对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td><td>0b1110 &amp; 0b1101 &#x3D;&#x3D;&#x3D; 0b1100</td></tr><tr><td>按位或（OR）</td><td>a | b</td><td>对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td><td>0b1110</td></tr><tr><td>按位异或（XOR）</td><td>a ^ b</td><td>对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td><td>0b1110 ^ 0b1101 &#x3D;&#x3D;&#x3D; 0b0011</td></tr><tr><td>按位非（NOT）</td><td>~ a</td><td>反转操作数的比特位，即0变成1，1变成0。</td><td>~0b1110 &#x3D;&#x3D;&#x3D; -0b1111</td></tr><tr><td>左移（Left shift）</td><td>a &lt;&lt; b</td><td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充。</td><td>0b00001110 &lt;&lt; 2 &#x3D;&#x3D;&#x3D; 0b00111000</td></tr><tr><td>有符号右移</td><td>a &gt;&gt; b</td><td>将 a 的二进制表示向右移b(&lt; 32) 位，丢弃被移出的位。</td><td>0b00001110 &gt;&gt;2 &#x3D;&#x3D;&#x3D; 0b00000011</td></tr><tr><td>无符号右移</td><td>a &gt;&gt;&gt; b</td><td>将 a 的二进制表示向右移b(&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td><td>-1 &gt;&gt;&gt; 1 &#x3D;&#x3D;&#x3D; 2147483647, -1 &gt;&gt;&gt;31 &#x3D;&#x3D;&#x3D;1</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>函数是<code>javasceipt</code>中的一等公民,会在其作用域提升,率先执行</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//ƒ a()&#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>箭头函数中没有this</li><li>js函数中没有重载</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite配置</title>
      <link href="/2021/10/26/vite-pei-zhi/"/>
      <url>/2021/10/26/vite-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="共享配置"><a href="#共享配置" class="headerlink" title="共享配置"></a>共享配置</h2><blockquote><p>你可以显式地通过<code>--config</code>命令行选项指定一个配置文件(相对于cwd路径进行解析)</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vite --config my-config.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><blockquote><p><code>defineConfig</code>,通过vite的智能提示实现vite的智能提示</p></blockquote><ul><li><span style="color:yellow">提示</span>:也可所以使用<code>jsDoc</code>或者<code>tsDoc</code></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; defineConfig &#125; from &#39;vite&#39;export default defineConfig(&#123;  &#x2F;&#x2F; ...&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>root</code>:项目根目录所在的位置(即<code>index.html</code>所在的位置).默认是<code>process.cwd()</code></p></li><li><p><code>base</code>:开发或者生产环境的公共基础路径.默认值是<code>/</code></p><ul><li>一般开发环境使用<code>./</code>(linux中只有这一种的相对路径)</li></ul></li><li><p><code>plugins</code>:需要用到的插件数组</p> <pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">plugins: [vue()],<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>publicDir</code>:设置静态资源服务的文件夹.一般为<code>public</code>,如果为<code>false</code>不会生成静态资源到<code>outDir</code>(一般是<code>dist</code>目录)根目录中.可以是相对路径也可以是绝对路径</p></li><li><p><code>assetsInclude: string | RegExp | (string | RegExp)[]</code>.静态资源处理</p><ul><li>指定额外的<strong>picomatch模式</strong>作为静态资源处理</li><li>当从 HTML 引用它们或直接通过<code>fetch</code>或<code>XHR</code>请求它们时,它们将被插件转换管道排除在外</li></ul></li><li><p><code>logLevel:&#39;info&#39; | &#39;warn&#39; | &#39;error&#39; | &#39;silent&#39;</code>:调整控制台输出的级别，默认为 ‘info’。</p></li><li><p><code>clearScreen:boolean</code><strong>默认: true</strong></p><ul><li>设为<code>false</code>可以避免Vite清屏而错过在终端中打印某些关键信息</li><li>命令行模式下可以通过 <code>--clearScreen false</code> 设置</li></ul></li><li><p><code>envDir:string</code>.<strong>默认值root</strong></p><ul><li>用于加载<code>.env</code> 文件的目录.可以是一个绝对路径,也可以是相对于项目根的路径</li></ul></li><li><p><code>envPrefix:string | string[]</code><strong>默认:VITE_</strong></p><ul><li>以<code>envPrefix</code>开头的环境变量会通过<code>import.meta.env</code>暴露在你的客户端源码中</li></ul></li></ul><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><blockquote><p>isolatedModules:由于vite只会检查单文件组件(sfc),所以在暴露的时候会出现一些问题</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   ...    <span class="token property">"isolatedModules"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>开启isolatedModules,每一个.ts文件必须成为一个模块(必须有<code>import</code>或者<code>export</code>)</p></li><li><p>引入并暴露同一个types的时候,这样是错的(如果开启<code>isolatedModules</code>会有error提示)</p> <pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; types.tsexport interface A&#123;  name:&quot;zhangsan&quot;&#125;&#x2F;&#x2F;test.tsimport &#123; A &#125; from &quot;.&#x2F;types&quot;export &#123;A&#125; &#x2F;&#x2F;* error 的提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>无法编译环境常量的枚举</p> <pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare const enum Num&#123;  First &#x3D; 0,  Second &#x3D; 1&#125;const fw:A &#x3D; &#123;  name:&#39;fw&#39;,  age:Num.First &#x2F;&#x2F;报错&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="配置css"><a href="#配置css" class="headerlink" title="配置css"></a>配置css</h3><h4 id="配置css预设"><a href="#配置css预设" class="headerlink" title="配置css预设"></a>配置css预设</h4><blockquote><p>只需要下载预设,vite会自动集成配置,不需要像<code>webpack</code>一样需要<code>css-loader</code>,<code>style-loader</code>配置</p></blockquote><ul><li>直接使用npm下载<code>npm i scss -D</code>之后就可以直接使用,<code>less</code>等也都一样</li></ul><blockquote><p>处理css预处理的选项(到scss或者less等其它官网找到配置)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    scss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      additionalData<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$injectedColor: orange;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置css模块"><a href="#配置css模块" class="headerlink" title="配置css模块"></a>配置css模块</h4><blockquote><p><code>css.modules</code>的配置会传递给<code>postcss.modules</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">css<span class="token operator">:</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 是否使用 hash</span>    generateScopedName<span class="token operator">:</span> <span class="token string">'[name]__[local]___[hash:base64:5]'</span><span class="token punctuation">,</span>    hashPrefix<span class="token operator">:</span> <span class="token string">'prefix'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>hash配置的参考</code>:<a href="https://github.com/webpack/loader-utils#interpolatename">https://github.com/webpack/loader-utils#interpolatename</a></li><li>样式文件名必须是<code>XXX.module.css[less,scss,style等]</code>,否则不生效的</li></ul><blockquote><p>这样就可以以模块的形式引入css</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* test.module.css */</span><span class="token selector">.greate</span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.hekk</span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;module.greate&#125; $&#123;module.hekk&#125;`<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> module <span class="token keyword">from</span> <span class="token string">"@/assets/css/test.module.css"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于css-postcss配置"><a href="#关于css-postcss配置" class="headerlink" title="关于css.postcss配置"></a>关于css.postcss配置</h4><blockquote><p>vite滋生已经集成<code>postcss</code>,无需再次安装.并且也无需单独创建postcss文件,已经集成到<code>vit.config.ts</code>中.vite会自动在<code>*.vue</code>中所有的style标签以及所有导入到<code>.css</code>文件中应用postcss</p></blockquote><ol><li>使用配置文件<code>postcss.config.js</code>,默认基于项目根目录</li><li>使用内联的<code>postcss</code>,格式于<code>postcss.config.js</code>一样</li></ol><blockquote><p>PostCSS插件:嵌套CSS样式写法解决方案</p></blockquote><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>postcss-import</td><td>支持@import写法</td></tr><tr><td>postcss-url</td><td>支持@url写法</td></tr><tr><td>postcss-bem</td><td>支持BEM元素规则命名</td></tr><tr><td>postcss-nested</td><td>支持类选择器嵌套写法,模拟SASS嵌套选择器写法.</td></tr><tr><td>postcss-nesting</td><td>支持符合W3C规范的嵌套类选择器写法</td></tr><tr><td>postcss-simple-vars</td><td>支持变量</td></tr><tr><td>postcss-advanced-variables</td><td>支持类似SASS自定义变量并引用,实现编写变量,条件,循环.</td></tr><tr><td>postcss-preset-env</td><td>支持变量运算</td></tr></tbody></table><blockquote><p>PostCSS插件:H5移动端屏幕适用性解决方案</p></blockquote><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>cssnano</td><td>优化和压缩CSS,已包含autoprefixer插件.</td></tr><tr><td>postcss-aspect-ratio-mini</td><td>容器比匹配</td></tr><tr><td>postcss-cssnext</td><td>实现嵌套编程</td></tr><tr><td>postcss-px-to-viewport</td><td>将px转换为vw以适应各种屏幕</td></tr><tr><td>postcss-write-svg</td><td>1px细线的绘制</td></tr></tbody></table><blockquote><p>PostCSS通过@import将样式表合并到一起,当需要通过@import将第三方类库导入到主样式表时,首先需要运行的是@import插件.</p></blockquote><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>postcss-import</td><td>支持通过内联内容来转换@import规则</td></tr><tr><td>postcss-partial-import</td><td>让CSS文件支持@import语法,支持W3C的写法,也支持SASS写法.</td></tr></tbody></table><blockquote><p>浏览器自动添加前缀<code>autoprefixer</code></p></blockquote><ol><li><p>使用内联的方式,首先下载<code>autoprefixer</code>添加到项目中</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">css:&#123;  postcss: &#123;    plugins: [autoprefixer()]  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在根目录创建文件<code>.browserslistrc</code>添加浏览器适配</p></li></ol><pre class="line-numbers language-.browserslistrc" data-language=".browserslistrc"><code class="language-.browserslistrc">defaultsnot ie &lt; 11last 2 versions&gt; 1%iOS 7last 3 iOS versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><blockquote><p><code>json.namedExports:boolean</code>.<strong>默认:true</strong></p></blockquote><ul><li>是否支持从<code>.json</code>文件中进行按名导入</li></ul><blockquote><p><code>json.stringify:boolean</code>:<strong>默认false</strong></p></blockquote><ul><li>若设置为<code>true</code>,导入的JSON会被转换为<code>export default JSON.parse(&quot;...&quot;)</code>,这样会比转译成对象字面量性能更好.尤其是当JSON 文件较大的时候</li><li>开启此项,则会禁用按名导入(<code>&#123;version&#125;=...</code>),会将json文件导入到一个对象上.</li></ul><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="关于别名的配置"><a href="#关于别名的配置" class="headerlink" title="关于别名的配置"></a>关于别名的配置</h4><h4 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta">import.meta</a></h4><blockquote><p><code>import.meta</code>对象向 JavaScript 模块公开特定于上下文的元数据.它包含有关模块的信息,如模块的 URL</p></blockquote><ul><li><p><code>import.meta</code>的原型为null.该对象是可扩展的,其属性是可写的,可配置的和可枚举的</p><ul><li>使用:必须设置<code>type=&quot;module&quot;</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-module.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>可以通过<code>import.meta</code>对象获取这个模块的元数据信息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; url: "file:///home/user/my-module.mjs" &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意,url也可能包含参数或者哈希(比如后缀?或#)</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token string">'./index.mjs?someURLInfo=5'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Vite会在CommonJS和TypeScript配置文件中替换<code>__filename</code>,<code>__dirname</code>以及<code>import.meta.url</code></li><li>即使项目没有在<code>package.json</code>中开启 <code>type: &quot;module&quot;</code>,Vite 也支持在配置文件中使用 ESM 语法</li></ul><h4 id="使用node中的路径模块"><a href="#使用node中的路径模块" class="headerlink" title="使用node中的路径模块"></a>使用node中的路径模块</h4><ul><li>建议直接使用<code>import.meta.url</code>而不是commonjs模块的__dirname等</li></ul><blockquote><ul><li><code>path</code>模块中的<code>resolve</code>方法,用于获取目录的路径.</li><li>可以传任意多的字符,返回一个绝对路径地址</li><li>如果第一个参数是<code>__dirname</code>,一样的效果</li><li><code>__dirname</code>获取到当前文件下的绝对路径,文件名后缀不包括当前文件</li><li><code>__filename</code>获取到当前文件下的绝对路径,文件名后缀包括当前文件</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const path &#x3D; require(&quot;path&quot;)&#x2F;&#x2F;这两个是一样的console.log(path.resolve(&quot;src&quot;))console.log(path.resolve(__dirname,&quot;src&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>path.basename()</code>:返回路径的最后一部分. 第二个参数可以过滤掉文件的扩展名</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">"/source/_posts/axios.md"</span><span class="token punctuation">,</span><span class="token string">".md"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//axios</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">"/source/_posts/axios.md"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//axios.md</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>tsconfig.json</code>中配置路径别名:<code>compilerOptions</code>中配置两个选项:<code>baseUrl</code>和<code>paths</code></p></blockquote><ul><li>设置baseUrl不会影响相对模块导入,因为它们始终相对于导入文件进行解析<ul><li>例如:<code>&quot;baseUrl&quot;: &quot;./src&quot;</code>,然后jquery应该映射到<code>&quot;../node_modules/jquery/dist/jquery&quot;</code></li><li>参考: <a href="https://zhuanlan.zhihu.com/p/46696498">https://zhuanlan.zhihu.com/p/46696498</a></li></ul></li><li><code>baseUrl</code>关联<code>path</code>的设置,将文件映射为自己设置的别名</li></ul><blockquote><p>例如:</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>  <span class="token property">"paths"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token property">"@/*"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token string">"*"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在src下目录开始查找(<code>baseUrl</code>最好设置为根路径)</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>  <span class="token property">"paths"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token property">"@/*"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token string">"src/*"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在<code>vite.config.ts</code>配置别名</p></blockquote><ul><li>在<code>resolve</code>属性的<code>alias</code>配置别名</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">resolve: &#123;  alias: &#123;    &#x2F;&#x2F;第一种    &#x2F;&#x2F;&#39;@&#39;: path.resolve(__dirname, &#39;src&#39;)    &#x2F;&#x2F;第二种(本质一样)    &#x2F;&#x2F;&#39;@&#39;: resolve(&#39;src&#39;)  &#125;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三种是以数组的形式,<span style="color:red">注意后面的分割符一定要写</span></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">resolve: &#123;  alias: [    &#123;      find: &#x2F;@\&#x2F;&#x2F;,      replacement: &#96;$&#123;path.resolve(__dirname, &#39;src&#39;)&#125;&#x2F;&#96;    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="resolve-dedupe"><a href="#resolve-dedupe" class="headerlink" title="resolve.dedupe"></a>resolve.dedupe</h4><ul><li>如果你在你的应用程序中有相同依赖的副本(比如<code>monorepos</code>),请使用此选项强制Vite始终将列出的依赖项解析为同一副本(从项目根目录)</li></ul><h4 id="resolve-conditions"><a href="#resolve-conditions" class="headerlink" title="resolve.conditions"></a>resolve.conditions</h4><blockquote><p>条件导出:在package.json中可以将模块导出为ESM或者CommonJs或者其他你需要的模块</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"."</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./index.esm.js"</span><span class="token punctuation">,</span>      <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index.cjs.js"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>resolve.conditions:string[]</code>:<code>import</code>,<code>module</code>,<code>browser</code>,<code>default</code>可以允许这些字段(在数组中设置他们)</li></ul><h4 id="resolve-mainFields"><a href="#resolve-mainFields" class="headerlink" title="resolve.mainFields"></a>resolve.mainFields</h4><ul><li><code>resolve.mainFields:string[]</code>: <strong>默认值[‘module’, ‘jsnext:main’, ‘jsnext’]</strong></li><li>一般用于发布包的时候指定模块的module等字段时候读取的文件入口</li></ul><h4 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h4><ul><li><code>resolve.extensions:string[]</code>: 默认值**[‘.mjs’, ‘.js’, ‘.ts’, ‘.jsx’, ‘.tsx’, ‘.json’]**<ul><li>可以省略文件后缀名导入</li></ul></li></ul><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><blockquote><ul><li>.env文件会在Vite启动一开始就被加载,改动会在重启服务器后生效</li><li>开头以<code>VITE_APP</code>开头才可以</li><li>也可以通过<code>import.meta.env</code>取到环境变量的值.例如<code>import.meta.env.VITE_APP_API</code></li></ul></blockquote><ul><li><p><code>.env</code>                # 所有情况下都会加载</p></li><li><p><code>.env.local</code>          # 所有情况下都会加载,但会被 git 忽略</p></li><li><p><code>.env.[mode]</code>         # 只在指定模式下加载</p></li><li><p><code>.env.[mode].local</code>   # 只在指定模式下加载,但会被 git 忽略</p></li><li><p><code>.env</code>类文件会在Vite启动一开始时被加载,而改动会在重启服务器后生效</p></li><li><p>一份用于指定模式的文件(例如<code>.env.production</code>)会比通用形式的优先级更高(例如<code>.env</code>)</p></li><li><p>env中的预置的全局常量<code>BASE_URL: &quot;/&quot;</code>,<code>DEV: true</code>,<code>MODE: &quot;development&quot;</code>,<code>PROD: false</code>,<code>SSR: false</code></p></li></ul><blockquote><p>model属性可以是<code>production</code>,<code>development</code></p></blockquote><ul><li><code>.env.production</code>或者<code>.env.development</code>文件</li></ul><pre class="line-numbers language-env" data-language="env"><code class="language-env"># .env.productionVITE_APP_TITLE&#x3D;My App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>**模式**是一个更广泛的概念</code></p><ul><li>如果希望有一个<code>staging”</code>(预发布|预上线)模式.它应该具有类似于生产的行为,但环境变量与生产环境略有不同</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vite build --mode staging<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>或者使用<code>.env.staging</code></li></ul><pre class="line-numbers language-env" data-language="env"><code class="language-env"># .env.stagingNODE_ENV&#x3D;productionVITE_APP_TITLE&#x3D;My App (staging)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><code>env.d.ts</code>:代码中获取这些以VITE_为前缀的用户自定义环境变量的TypeScript智能提示</p></blockquote><ul><li>在vite下会暴露出一个<code>client.d.ts</code>文件,集成了这些配置<ul><li>包含<code>env</code>,<code>hot api</code>,<code>assset import</code>(静态文件的返回值)</li></ul></li><li>可以直接在<code>tsconfig.json</code>中配置<code>types</code></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vite/client"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>或者直接在<code>env.d.ts</code>中编写</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;&#x2F; &lt;reference types&#x3D;&quot;vite&#x2F;client&quot; &#x2F;&gt;interface ImportMetaEnv &#123;  readonly VITE_APP_TITLE: string  &#x2F;&#x2F; 更多环境变量...&#125;interface ImportMeta &#123;  readonly env: ImportMetaEnv&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态文件的处理"><a href="#静态文件的处理" class="headerlink" title="静态文件的处理"></a>静态文件的处理</h3><ol><li><p><code>?url</code>:将文件当作路径返回</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import test from &quot;@&#x2F;assets&#x2F;test.png?url&quot;console.log(test)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>?raw</code>:将文件内容以字符串的内容显示</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import test from &quot;.&#x2F;index?raw&quot;console.log(test)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>?worker</code>:处理大任务计算量时,开的线程任务</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//worker.js</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">timedCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token function">postMessage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>timedCloud<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">timeCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//main.js</span><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"./worker?worker"</span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>json</code>文件的引入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> pkg <span class="token keyword">from</span> <span class="token string">"../package.json"</span><span class="token comment">// 引入单独字段</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> version <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../package.json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>引入<code>wasm</code>文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">"./fib.wasm"</span><span class="token comment">//异步的</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="import-meta-glob"><a href="#import-meta-glob" class="headerlink" title="import.meta.glob"></a>import.meta.glob</h3><blockquote><p><code>import.meta.glob</code>:可以使用正则以异步的import的方式引入文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./glob/*"</span><span class="token punctuation">)</span><span class="token comment">//将glob下的所有文件以import的方式引入</span><span class="token comment">//()=>import(...)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="build配置"><a href="#build配置" class="headerlink" title="build配置"></a>build配置</h2><blockquote><p>一些基础配置</p></blockquote><ul><li><code>target</code>:构建浏览器兼容的选项.默认值是<code>modules</code>,支持远程ES模块的浏览器<ul><li>可以是单个es版本,例如<code>es2015</code>.同时也支持数组</li></ul></li><li><code>outDir</code>:指定输出路径.默认值是<code>dist</code>,可以改成自己想配置的路径,例如<code>build</code></li><li><code>assetsDir</code>:指定生成的静态资源存放路径(相对于<code>outDir</code>).默认值<code>assets</code></li></ul><h3 id="assetsInlineLimit"><a href="#assetsInlineLimit" class="headerlink" title="assetsInlineLimit"></a>assetsInlineLimit</h3><blockquote><p>将小于阈值的导入或引用资源将内联为 base64 编码,一般用于图片,避免额外的http请求.优化浏览器速度</p></blockquote><ul><li>默认值是:<code>4096(4kb)</code></li></ul><h3 id="sourcemap"><a href="#sourcemap" class="headerlink" title="sourcemap"></a>sourcemap</h3><blockquote><p>常用于调试,默认值是false,一般开发环境不选false</p></blockquote><ul><li><p>类型:<code>boolean | &#39;inline&#39; | &#39;hidden&#39;</code></p></li><li><p>如果为<code>true</code>:将会创建一个独立的 <code>source map</code> 文件</p></li><li><p>如果为 <code>&#39;inline&#39;</code>,<code>source map</code>的内容将会附加在输出文件中</p></li><li><p><code>&#39;hidden&#39;</code>的工作原理与’true’相似,只是 <code>bundle</code>(包) 文件中相应的注释将不被保留</p></li></ul><h3 id="删除调试项"><a href="#删除调试项" class="headerlink" title="删除调试项"></a>删除调试项</h3><blockquote><p><code>build.minify</code>指定混淆器,默认为<code>esbuid</code>(速度最快)</p></blockquote><ul><li>可选值: <code>boolean | &#39;terser&#39; | &#39;esbuild&#39;</code></li><li>如果需要删除调试输出的,需要手动开启<code>terser</code></li></ul><blockquote><p><code>build.terserOptions</code>:配置terser默认导出的接口</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">build<span class="token operator">:</span><span class="token punctuation">&#123;</span>    minify<span class="token operator">:</span> <span class="token string">'terser'</span><span class="token punctuation">,</span>    terserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      compress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//删除生成的console</span>        drop_console<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        drop_debugger<span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rollupOptions"><a href="#rollupOptions" class="headerlink" title="rollupOptions"></a>rollupOptions</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">rollupOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        input<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'./index.html'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        entryFileNames<span class="token operator">:</span> <span class="token string">'js/[name]-[hash].js'</span><span class="token punctuation">,</span>        chunkFileNames<span class="token operator">:</span> <span class="token string">'js/[name]-[hash].js'</span><span class="token punctuation">,</span>        assetFileNames<span class="token operator">:</span> <span class="token string">'[ext]/[name]-[hash].[ext]'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>input</code>:指定打包的入口文件,默认是<code>./index.html</code></li><li><code>output</code>:指定文件输出的配置<ul><li><code>entryFileNames</code>:用于从入口点创建的块的打包输出格式</li><li><code>chunkFileNames</code>:用于命名代码拆分时创建的共享块的输出命名</li><li><code>assetFileNames</code>:用于输出静态资源的命名.</li></ul></li></ol><h3 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h3><ul><li>可以参考<a href="https://cn.vitejs.dev/guide/backend-integration.html">https://cn.vitejs.dev/guide/backend-integration.html</a></li></ul><ol><li><code>build.ssr</code>:boolean | string.如果是true,需要在<code>rollupOptions</code>指定入口文件<ul><li>如果是<code>string</code>,直接指定ssr的入口文件</li></ul></li><li><code>build.manifest</code>:boolean | string,默认值<code>false</code>.用于不是node服务器部署的项目<ul><li>当设置为<code>true</code>:构建后将会生成<code>manifest.json</code>文件,json包含了没有被<code>hash</code>过的资源文件名和<code>hash</code>后版本的映射</li><li>如果是字符串,那么就是 manifest 文件的名字</li></ul></li><li><code>build.ssrManifest</code>:除了以上的东西,还会写入样式链接与资产预加载的链接进入json</li></ol><ul><li>在node下使用ssr:<a href="https://vitejs.dev/guide/ssr.html#setting-up-the-dev-server">https://vitejs.dev/guide/ssr.html#setting-up-the-dev-server</a><ul><li><code>middlewareMode</code>: 总共有两种模式<ul><li>如果是<code>html</code>,和直接使用vite配置一样,没有区别</li><li><code>ssr</code>:使用服务端渲染,<strong>需要提供服务端渲染的逻辑</strong>.例如页面的渲染</li></ul></li></ul></li></ul><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><ol><li><code>host</code>:指定监听那个IP地址,默认是<code>127.0.0.1</code></li><li><code>port</code>:指定端口号,默认是3000</li><li><code>open</code>:指定在浏览器打开的应用程序.可以是<code>boolean</code>或者<code>string</code></li><li><code>cors</code>:为开发服务器配置cors.默认启用并允许任何源</li></ol><ul><li>以上都可以使用cli执行(可以直接写进脚本中)</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite --open"</span><span class="token punctuation">,</span>  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-tsc --noEmit &amp;&amp; vite build"</span><span class="token punctuation">,</span>  <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview --port 5050 --open"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><blockquote><p>为服务器配置自定义代理规则</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    target<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    changeOrigin<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标更改选项</li><li><code>changeOrigin</code>:是否将主机的源更改为目标源</li><li><code>rewrite</code>:重写目标源</li></ol><h2 id="optimizeDeps"><a href="#optimizeDeps" class="headerlink" title="optimizeDeps"></a>optimizeDeps</h2><blockquote><p>预编译选项,vite会在node_modules下将项目所需要的依赖预先打包到.vite文件夹中</p></blockquote><ul><li><p><code>exclude</code>:<code>string[]</code>.在与构建中强制排除依赖项</p><ul><li>例如<code>lodash-es</code>这个依赖他也会将所有的工具函数打包</li><li>需要使用<code>exclude:[&quot;lodash-es&quot;]</code></li></ul></li><li><p><code>include</code>:使用此选项可强制预构建链接的包</p></li><li><p><strong>entries</strong>:默认情况下,Vite 会抓取你的<code>index.html</code>来检测需要预构建的依赖项</p></li><li><p><a href="https://esbuild.github.io/api/#simple-options">esbuildOptions</a>:在部署扫描和优化过程中传递给 esbuild 的选项s</p></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p><code>vite-plugin-compression</code>:<a href="https://github.com/vbenjs/vite-plugin-compression">用于压缩资源</a></p><p><code>vite-plugin-cdn-import</code>:<a href="https://github.com/MMF-FE/vite-plugin-cdn-import">允许指定 modules 在生产环境中使用 CDN 引入</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的拷贝方式</title>
      <link href="/2021/10/20/js-de-kao-bei-fang-shi/"/>
      <url>/2021/10/20/js-de-kao-bei-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p><img src="./%E6%8B%B7%E8%B4%9D.png" alt="浅拷贝与深拷贝"></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>浅拷贝复制的是<span style="color:red">对象的引用(地址值)</span>,指向的是堆内存</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>a拿到的是对象的地址值,b是引用类型变量,拿到的是同属于对象的地址值</li></ul><h4 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h4><ol><li><p>通过手动直接赋值</p></li><li><p><strong>Object.assign()</strong></p></li></ol><blockquote><p>将所有可枚举的 自身属性从一个或多个 源对象复制到目标对象.它返回修改后的目标对象.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当Object只有一层的时候是深拷贝</li><li>当Object有多层包裹的时候,被包裹的多层是浅拷贝</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"zhangsan"</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> father<span class="token operator">:</span> <span class="token string">"zhanger"</span><span class="token punctuation">,</span> mother<span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span>  returnedTarget<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhaoliu"</span>returnedTarget<span class="token punctuation">.</span>mother <span class="token operator">=</span> <span class="token string">"wangba"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', father: 'zhanger', mother: 'wangba', friends: &#123;name: 'zhaoliu'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token comment">//&#123;father: 'zhanger', mother: 'wangwu', friends: &#123;name: 'zhaoliu'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', father: 'zhanger', mother: 'wangba', friends: &#123;name: 'zhaoliu'&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回的对象就是目标对象</li></ul><ol start="3"><li>使用扩展运算符(…)</li></ol><blockquote><p>扩展运算符与**Object.assign()**功能相同</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj1 <span class="token punctuation">&#125;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"wangba"</span>obj1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"liuneng"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', friends: &#123;name: 'liuneng', age: 12&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>深拷贝是彻底复制一个对象,而不是复制对象的引用.在对立面对应的不是同一个对象,是复制过的新对象.深拷贝会创造一个一模一样的都西昂</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">:</span>a<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果修改对象b中的值,对象a中的值并不会改变</li></ul><h4 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h4><ol><li><p>手动赋值</p></li><li><p>当对象只有一层:使用<strong>Object.assign()<strong>或者</strong>扩展运算符</strong></p></li><li><p>使用<strong>JSON</strong>转换</p></li></ol><blockquote><p>用<code>JSON.stringify</code>把对象转成字符串,再用<code>JSON.parse</code>把字符串转成新的对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> father<span class="token operator">:</span> <span class="token string">"zhanger"</span><span class="token punctuation">,</span> mother<span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhaoliu"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment">//&#123; father: "zhanger", mother: "wangwu", friends: &#123; name: "lisi" &#125; &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment">//&#123; father: "zhanger", mother: "wangwu", friends: &#123; name: "zhaoliu" &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于lodash库的使用"><a href="#关于lodash库的使用" class="headerlink" title="关于lodash库的使用"></a>关于lodash库的使用</h3><ul><li>浅拷贝<strong>lodash的_.clone</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">&#123;</span> d<span class="token operator">:</span> <span class="token punctuation">&#123;</span> e<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">===</span> obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>深拷贝<strong>lodash的_.cloneDeep</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">&#123;</span> d<span class="token operator">:</span> <span class="token punctuation">&#123;</span> e<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">===</span> obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="structuredClone"><a href="#structuredClone" class="headerlink" title="structuredClone"></a>structuredClone</h3><blockquote><p>浏览器原生支持的深拷贝方式:<code>structuredClone(value, &#123; transfer &#125;)</code></p></blockquote><ul><li><code>value</code>:要克隆的对象.这可以是任何结构化可克隆类型</li><li><code>transfer</code>:可选.可转移的对象,为一个数组,其中的值将被移动到新的对象,而不是克隆至新的对象<ul><li>可转移对象:<a href="https://developer.mozilla.org/en-US/docs/Glossary/Transferable_objects">https://developer.mozilla.org/en-US/docs/Glossary/Transferable_objects</a></li></ul></li><li><strong>返回值</strong>:返回的值是原始的深层副本value</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clone <span class="token operator">===</span> s<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2021/10/09/git-ban-ben-kong-zhi/"/>
      <url>/2021/10/09/git-ban-ben-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li><code>git config --global user.name &quot;jack&quot;</code></li><li><code>git config --global user.email &quot;1553198027@qq.com&quot;</code></li><li>检查配置信息 <code>git config --list</code></li><li><code>git init</code> 生成仓库</li></ul><h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><blockquote><p>工作区,暂存区,版本库</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>Git对象<ol><li>key:value 组成的键值对(key是value对应的hash)</li><li>值对在git内部是一个blob类型</li></ol></li><li>树对象<ul><li>项目的快照就是一个树对象</li></ul></li><li>提交对象<ul><li>项目的版本就是一个提交对象</li></ul></li></ul><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><h4 id="创建工作目录-对工作目录进行修改"><a href="#创建工作目录-对工作目录进行修改" class="headerlink" title="创建工作目录 对工作目录进行修改"></a>创建工作目录 对工作目录进行修改</h4><ul><li><code>git add ./</code>(下面的属于解释)<ol><li>git hash-object -w 文件名(修改了多少个工作目录中的文件 此命令就要被执行多少次)</li><li>git update-index…</li></ol></li><li><code>git commit -m &quot;注释内容&quot;</code>(下面的属于解释)<ol><li>git write-tree</li><li>git commit-tree</li></ol></li></ul><h4 id="git暂存区命令"><a href="#git暂存区命令" class="headerlink" title="git暂存区命令"></a>git暂存区命令</h4><table><thead><tr><th><code>git init</code></th><th>初始化仓库</th></tr></thead><tbody><tr><td><code>git status</code></td><td>查看本地工作区信息</td></tr><tr><td><code>git diff</code></td><td>查看还有哪些文件没有暂存</td></tr><tr><td><code>git diff --staged</code></td><td>查看哪些修改已经被暂存,还没有提交</td></tr><tr><td><code>git add ./</code></td><td>提交所有变化</td></tr><tr><td><code>git add –u</code></td><td>提交被修改和被删除文件(不包括新文件)</td></tr><tr><td><code>git add –A</code></td><td>提交所有变化</td></tr><tr><td><code>git ls-files -s</code></td><td>查看暂存区存储状况</td></tr></tbody></table><h4 id="更改文件与提交"><a href="#更改文件与提交" class="headerlink" title="更改文件与提交"></a>更改文件与提交</h4><table><thead><tr><th><code>git rm 文件名</code></th><th>删除工作目录中的对应文件 再将修改添加到暂存区</th></tr></thead><tbody><tr><td><code>git mv 原文件名 新文件名</code></td><td>将工作目录中的文件进行重命名 再将修改添加到暂存区</td></tr><tr><td><code>git commit</code></td><td>在文本中编辑注释</td></tr><tr><td><code>git commit -a</code></td><td>跳过暂存区提交</td></tr><tr><td><code>git commit -m 注释</code></td><td>将暂存区提交到版本库</td></tr><tr><td><code>git commit -a -m 注释</code></td><td>跳过暂存区提交编辑注释</td></tr><tr><td><code>git commit –amend 注释</code></td><td>(原来提交基础上提交,不是新的提交)</td></tr></tbody></table><h4 id="git版本查看"><a href="#git版本查看" class="headerlink" title="git版本查看"></a>git版本查看</h4><table><thead><tr><th><code>git log</code></th><th>带有完全键很多信息的版本查看,如作者</th></tr></thead><tbody><tr><td><code>git log --oneline</code></td><td>只有部分键,部分信息的版本查看</td></tr><tr><td><code>git log --prety=oneline</code></td><td>查看提交的历史记录</td></tr><tr><td><code>git log --oneline --decorate --graph --all</code></td><td>查看项目分叉历史</td></tr><tr><td><code>git config --global alias.别名</code></td><td>“git后的命令”配置别名</td></tr><tr><td><code>git log -1</code></td><td>后面加数字,显示最近的几次提交</td></tr></tbody></table><h3 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h3><table><thead><tr><th><code>git branch</code></th><th>显示分支列表</th></tr></thead><tbody><tr><td><code>git branch 分支名</code></td><td>创建分支</td></tr><tr><td><code>git checkout 分支名</code></td><td>切换分支</td></tr><tr><td><code>git branch -D 分支名</code></td><td>强制删除分支</td></tr><tr><td><code>git branch -d branchname</code></td><td>普通删除分支</td></tr><tr><td><code>git merge branchname</code></td><td>合并分支</td></tr><tr><td><code>git reflog –-date=local</code></td><td>查看当前分支是基于哪个分支建立的</td></tr></tbody></table><ul><li>快进合并:分支在一条线上,不会产生冲突</li><li>典型合并:分支不在同一条线上,有机会产生冲突</li><li>解决冲突:打开冲突的文件 进行修改add commit</li></ul><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><blockquote><p>在切换分支时,如果当前分支上有<span style="color:red">未暂存的修改(第一次)或者有未提交的的暂存(第一次)</span>分支可以切换成功,但这种操作可能污染其它分支</p></blockquote><h4 id="区域的的更改"><a href="#区域的的更改" class="headerlink" title="区域的的更改"></a>区域的的更改</h4><ul><li>工作区<ul><li>如何撤回自己在工作目录中的修改(git checkout –filename)</li><li>git restore 文件名</li></ul></li><li>暂存区<ul><li>如何撤回自己的暂存:(git reset HEAD fileman)</li><li>git restore –staged 文件名</li></ul></li><li>版本库<ul><li>如何撤回自己的提交</li><li>1.注释写错了重新给用户一次机会该注释<code>git commit --amend</code></li></ul></li></ul><h4 id="版本回退-revert和resert"><a href="#版本回退-revert和resert" class="headerlink" title="版本回退(revert和resert)"></a>版本回退(revert和resert)</h4><blockquote><p><code>git log</code></p><blockquote><p><code>git reflog</code>只要是HEAD有变化,那么<code>git rsflog</code>就会记录下来</p></blockquote></blockquote><ol><li><code>git revert</code>是用一次新的commit来回滚之前的commit,<code>git reset</code>是直接删除指定的commit.</li><li><code>git reset</code> 是把HEAD<strong>向后移动</strong>了一下,而<code>git revert</code>是HEAD<strong>继续前进</strong></li><li>新的commit的内容和要revert的内容正好相反,能够抵消要被revert的内容</li></ol><blockquote><p>参数:</p></blockquote><ol><li><strong>–soft</strong>:重置HEAD到另外一个commit,但也到此为止 , 所有变更都集中到暂存区,工作区</li><li><strong>–hard</strong>:危险操作,所有变更全部丢失,不管本地仓,暂存区,工作区</li><li><strong>–mixed</strong>:所有变更保存到工作区,本地仓,暂存区都丢失(默认参数)</li></ol><h5 id="resert"><a href="#resert" class="headerlink" title="resert"></a>resert</h5><ul><li><code>HEAD~</code>指针跟一个整数,指的是你要回退几次提交<ol><li><code>git reset --soft HEAD~  (--amend)</code>:只动HEAD(带着分支一起移动)</li><li><code>git reset [--mixed] HEAD~</code>动HEAD(带着分支一起移动),动了暂存区</li><li><code>git reset --hard HEAD~</code>动HEAD(带着分支一起移动),动了暂存区 动了工作目录(<span style="color:red">需要谨慎</span>)</li></ol></li></ul><h5 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h5><ol><li><code>git revert HEAD</code>:撤销前一次的commit</li><li><code>git revert HEAD^</code>:撤销前前一次的commit</li><li><code>git revert commit-id</code>:撤销指定版本的提交</li></ol><blockquote><p><code>-n</code>或者<code>–no-commit</code>,应用这个参数会让revert改动只限于本地仓库,而不自动进行commit</p></blockquote><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><ol><li><code>git remote –v</code>:查看远程版本库信息</li><li><code>git remote set-url origin git@...</code>:更改远程仓库地址(ssh)</li></ol><blockquote><p><code>git branch -r</code>:查看远程分支</p></blockquote><ul><li><code>git branch -a</code>:查看所有分支</li></ul><blockquote><p><code>git fetch &lt;远程主机&gt; &lt;分支名&gt;</code>:取回远程主机的分支</p></blockquote><ul><li>例如<code>git fetch origin master</code>:取回origin的master分支</li></ul><blockquote><p>合并远程分支</p></blockquote><ul><li><p><code>git rebase</code> 和<code>git merge</code>的区别是<code>git rebase</code>形成的是一条线,会把你当前的几个commit,放到最新commit的后面(所以rebase并没有执行合并操作).<code>git merge</code> 会把公共分支和你当前的commit按照提交时间合并在一起,形成一个新的 commit 提交,<span style="color:red">注意不要在公共分支使用rebase</span></p></li><li><p><code>git merge origin/master</code>:合并某个分支到当前分支</p><ul><li><strong>merge</strong>:遇见冲突后会直接停止,等待手动解决冲突并重新提交 commit 后,才能再次 merge</li></ul></li><li><p><code>git rebase origin/master</code>:将一个分支的修改合并到当前分支</p><ul><li><strong>rebase</strong>:遇见冲突后会暂停当前操作,开发者可以选择手动解决冲突,然后 <code>git rebase --continue</code> 继续,或者<code>--skip</code>跳过(当前分支的修改会直接覆盖目标分支的冲突部分)</li></ul></li></ul><blockquote><p><code>git pull</code>:用于从远程获取代码并合并到本地分支</p></blockquote><ul><li>可以看作这两个的简写:<code>git fetch</code>和 <code>git merge FETCH_HEAD</code></li></ul><ol><li>更新操作:<ul><li><code>git pull</code></li><li><code>git pull origin</code></li></ul></li><li><code>git pull origin master:bro</code>:将远程仓库origin的master分支拉取与本地的bro分支合并</li></ol><h4 id="分支注意"><a href="#分支注意" class="headerlink" title="分支注意"></a>分支注意</h4><ul><li><p>在切换的时候一定要保证当前分支是干净的！！！</p><ul><li>允许切换分支:<ol><li>分支上所有的内容处于已提交的状态</li><li>(避免)分支上所有的内容是处于初始化创建 处于未跟踪状态</li><li>(避免)分支上的内容是初始化创建 第一次处于已暂存状态</li></ol></li><li>不允许切分支:<ul><li>分支上所有的内容处于已修改的状态 或 第二次以后的已暂存状态</li></ul></li></ul></li><li><p>在分支上的工作做到一半时 如果有切换分支的需求,我们应该将先有的工作存储起来</p><ul><li><code>git stash</code>:会将当前分支上的工作推到一个栈中</li></ul></li><li><p>分支切换:进行其它工作 完成其它工作 切回原分支</p><ul><li><code>git stash apply</code>:将栈顶的工作内容还原 但不让任何内容出栈</li><li><code>git stash drop</code>:取出栈顶的工作内容后 就应该将其删除(出栈)</li><li><code>git stash pop</code>&#x3D;<code>git stash apply+git stash drop</code></li><li><code>git stash list</code>:查看存储</li></ul></li></ul><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><blockquote><p>git可以对某个版本打上标签(tag),表示本版本为发行版</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git tag</td><td>查看所有标签</td></tr><tr><td>git tag -l 1.<em>.</em></td><td>打印符合检索田间的标签</td></tr><tr><td>git checkout 1.0.0</td><td>查看对应标签的状态</td></tr></tbody></table><blockquote><p>创建本地标签</p></blockquote><ul><li>针对特定commit版本SHA创建标签<ul><li><code>git tag -a v1.0.0 0c3b62d -m &quot;这是备注信息&quot;</code></li><li>-a:创建附注标签</li><li>&lt;哈希值&gt;:特定commit版本SHA</li><li>-m:附注</li><li>都是可选的</li></ul></li><li>创建轻量标签<code>git tag v1.0.0</code></li></ul><blockquote><p>推送标签到远程仓库</p></blockquote><ol><li>发送所有<code>git push origin --tags</code></li><li>指定版本发送<code>git push origin 1.0.0</code></li></ol><blockquote><p>删除本地标签<code>git tag -d v1.0.0</code></p><p>删除远程仓库对应的标签<code>git push origin --delete v1.0.0</code></p></blockquote><ul><li><code>git show v1.0.0</code>:该标签完整的信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map和Set的使用</title>
      <link href="/2021/10/04/map-he-set-de-shi-yong/"/>
      <url>/2021/10/04/map-he-set-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a><a href="#map%E5%AF%B9%E8%B1%A1">Map对象</a></h2><blockquote><p>一个问题:在js中<code>Object</code>无法使用除<code>string</code>类型作为非字符串<br>使用<code>Map</code>可以以任何类型作为键(包括函数、对象或任意基本类型)</p></blockquote><ul><li>本质是一组包含键值对的集合</li><li>Map中的键是顺序的。因此，当迭代的，一个Map对象以插入时的顺序返回键值</li><li>Map的键值对个数可以通过size属性获取</li><li>Map是<code>iterable</code>的，所以可以直接被迭代</li></ul><h3 id="初始化Map对象"><a href="#初始化Map对象" class="headerlink" title="初始化Map对象"></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96map%E5%AF%B9%E8%B1%A1">初始化Map对象</a></h3><blockquote><p>使用new初始化Map对象,初始化时传入一个二维数组<br>键值的映射</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a: Map&lt;string, number&gt; &#x3D; new Map([  [&quot;a&quot;, 1],  [&quot;b&quot;, 2],])console.log(a)&#x2F;&#x2F;输出:Map(2) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型属性和方法-Map-prototype"><a href="#原型属性和方法-Map-prototype" class="headerlink" title="原型属性和方法(Map.prototype)"></a><a href="#%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95mapprototype">原型属性和方法(Map.prototype)</a></h3><h4 id="使用size-而不是length获取长度"><a href="#使用size-而不是length获取长度" class="headerlink" title="使用size,而不是length获取长度"></a>使用<code>size</code>,而不是<code>length</code>获取长度</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.size)&#x2F;&#x2F;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><blockquote><p>使用keys拿到所有的键</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.keys())&#x2F;&#x2F;[Map Iterator] &#123; &#39;a&#39;, &#39;b&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><blockquote><p>使用values拿到所有的值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.values())&#x2F;&#x2F;[Map Iterator] &#123; 1, 2 &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><blockquote><p>返回<code>key</code>对应的<code>value</code>，如果不存在，则返回undefined</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.get(&quot;a&quot;))&#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><blockquote><p>存储一个键值的映射</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.set(&quot;c&quot;,3)console.log(a)&#x2F;&#x2F;Map(3) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2, &#39;c&#39; &#x3D;&gt; 3 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><blockquote><p>删除map中指定key对应的一组key-value元素</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.delete(&quot;c&quot;)console.log(a)&#x2F;&#x2F;Map(2) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="has"><a href="#has" class="headerlink" title="has"></a>has</h4><blockquote><p>检查Map是否有指定key对应的value。</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.has(&quot;a&quot;))&#x2F;&#x2F;trueconsole.log(a.has(&quot;c&quot;))&#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><blockquote><p>清空所有键值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Map遍历方式"><a href="#Map遍历方式" class="headerlink" title="Map遍历方式"></a><a href="#map%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F">Map遍历方式</a></h3><h4 id="遍历value"><a href="#遍历value" class="headerlink" title="遍历value"></a>遍历value</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let value of a.values()) &#123;  console.log(value)  &#x2F;&#x2F;1  &#x2F;&#x2F;2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历keys"><a href="#遍历keys" class="headerlink" title="遍历keys"></a>遍历keys</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let key of a.keys()) &#123;  console.log(key)  &#x2F;&#x2F;a  &#x2F;&#x2F;b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用for…of遍历"><a href="#使用for…of遍历" class="headerlink" title="使用for…of遍历"></a>使用for…of遍历</h4><blockquote><p><code>for...of</code>遍历得到一组组数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let item of a) &#123;  console.log(item)  &#x2F;&#x2F;[ &#39;a&#39;, 1 ]  &#x2F;&#x2F;[ &#39;b&#39;, 2 ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用foreach遍历"><a href="#使用foreach遍历" class="headerlink" title="使用foreach遍历"></a>使用foreach遍历</h4><blockquote><p><code>foreach</code>遍历拿到的值和键</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.forEach((value, key) &#x3D;&gt; &#123;  console.log(value, key)  &#x2F;&#x2F;1 a  &#x2F;&#x2F;2 b&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用entries遍历"><a href="#使用entries遍历" class="headerlink" title="使用entries遍历"></a>使用entries遍历</h4><blockquote><p>迭代器 函数默认就是<code>entries()</code>函数<br>该方法返回Map集合中每个 <code>[key，value]</code>元素的对象</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.entries())&#x2F;&#x2F;[Map Entries] &#123; [ &#39;a&#39;, 1 ], [ &#39;b&#39;, 2 ] &#125;for (let item of a.entries()) &#123;  console.log(item)  &#x2F;&#x2F;[ &#39;a&#39;, 1 ]  &#x2F;&#x2F;[ &#39;b&#39;, 2 ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用spread扩展运算符"><a href="#使用spread扩展运算符" class="headerlink" title="使用spread扩展运算符"></a>使用spread扩展运算符</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(...a.keys())&#x2F;&#x2F;a bconsole.log(...a.values())&#x2F;&#x2F;1 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Map的注意"><a href="#Map的注意" class="headerlink" title="Map的注意"></a><a href="#map%E7%9A%84%E6%B3%A8%E6%84%8F">Map的注意</a></h3><h4 id="Map和数组的关系"><a href="#Map和数组的关系" class="headerlink" title="Map和数组的关系"></a>Map和数组的关系</h4><blockquote><ul><li>Map构造函数可以将一个二维键值对数组转换成一个Map对象</li><li>使用扩展运算符将Map对象换成一个二维键值对数组</li><li>可以使用<code>Array.from()</code>将一个Map对象转换成一个二维键值对数组</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let b&#x3D;[[&quot;a&quot;,1],[&quot;b&quot;,2]]let a: Map&lt;string, number&gt; &#x3D; new Map(b)&#x2F;&#x2F;使用Array.from()函数console.log(Array.from(a))&#x2F;&#x2F;使用展开运算符console.log([...myMap])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制或合并Maps"><a href="#复制或合并Maps" class="headerlink" title="复制或合并Maps"></a>复制或合并Maps</h4><ul><li>[参考]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li></ul><blockquote><ul><li>复制</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let c&#x3D;new Map(a)console.log(a&#x3D;&#x3D;&#x3D;c)&#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>浅比较,比较的是地址,不为同一个对象的引用</li></ul><blockquote><p>对象和对象可以进行合并,对象和数组可以进行合并</p><blockquote><p>合并之后如果有重复的键值，则后面的会覆盖前面的<br>本质是用展开运算符先将对象转换成数组</p></blockquote></blockquote><h2 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a><a href="#set%E5%AF%B9%E8%B1%A1">Set对象</a></h2><blockquote><ul><li>Set 对象允许你存储任何类型的<span style="color:red">唯一值</span>，无论是原始值或者是对象引用</li><li>传入对象比较的是地址,不同地址也是唯一值</li></ul></blockquote><h3 id="初始化Set对象"><a href="#初始化Set对象" class="headerlink" title="初始化Set对象"></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96set%E5%AF%B9%E8%B1%A1">初始化Set对象</a></h3><blockquote><p>传入一个一维数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a &#x3D; new Set([1, &quot;a&quot;, &#123; a: &quot;name&quot; &#125;, &#123; a: &quot;name&quot; &#125;])console.log(a)&#x2F;&#x2F;Set(4) &#123; 1, &#39;a&#39;, &#123; a: &#39;name&#39; &#125;, &#123; a: &#39;name&#39; &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="原型属性和方法-Set-prototype"><a href="#原型属性和方法-Set-prototype" class="headerlink" title="原型属性和方法(Set.prototype)"></a><a href="#%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95setprototype">原型属性和方法(Set.prototype)</a></h3><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.size)&#x2F;&#x2F;4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><blockquote><p>在对象中添加一个元素set</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let o &#x3D; &#123; a: &quot;name&quot; &#125;a.add(o)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h4><blockquote><p>返回一个布尔值,表示在Set中是否存在该值</p></blockquote><ul><li>注意:如果直接传入一个对象属性,地址值不同,返回false<ul><li>所以最好将引用传入</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.has(o))&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h4><ul><li>注意:如果直接传入一个对象属性,地址值不同,并不会删除,<ul><li>所以最好将引用传入,删除时传入引用</li><li>且返回值是一个boolean</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.delete(&#123; a: &quot;name&quot; &#125;))&#x2F;&#x2F;falseconsole.log(a.delete(o))&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="values-和keys"><a href="#values-和keys" class="headerlink" title="values()和keys()"></a>values()和keys()</h4><blockquote><p><code>keys()</code>和<code>values()</code>方法相同，返回一个新的对象的对象对象，Set应该包含的插入顺序的所有元素的值</p></blockquote><ul><li>且同样可以使用展开运算符</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.keys())&#x2F;&#x2F;[Set Iterator] &#123; 1, &#39;a&#39;, &#123; a: &#39;name&#39; &#125;, &#123; a: &#39;name&#39; &#125; &#125;console.log(...a.values())&#x2F;&#x2F;1 a &#123; a: &#39;name&#39; &#125; &#123; a: &#39;name&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><blockquote><p>删除Set对象中的所有元素</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><a href="#%E9%81%8D%E5%8E%86">遍历</a></h3><blockquote><p>对于Set来讲<code>value</code>和<code>key</code>是相同的,不管是使用<code>forEach</code>,<code>for...of</code>迭代出的键和值都是相同的(这里就不演示了)</p></blockquote><h3 id="Set的注意"><a href="#Set的注意" class="headerlink" title="Set的注意"></a><a href="#set%E7%9A%84%E6%B3%A8%E6%84%8F">Set的注意</a></h3><ul><li>[参考]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li></ul><h4 id="Set和Array的关系"><a href="#Set和Array的关系" class="headerlink" title="Set和Array的关系"></a>Set和Array的关系</h4><blockquote><ul><li>Set构造函数可以将一个一维数组转换成一个Map对象</li><li>使用扩展运算符将Map对象换成一个一维数组</li><li>可以使用<code>Array.from()</code>将一个Set对象转换成一个一维数组</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let myArray &#x3D; [&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]let mySet &#x3D; new Set(myArray)console.log(Array.from(mySet))&#x2F;&#x2F;[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]console.log([...mySet])&#x2F;&#x2F;[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><blockquote><p>利用Set对象中只有唯一值的特性,可以做到数组去重</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const numbers &#x3D; [2,3,4,4,2,3,3,4,4,5,5,6,6,7,5,32,3,4,5]console.log([...new Set(numbers)])&#x2F;&#x2F; [2, 3, 4, 5, 6, 7, 32]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><blockquote><p>在js中string也是一个一维数组,利用Set可以将string变成一个一维数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log([...new Set(&quot;index&quot;)])&#x2F;&#x2F;[ &#39;i&#39;, &#39;n&#39;, &#39;d&#39;, &#39;e&#39;, &#39;x&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>并且Set可以区分大小写</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(new Set(&quot;Firefox&quot;))  &#x2F;&#x2F; Set(7) [ &quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot; ]console.log(new Set(&quot;firefox&quot;))&#x2F;&#x2F; Set(6) [ &quot;f&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3+ts工程化搭建</title>
      <link href="/2021/10/02/vue3-ts-gong-cheng-hua-da-jian/"/>
      <url>/2021/10/02/vue3-ts-gong-cheng-hua-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli配置脚手架的注意项"><a href="#vue-cli配置脚手架的注意项" class="headerlink" title="vue-cli配置脚手架的注意项"></a><a href="#vue-cli%E9%85%8D%E7%BD%AE%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E9%A1%B9">vue-cli配置脚手架的注意项</a></h2><ul><li><p>选择手动配置后的选项</p><ul><li><input checked="" disabled="" type="checkbox"> Babel: Babel编译</li><li><input checked="" disabled="" type="checkbox"> TypeScript:TypeScript支持</li><li><input disabled="" type="checkbox"> Progressive Web App (PWA) Support: PWA支持</li><li><input checked="" disabled="" type="checkbox"> Router: Vue路由</li><li><input checked="" disabled="" type="checkbox"> Vuex: Vue状态管理</li><li><input checked="" disabled="" type="checkbox"> CSS Pre-processors: CSS预编译器（包括:SCSS&#x2F;Sass,Less,Stylus）</li><li><input checked="" disabled="" type="checkbox"> Linter &#x2F; Formatter: 代码检测和格式化</li><li><input disabled="" type="checkbox"> Unit Testing: 单元测试</li><li><input disabled="" type="checkbox"> E2E Testing: 端到端测试</li></ul></li><li><p>使用Linter &#x2F; Formatter选择</p><ul><li><input checked="" disabled="" type="checkbox"> ESLint+Prettier:选择自定义风格项(自己配置)</li><li>之后是关于在保存前检测还是fix和commit时检测</li><li><img src="./Prettier.png" alt="选项"></li></ul></li><li><p><img src="./package%E7%9A%84%E4%BF%9D%E5%AD%98.png" alt="包配置的保存"></p><ul><li><code>In dedicated config files</code>:单独保存在各自的配置文件中</li><li><code>In package.json</code>:保存在package.json文件中</li></ul></li></ul><h2 id="集成editorconfig"><a href="#集成editorconfig" class="headerlink" title="集成editorconfig"></a><a href="#%E9%9B%86%E6%88%90editorconfig">集成editorconfig</a></h2><blockquote><p>说明:<code>editorconfig</code>配置是为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格</p></blockquote><ul><li><p>VSCode需要安装一个插件:EditorConfig for VS Code</p></li><li><p>参考文档:<a href="http://editorconfig.org/">http://editorconfig.org</a></p></li><li><p>配置<code>.editorconfig</code>文件</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root = true<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>charset = utf<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># 设置文件字符集为 utf-8</span>indent_style = space <span class="token comment"># 缩进风格（tab | space）</span>indent_size = 2 <span class="token comment"># 缩进大小</span>end_of_line = lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>trim_trailing_whitespace = true <span class="token comment"># 去除行首的任意空白字符</span>insert_final_newline = true <span class="token comment"># 始终在文件末尾插入一个新行</span><span class="token punctuation">[</span><span class="token important">*.md</span><span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>max_line_length = offtrim_trailing_whitespace = false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prettier工具"><a href="#prettier工具" class="headerlink" title="prettier工具"></a><a href="#prettier%E5%B7%A5%E5%85%B7">prettier工具</a></h2><blockquote><p>说明:一款强大的代码格式化工具,支持 <code>JavaScript</code>,<code>TypeScript</code>,<code>CSS</code>,<code>SCSS</code>,<code>Less</code>,<code>JSX</code>,<code>Angular</code>,<code>Vue</code>,<code>GraphQL</code>,<code>JSON</code>,<code>Markdown</code> 等语言</p></blockquote><ul><li>vue脚手架并不会集成<code>prettier</code>插件,要自己安装<ul><li><code>npm install prettier -D</code></li></ul></li></ul><h3 id="配置-prettierrc文件"><a href="#配置-prettierrc文件" class="headerlink" title="配置.prettierrc文件"></a><a href="#%E9%85%8D%E7%BD%AEprettierrc%E6%96%87%E4%BB%B6">配置<code>.prettierrc</code>文件</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>useTabs</td><td>使用tab缩进还是空格缩进,选择false</td></tr><tr><td>tabWidth</td><td>tab是空格的情况下,是几个空格,选择2个</td></tr><tr><td>printWidth</td><td>当行字符的长度,推荐80</td></tr><tr><td>singleQuote</td><td>使用单引号还是双引号,选择true,使用单引号</td></tr><tr><td>trailingComma</td><td>在多行输入的尾逗号是否添加,设置为 <code>none</code></td></tr><tr><td>semi</td><td>语句末尾是否要加分号,默认值true,选择false表示不加</td></tr></tbody></table><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-prettierignore忽略文件"><a href="#配置-prettierignore忽略文件" class="headerlink" title="配置.prettierignore忽略文件"></a><a href="#%E9%85%8D%E7%BD%AEprettierignore%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">配置<code>.prettierignore</code>忽略文件</a></h3><pre class="line-numbers language-ignore" data-language="ignore"><code class="language-ignore"><span class="token entry string"><span class="token punctuation">/</span>dist<span class="token punctuation">/</span><span class="token operator">*</span></span><span class="token entry string">.local</span><span class="token entry string">.output.js</span><span class="token entry string"><span class="token punctuation">/</span>node_modules<span class="token punctuation">/</span><span class="token operator">**</span></span><span class="token entry string"><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.svg</span><span class="token entry string"><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.sh</span><span class="token entry string"><span class="token punctuation">/</span>public<span class="token punctuation">/</span><span class="token operator">*</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置一次性修改"><a href="#配置一次性修改" class="headerlink" title="配置一次性修改"></a><a href="#%E9%85%8D%E7%BD%AE%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BF%AE%E6%94%B9">配置一次性修改</a></h3><blockquote><p>在<code>package.json</code>中配置一个<code>scripts</code>(脚本):</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write ."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ESLint检测"><a href="#ESLint检测" class="headerlink" title="ESLint检测"></a><a href="#eslint%E6%A3%80%E6%B5%8B">ESLint检测</a></h2><blockquote><p>说明: Vue会默认帮助我们配置需要的ESLint环境</p></blockquote><ul><li><p>VSCode需要安装ESLint插件</p></li><li><p>注意:<code>eslint</code>和<code>prettier</code>冲突的问题</p><ul><li>插件的安装(vue创建项目时,如果选择<code>prettier</code>,这两个插件会自动安装):</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i eslint-plugin-prettier eslint-config-prettier -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>.eslintrc.js</code>继承中添加插件</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">extends<span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"plugin:vue/vue3-essential"</span><span class="token punctuation">,</span>   <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/typescript/recommended"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/prettier"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/prettier/@typescript-eslint"</span><span class="token punctuation">,</span>   'plugin<span class="token operator">:</span>prettier/recommended' <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-Husky和eslint"><a href="#git-Husky和eslint" class="headerlink" title="git Husky和eslint"></a><a href="#git-husky%E5%92%8Ceslint">git Husky和eslint</a></h2><blockquote><ul><li>说明husky是一个git hook工具,可以帮助我们触发git提交的各个阶段：<code>pre-commit</code>,<code>commit-msg</code>,<code>pre-push</code></li><li>项目虽然使用eslint了,但是不能保证组员提交代码之前都将<code>eslint</code>中的问题解决掉</li></ul></blockquote><ul><li>保证代码仓库中的代码都是符合eslint规范</li><li>在组员执行 <code>git commit</code> 命令的时候对其进行校验,如果不符合eslint规范,那么自动通过规范进行修复</li></ul><ol><li>安装相关依赖:<code>npm install husky -D</code></li><li>在项目目录下创建<code>.husky</code>文件夹<ul><li><code>npx husky install</code></li></ul></li><li>在<code>package.json</code>中添加一个脚本<ul><li><code>&quot;prepare&quot;:&quot;husky install&quot;</code></li></ul></li><li>初始化<code>pre-commit</code>脚本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">"npm run lint"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这个时候我们执行git commit的时候会自动对代码进行lint校验.</p><blockquote><p>这又产生了一个问题:那就是commit提交的规范,接下来要说的</p></blockquote></blockquote><h2 id="git-commit规范"><a href="#git-commit规范" class="headerlink" title="git commit规范"></a><a href="#git-commit%E8%A7%84%E8%8C%83">git commit规范</a></h2><h3 id="代码提交风格"><a href="#代码提交风格" class="headerlink" title="代码提交风格"></a><a href="#%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E9%A3%8E%E6%A0%BC">代码提交风格</a></h3><blockquote><p>说明:<code>Commitizen</code> 是一个帮助我们编写规范 <code>commit message</code> 的工具</p></blockquote><ul><li>git commit会按照统一的风格来提交,这样可以快速定位每次提交的内容,方便之后对版本进行控制</li></ul><ol><li>安装相关依赖:<code>npm install commitizen -g</code>(产生两个命令行工具)<ul><li><code>cz</code>:根据约定用于提交,如果是<code>-g</code>,可以使用<code>git-cz</code></li><li><code>git-cz</code>是<code>cz</code>的别名</li><li><code>commitizen</code>:将适配器安装到项目中</li></ul></li><li>详细的使用方法:<code>commitizen init &lt; adapter-npm-name &gt; (args)</code><ul><li>从npm安装一个commizen适配器,并将其添加到你的<code>package.json</code></li></ul></li><li>安装<code>cz-conventional-changelog</code>并且初始化<code>cz-conventional-changelog</code></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx commitizen init cz-conventional-changelog --save-dev --save-exact<span class="token comment"># --save-exact固定依赖包的版本,不要带^或~,避免出现小版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在项目中安装<code>cz-conventional-changelog</code> 适配器依赖</li><li>将适配器依赖保存到<code>package.json</code>的<code>devDependencies</code>字段信息</li><li>在<code>package.json</code>中新增<code>config.commitizen</code>字段信息,主要用于配置cz工具的适配器路径</li><li><img src="./commit%E8%A7%84%E8%8C%83.jpg" alt="配置生成"></li></ul><h4 id="使用命令以及配置脚本"><a href="#使用命令以及配置脚本" class="headerlink" title="使用命令以及配置脚本"></a>使用命令以及配置脚本</h4><ul><li>提交代码需要使用<code>npx cz</code></li><li>同时也可以在<code>scripts</code>中构建一个命令来执行 <code>cz</code><ul><li><code>&quot;commit&quot;:&quot;cz&quot;</code>:直接运行<code>npm run commit</code></li></ul></li></ul><h4 id="commit-message的选项"><a href="#commit-message的选项" class="headerlink" title="commit message的选项"></a><a href="#commit-message%E7%9A%84%E9%80%89%E9%A1%B9">commit message的选项</a></h4><blockquote><ul><li>选项一:本次更新的类型(Select the type of change that you’re committing)</li><li>选项二:本次修改的范围,可以事先约定好,例如:<code>login</code>,<code>main</code>等(What is the scope of this change)</li><li>选项三:提交的信息(Write a short, imperative tense description of the change)</li><li>选项四:提交详细的描述信息(Provide a longer description of the change)</li><li>选项五:是否为一次重大的更改(Are there any breaking changes)</li><li>选项六:是否影响到某个为解决的问题(Does this change affect any open issues)</li></ul></blockquote><h5 id="git提交结构"><a href="#git提交结构" class="headerlink" title="git提交结构"></a>git提交结构</h5><blockquote><p>git提交说明可以分成三个部分<strong>Header</strong>,<strong>Body</strong>(commit的详细描述,说明代码提交的详细说明) 和 <strong>Footer</strong></p></blockquote><h6 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h6><blockquote><p><strong>Header</strong>部分包括三个字段<strong>type</strong>(必需),<strong>scope</strong>(可选)和<strong>subject</strong>(必需)</p></blockquote><ul><li><strong>Type</strong>:用于说明commit的提交性质</li></ul><table><thead><tr><th>Type</th><th>作用</th><th>解释</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新增特性</td><td>(feature)</td></tr><tr><td><code>fix</code></td><td>修复</td><td>Bug(bug fix)</td></tr><tr><td><code>docs</code></td><td>修改文档</td><td>(documentation)</td></tr><tr><td><code>style</code></td><td>代码格式修改</td><td>(white-space, formatting, missing semi colons, etc)</td></tr><tr><td><code>refactor</code></td><td>代码重构</td><td>(refactor)</td></tr><tr><td><code>perf</code></td><td>改善性能</td><td>(A code change that improves performance)</td></tr><tr><td><code>test</code></td><td>测试</td><td>(when adding missing tests)</td></tr><tr><td><code>build</code></td><td>变更项目构建或外部依赖</td><td>（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td><code>ci</code></td><td>更改持续集成软件的配置文件和package中的scripts</td><td>例如 scopes: Travis, Circle 等</td></tr><tr><td><code>chore</code></td><td>变更构建流程或辅助工具</td><td>(比如更改测试环境)</td></tr><tr><td><code>revert</code></td><td>代码回退</td><td></td></tr></tbody></table><ul><li><strong>scope</strong>:说明commit影响的范围.scope依据项目而定,例如在业务项目中可以依据菜单或者功能模块划分,如果是组件库开发,则可以依据组件划分<ul><li><code>scope</code>可以省略</li></ul></li><li><strong>subject</strong>:是对<code>commit</code>的简短描述</li></ul><h6 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h6><blockquote><p>如果代码的提交是不兼容变更或关闭缺陷,则Footer必需,否则可以省略。</p></blockquote><ul><li><strong>不兼容变更</strong>:当前代码与上一个版本不兼容,则Footer以<code>BREAKING CHANGE</code>开头,后面是对变动的描述,以及变动的理由和迁移方法。</li><li><strong>关闭缺陷</strong>:如果当前提交是针对特定的issue,那么可以在Footer部分填写需要关闭的单个 issue 或一系列issues</li></ul><h4 id="commitizen代码的提交验证"><a href="#commitizen代码的提交验证" class="headerlink" title="commitizen代码的提交验证"></a><a href="#commitizen%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8F%90%E4%BA%A4%E9%AA%8C%E8%AF%81">commitizen代码的提交验证</a></h4><blockquote><p>说明:如果<code>git commit</code> 按照不规范的格式提交,可以通过commitlint来限制提交</p></blockquote><ol><li><p>安装依赖:</p><ul><li><code>npm i @commitlint/config-conventional @commitlint/cli -D</code></li></ul></li><li><p>在根目录创建<code>commitlint.config.js</code>文件,配置<code>commitlint</code>:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@commitlint/config-conventional'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用husky生成<code>commit-msg</code>文件,验证提交信息</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">"npx --no-install commitlint --edit <span class="token variable">$1</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Commitizen日志"><a href="#Commitizen日志" class="headerlink" title="Commitizen日志"></a><a href="#Commitizen%E6%97%A5%E5%BF%97">Commitizen日志</a></h4><blockquote><p>如果使用了以上的工具集,那么就可以使用<code>conventional-changelog-cli</code>快速生成开发日志</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> conventional-changelog-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在<code>package.json</code>脚本中添加日志命令</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>执行<code>npm run version</code>后可查看产生的日志<strong>CHANGELOG.md</strong><br><span style="color:red">注意要使用正确的Header的type,否则生成的日志会不准确,这里只是一个示例,生成的日志不是很严格</span></p></blockquote><h2 id="生产环境-开发环境-测试环境"><a href="#生产环境-开发环境-测试环境" class="headerlink" title="生产环境,开发环境,测试环境"></a><a href="#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83">生产环境,开发环境,测试环境</a></h2><ul><li>根据<code>process.env.NODE_ENV</code>区分<ul><li>开发环境: <code>development</code></li><li>生成环境: <code>production</code></li><li>测试环境: <code>test</code></li></ul></li></ul><h3 id="使用config文件封装各种测试"><a href="#使用config文件封装各种测试" class="headerlink" title="使用config文件封装各种测试"></a>使用config文件封装各种测试</h3><blockquote><p>脚手架会自动检测</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let BASE_URL &#x3D; &#39;&#39;const TIME_OUT &#x3D; 10000if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39;) &#123;  BASE_URL &#x3D; &#39;...&#x2F;dev&#39;&#125; else if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;  BASE_URL &#x3D; &#39;...&#x2F;prod&#39;&#125; else &#123;  BASE_URL &#x3D; &#39;...&#x2F;test&#39;&#125;export &#123; BASE_URL, TIME_OUT &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用不同的环境配置文件"><a href="#使用不同的环境配置文件" class="headerlink" title="使用不同的环境配置文件"></a>使用不同的环境配置文件</h3><blockquote><p>使用<code>VUE_APP</code>开头的自定义变量,或者直接使用BASE_URL</p></blockquote><ol><li><code>.env.development</code>:<code>VUE_APP_BASE_URL=&#39;.../dev&#39;</code></li><li><code>.env.production</code>:<code>VUE_APP_BASE_URL= &#39;.../prod&#39;</code></li><li><code>.env.test</code>:<code>VUE_APP_BASE_URL= &#39;.../test&#39;</code></li></ol><blockquote><p>如果需要取值,需要用<code>process.env.VUE_APP_BASE_URL</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS中面向对象</title>
      <link href="/2021/10/01/ts-zhong-mian-xiang-dui-xiang/"/>
      <url>/2021/10/01/ts-zhong-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><ol><li><p>静态属性(类属性),使用<code>static</code>关键字,可以直接通过<code>类名.</code>调用</p><p>例如:<code>static gender:string=&quot;男&quot;</code></p></li><li><p><code>readonly</code>表示只读属性,无法修改</p><p>例如: <code>readonly height:number=123</code></p></li></ol><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><code>constructor</code>被称为构造函数,构造函数会在对象创建时调用</li><li>TIPS:<ul><li>在实例方法,this表示当前的实例</li><li>在构造函数中当前对象就是当前新建的那个对象</li><li>通过this向新建的对象中添加属性</li></ul></li></ol><pre class="line-numbers language-TS" data-language="TS"><code class="language-TS">class Dog&#123;  name: string  age:number  constructor(name:string,age:number)&#123;    this.name&#x3D;name    this.age&#x3D;age  &#125;  bark()&#123;    &#x2F;&#x2F;在方法中可以通过this表示当前调用的对象    console.log(this)  &#125;&#125;const dog&#x3D;new Dog(&quot;伞兵&quot;,3)console.log(dog)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><blockquote><p>继承是多态使用的前提,(子类不同的行为)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Animal&#123;  name: string  age:number  constructor(name:string,age:number)&#123;    this.name&#x3D;name    this.age&#x3D;age  &#125;  sayhello()&#123;    console.log(this.name+&quot;动物&quot;)  &#125;&#125;class Dog extends Animal&#123;  sayhello()&#123;    console.log(&quot;狗叫&quot;)  &#125;&#x2F;&#x2F;方法重写&#125;class Cat extends Animal&#123;  sayhello()&#123;    console.log(&#96;$&#123;this.name&#125;叫&#96;)  &#125;&#125;const dog&#x3D;new Dog(&quot;狗&quot;,2)const cat&#x3D;new Cat(&quot;猫&quot;,3)dog.sayhello()cat.sayhello()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><blockquote><p>在类的方法中,super就指的是当前类的父类</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Animal&#123;    name: string    age:number    constructor(name:string,age:number)&#123;      this.name&#x3D;name      this.age&#x3D;age    &#125;    sayhello()&#123;      console.log(this.name+&quot;动物&quot;)    &#125;  &#125;  class Dog extends Animal&#123;    gender:string    &#x2F;&#x2F;如果在子类写了构造函数会覆盖父类的构造函数    constructor(name:string,age:number,gender:string)&#123;      super(name,age)      this.gender&#x3D;gender    &#125;    sayhello()&#123;      super.sayhello()&#x2F;&#x2F;直接引用父类的方法    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h3><ol><li><code>public</code>:可以在任意位置修改</li><li><code>private</code>:私有属性,只能在类内部进行访问<ul><li>通过<code>get,set</code>方法进行访问</li></ul></li><li><code>protected</code>:只能在当前类和当前类的子类中访问</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Person&#123;   private _name:string   private _age:number    constructor(_name:string,_age:number)&#123;      this._name&#x3D;_name      this._age&#x3D;_age    &#125;    get name()&#123;      return this._name    &#125;    set name(value:string)&#123;      this._name&#x3D;value    &#125;    get age()&#123;      return this._age    &#125;    set age(value:number)&#123;      if(value&gt;&#x3D;0)&#123;        this._age&#x3D;value      &#125;    &#125;  &#125;  const person&#x3D;new Person(&quot;张三&quot;,12)  person.name&#x3D;&quot;lisi&quot;  console.log(person.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>继承是多态使用的前提<ul><li>定义很多通用的调用接口时, 通常会子类继承父类,通过多态来实现更加灵活的调用方式</li><li>父类本身可能并不需要对某些方法进行具体的实现,所以父类中定义的方法,可以定义为抽象方法</li></ul></li><li>在TypeScript中没有具体实现的方法(没有方法体)<ul><li>抽象方法,必须存在于抽象类中</li><li>抽象类是使用abstract声明的类</li></ul></li><li>抽象类的特点<ul><li>抽象类是不能被实例的话也就是<strong>不能通过new创建</strong></li><li>抽象方法必须被子类实现,否则该类必须是一个抽象类</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">abstract class Shape &#123;  abstract getArea(): number&#125;class Circle extends Shape &#123;  private r: number  constructor(r: number) &#123;    super()    this.r &#x3D; r  &#125;  getArea() &#123;    return this.r * this.r * 3.14  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在派生类中的构造函数必须调用<code>super()</code>方法</p></blockquote><h3 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h3><blockquote><p>类本身也是可以作为一种数据类型的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Person &#123;  name: string &#x3D; &quot;123&quot;  eating() &#123;&#125;&#125;const p &#x3D; new Person()const p1: Person &#x3D; &#123;  name: &quot;why&quot;,  eating() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举(enum)"></a>枚举(<code>enum</code>)</h2><ul><li>枚举其实就是将一组可能出现的值,一个个列举出来,定义在一个类型中,这个类型就是枚举类型</li><li>枚举允许开发者定义一组命名常量,常量可以是数字、字符串类型</li><li>枚举的默认值是从0开始的索引</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">enum Gender&#123;  Male&#x3D;0,  Female&#x3D;1&#125;let i:&#123;name:string,gender:Gender&#125;i&#x3D;&#123;  name:&quot;老孙&quot;,  gender:Gender.Male&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><h3 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h3><blockquote><p>对象的另外一种声明方式就是通过接口来声明</p></blockquote><ul><li>可以定义可选类型</li><li>可以定义只读属性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IInfoType &#123;  readonly name: string  age: number  friend?: &#123;    name: string  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><blockquote><p>使用<code>interface</code>来定义对象类型,这个时候其中的<code>属性名,类型,方法</code>都是确定的,但是有时候我们会遇到类似映射关系的情况</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ILanguageYear &#123;  [name: string]: number&#125;const languageYear: ILanguageYear &#x3D; &#123;  &quot;C&quot;: 1972,  &quot;Java&quot;: 1995,  &quot;JavaScript&quot;: 1996,  &quot;TypeScript&quot;: 2014&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><blockquote><p>建议还是用别名来定义函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Isum&#123;  (num1:number,num2:number):number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接口的继承和实现"><a href="#接口的继承和实现" class="headerlink" title="接口的继承和实现"></a>接口的继承和实现</h3><blockquote><p>接口是支持多继承的（类不支持多继承）,子类拥有父类的所有属性</p></blockquote><ul><li>类可以实现多个接口</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ISwim &#123;  swimming: () &#x3D;&gt; void&#125;interface IFly &#123;  flying: () &#x3D;&gt; void&#125;interface IAction extends ISwim, IFly &#123;&#125;class Dog implements ISwim,IFly&#123;  swimming()&#123;    console.log(&quot;我可以游泳&quot;)  &#125;,  flying()&#123;    console.log(&quot;我可以飞&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><blockquote><p>联合类型表示多个类型中一个即可</p><blockquote><p><code>type Direct=&quot;left|&quot;right&quot;|&quot;center&quot;</code></p></blockquote></blockquote><ul><li>交叉类型<ul><li>交叉类似表示需要满足多个类型的条件</li><li>交叉类型使用 &amp; 符号</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ISwim &#123;  swimming: () &#x3D;&gt; void&#125;interface IFly &#123;  flying: () &#x3D;&gt; void&#125;type MyType &#x3D; ISwim &amp; IFlyconst obj: MyType &#x3D; &#123;  swimming() &#123;&#125;,  flying() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="interface和type的区别"><a href="#interface和type的区别" class="headerlink" title="interface和type的区别"></a>interface和type的区别</h3><ul><li><code>interface</code>和<code>type</code>都可以用来定义对象类型<ul><li>如果是定义非对象类型,通常推荐使用type,比如<code>Direction</code>,<code>Alignment</code>,一些<code>Function</code></li></ul></li><li>如果是定义对象类型,那么他们是有区别的<ul><li><code>interface</code> 可以重复的对某个接口来定义属性和方法.</li><li>多个重复名的<code>interface</code>,所有的属性在实现时都要实现.可以利用这个特性在原有接口中添加属性</li><li><code>type</code>定义的是别名,别名是不能重复的</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IFoo &#123;  name: string&#125;interface IFoo &#123;  age: number&#125;const foo: IFoo &#x3D; &#123;  name: &quot;why&quot;,  age: 18&#125;type IBar &#x3D; &#123;  name: string  age: number&#125;&#x2F;&#x2F;不能定义一个别名两次&#x2F;&#x2F; type IBar &#x3D; &#123;&#x2F;&#x2F; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字面量赋值"><a href="#字面量赋值" class="headerlink" title="字面量赋值"></a>字面量赋值</h3><ul><li><code>TypeScript</code>在字面量直接赋值的过程中,为了进行类型推导会进行严格的类型限制.</li><li>但是之后如果我们是先将将一个 <span style="color:red">变量标识符赋值给其他的变量时</span>,会进行freshness擦除操作.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson &#123;  name: string  age: number  height: number&#125;const info &#x3D; &#123;  name: &quot;why&quot;,  age: 18,  height: 1.88,  address: &quot;广州市&quot;&#125;&#x2F;&#x2F; freshness擦除const p: IPerson &#x3D; info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>定义函数或者是类时,如果类型不明确时,就可以使用泛型</p></blockquote><ul><li>使用any时,已经丢失了类型信息<ul><li>比如我们传入的是一个number，那么我们希望返回的可不是any类型，而是number类型</li></ul></li><li>所以，我们需要在函数中可以捕获到参数的类型是number，并且同时使用它来作为返回值的类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum&lt;Type&gt;(num: Type): Type &#123;  return num&#125;&#x2F;&#x2F; 1.调用方式一: 明确的传入类型sum&lt;number&gt;(20)sum&lt;&#123;name: string&#125;&gt;(&#123;name: &quot;why&quot;&#125;)&#x2F;&#x2F; 2.调用方式二: 类型推导sum(50)sum(&quot;abc&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式一:通过 &lt;类型&gt; 的方式将类型传递给函数</li><li>方式二:通过类型推导，自动推导出我们传入变量的类型<ul><li>在这里会推导出它们是 字面量类型的，因为字面量类型对于我们的函数也是适用的</li></ul></li></ul><h3 id="泛型的基本补充"><a href="#泛型的基本补充" class="headerlink" title="泛型的基本补充"></a>泛型的基本补充</h3><ul><li>T:Type的缩写，类型</li><li>K,V:key和value的缩写，键值对</li><li>E:Element的缩写，元素</li><li>O:Object的缩写，对象</li></ul><h3 id="泛型接口的使用"><a href="#泛型接口的使用" class="headerlink" title="泛型接口的使用"></a>泛型接口的使用</h3><blockquote><p>可以传入默认值,如果不传默认值,在接口调用的时候使用泛型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson&lt;T1 &#x3D; string, T2 &#x3D; number&gt; &#123;  name: T1  age: T2&#125;const p: IPerson &#x3D; &#123;  name: &quot;why&quot;,  age: 18&#125;&#x2F;&#x2F;不使用默认值const p: IPerson&lt;string,number&gt; &#x3D; &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类的使用"><a href="#泛型类的使用" class="headerlink" title="泛型类的使用"></a>泛型类的使用</h3><ul><li>可以直接使用类型推导,不使用泛型注解</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Point&lt;T&gt; &#123;  x: T  y: T  z: T  constructor(x: T, y: T, z: T) &#123;    this.x &#x3D; x    this.y &#x3D; y    this.z &#x3D; y  &#125;&#125;&#x2F;&#x2F;方式一(类型推导)const p1 &#x3D; new Point(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)&#x2F;&#x2F;方式二const p2 &#x3D; new Point&lt;string&gt;(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)&#x2F;&#x2F;方式三const p3: Point&lt;string&gt; &#x3D; new Point(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><ul><li>当我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中<ul><li>比如string和array都是有length属性的，或者某些对象也是会有length属性的</li><li>给泛型继承某些属性,来约束</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ILength &#123;  length: number&#125;function getLength&lt;T extends ILength&gt;(arg: T) &#123;  return arg.length&#125;getLength(&quot;abc&quot;)getLength([&quot;abc&quot;, &quot;cba&quot;])getLength(&#123;length: 100&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TS模块化开发"><a href="#TS模块化开发" class="headerlink" title="TS模块化开发"></a>TS模块化开发</h2><ul><li>TypeScript的两种支持<ul><li>模块化:每个文件可以是一个独立的模块,支持ES Module,也支持CommonJS</li><li>命名空间:通过<code>nampspace</code>来声明一个命名空间</li></ul></li></ul><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>在TypeScript早期时,称之为内部模块,主要是将一个模块内部再惊醒作用域的划分,防止命名冲突</p></blockquote><ul><li>命名空间是在 Web 应用程序中构建代码的好方法，所有依赖项都作为&lt;script&gt;标签包含在 HTML 页面中</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export namespace price &#123;  export function format(price: number) &#123;    return &quot;99.99&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型查找"><a href="#类型查找" class="headerlink" title="类型查找"></a>类型查找</h3><ul><li>另外的一种<code>typescript</code>文件：<code>.d.ts</code>文件<ul><li>通常的<code>TypeScript</code>文件都是以<code>.ts</code>文件输出</li><li>另外一种<code>.d.ts</code>文件按,是用来做类型的声明<code>declare</code>.(仅仅是用来做类型监测,告知typescript有哪些类型)</li></ul></li><li>三种类型声明<ul><li>内置类型声明</li><li>外部定义类型声明</li><li>自己定义类型声明</li></ul></li></ul><h4 id="内置类型声明"><a href="#内置类型声明" class="headerlink" title="内置类型声明"></a>内置类型声明</h4><ul><li>内置类型声明是<code>typescript</code>自带的,帮助我们内置了<code>JavaScript</code>运行时的一些标准化API的声明文件<ul><li>包括比如<code>Math,Date</code>等内置类型，也包括<code>DOM API</code>，比如<code>Window</code>,<code>Document</code>等</li></ul></li><li>内置类型声明通常在我们安装typescript的环境中会带有的:<ul><li><a href="https://github.com/microsoft/TypeScript/tree/main/lib">https://github.com/microsoft/TypeScript/tree/main/lib</a></li></ul></li></ul><h4 id="外部定义类型声明"><a href="#外部定义类型声明" class="headerlink" title="外部定义类型声明"></a>外部定义类型声明</h4><ul><li>外部类型声明通常是我们使用一些库(比如第三方库)时，需要的一些类型声明<ul><li>在自己库中进行类型声明(编写<code>.d.ts</code>文件)，比如<code>axios</code></li><li>通过社区的一个公有库<code>DefinitelyTyped</code>存放类型声明文件<ul><li>该库的GitHub地址:<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">https://github.com/DefinitelyTyped/DefinitelyTyped/</a></li><li>该库查找声明安装方式的地址:<a href="https://www.typescriptlang.org/dt/search?search">https://www.typescriptlang.org/dt/search?search</a>&#x3D;</li><li>比如我们安装react的类型声明: <code>npm i @types/react --save-dev</code></li></ul></li></ul></li></ul><h4 id="自定义声明"><a href="#自定义声明" class="headerlink" title="自定义声明"></a>自定义声明</h4><blockquote><p>何时使用自定义声明</p></blockquote><ol><li>我们使用的第三方库是一个纯的JavaScript库，没有对应的声明文件:比如lodash</li><li>我们给自己的代码中声明一些类型，方便在其他地方直接进行使用</li></ol><blockquote><p>变量-函数-类的声明</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare let whyHeight: numberdeclare function whyFoo(): voiddeclare class Person &#123;  name: string  age: number  constructor(name: string, age: number)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>声明模块</p></blockquote><ul><li>我们也可以声明模块，比如lodash模块默认不能使用的情况</li><li>声明模块的语法: <code>declare module &#39;模块名&#39; &#123;&#125;</code><ul><li>在声明模块的内部，我们可以通过 <code>export</code> 导出对应库的类、函数等</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare module &#39;lodash&#39; &#123;  export function join(arr: any[]): void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>声明文件</p></blockquote><ul><li>在开发中我们使用了 jpg 这类图片文件，默认<code>typescript</code>也是不支持的，也需要对其进行声明</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare module &quot;*.jpg&quot;&#123;  const src:string  export default src&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在我们构建vue项目时,vue会自己初始化一个<code>shimes-vue.d.ts</code>文件</p></blockquote><ul><li>其中vue的<code>.d.ts</code>文件并没有构建其他的全局属性(或者自己添加的),所以如果要使用,最好加上去</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare module &#39;*.vue&#39; &#123;  import type &#123; DefineComponent &#125; from &#39;vue&#39;  const component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;  export default component&#125;declare module &#39;*.json&#39;&#x2F;&#x2F;暴露两个全局属性declare const $store: anydeclare const $filters: any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsconfig.json的配置</title>
      <link href="/2021/10/01/tsconfig.json-de-pei-zhi/"/>
      <url>/2021/10/01/tsconfig.json-de-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><blockquote><p>生成<code>tsconfig.json</code>文件,命令:<code>tsc --init</code></p></blockquote><ol><li>“include”:[],是调试用来指定那些ts文件需要编译<ul><li>路径:**  表示任意目录,*  表示任意文件</li></ul></li><li>“exclude”:[],不需要被编译的文件目录 默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li><li>“files”:[],也是指定ts文件,但是是一个一个ts文件</li></ol><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h3><ol><li><p><code>target</code>:用来ts被编译成js的版本</p><ul><li>可选值:’es3’, ‘es5’, ‘es6’, ‘es2015’, ‘es2016’, ‘es2017’,’es2018’, ‘es2019’, ‘es2020’, ‘es2021’, ‘esnext’</li></ul></li><li><p><code>module</code>:指定要用的模块化标准</p><ul><li>可选值:”CommonJS”, “AMD”, “System”, “UMD”, “ES6”, “ES2015”, “ES2020”, “ESNext”, “None”</li></ul></li><li><p><code>lib</code>:用来指定项目中要用来的库</p></li><li><p><code>strict</code>:严格一些的严格检查(any)</p></li><li><p><code>&quot;jsx&quot;:&quot;preserve&quot;</code>:对jsx进行怎么样的处理</p></li><li><p><code>&quot;importHelpers&quot;</code>:是否有辅助的导入功能</p></li><li><p><code>&quot;moduleResolution&quot;:&quot;node&quot;</code>按照node的方式去解析模块<code>import &quot;/index.node&quot;</code></p></li><li><p><code>&quot;skipLibCheck&quot;</code>跳过一些库的类型检查(比如axios-&gt;类型&#x2F;loadsh-&gt;@types&#x2F;loadsh&#x2F;其它第三方库)</p></li><li><p><code>&quot;esModuleInterop&quot;: true</code>支持esmodule</p></li><li><p><code>&quot;allowSyntheticDefaultImports&quot;: true</code>支持commonjs</p></li><li><p><code>&quot;sourceMap&quot;</code>:要不要生成映射文件</p></li><li><p><code>&quot;baseUrl&quot;:&quot;.&quot;</code>文件在解析时,基本url</p></li><li><p><code>&quot;types&quot;:[&quot;webpack-env&quot;]</code>指定具体要解析使用的类型</p></li><li><p><code>&quot;outDir&quot;: &quot;./dist&quot;</code>: 用来指定编译后的目录</p></li><li><p><code>&quot;outFile&quot;: &quot;./dist/app.js&quot;</code>, 将编译后的文件合并成一个js文件</p></li><li><p><code>allowjs</code>,是否对js进行编译,默认是false</p></li><li><p><code>checkJs</code>,是否对js语法进行检查</p></li><li><p><code>removeComments</code>,是否移除注释</p></li><li><p><code>noEmitOnError</code>,是否当有错误是不生成编译文件</p></li><li><p><code>alwaysStrict</code>, 是否用来使用编译后的文件是否使用严格模式</p></li><li><p><code>noImplicitAny</code>,是否允许隐式的any类型存在</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum(a,b)&#123;  return a+b&#125;&#x2F;&#x2F;隐式any类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>noImplicitAny</code>,是否允许不明确的this存在</p></li><li><p><code>strictNullChecks</code>,严格检查空格</p></li><li><p><code>strict</code>,所有严格检查的总开关(建议开)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex4mapState和mapGetters</title>
      <link href="/2021/09/30/vuex4mapstate-he-mapgetters/"/>
      <url>/2021/09/30/vuex4mapstate-he-mapgetters/</url>
      
        <content type="html"><![CDATA[<h2 id="封装mapState和mapGetters"><a href="#封装mapState和mapGetters" class="headerlink" title="封装mapState和mapGetters"></a>封装mapState和mapGetters</h2><blockquote><p>在CompusitionsAPI要将<code>mapState</code>和<code>mapGetters</code>封装</p></blockquote><ul><li>setup函数中没有this,任何的this都是没有意义的</li><li>解构出来的<code>mapState</code>和<code>mapGetters</code>是一个函数,而不是一个对象</li></ul><blockquote><p>在OptionsAPI不需要封装<code>mapState</code>和<code>mapGetters</code></p></blockquote><ul><li>解构出来的<code>mapState</code>和<code>mapGetters</code>的函数,<code>computed属性</code>会自动拿到返回值</li></ul><blockquote><p>封装了两个文件</p></blockquote><ul><li><code>proStateStore.js</code>:对<code>mapState</code>和<code>mapGetters</code>的封装</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> createNamespacedHelpers <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span>  <span class="token punctuation">&#123;</span>proMapper<span class="token punctuation">&#125;</span>  <span class="token keyword">from</span> <span class="token string">'proMapper.js'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proGetters</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spaceName<span class="token punctuation">,</span>mapArry</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> mapFn <span class="token operator">=</span> mapGetters  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> spaceName <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> spaceName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mapFn <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span>spaceName<span class="token punctuation">)</span><span class="token punctuation">.</span>mapGetters  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    mapArry <span class="token operator">=</span> spaceName  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">proMapper</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">,</span> mapFn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proState</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spaceName<span class="token punctuation">,</span> mapArry</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> mapFn <span class="token operator">=</span> mapState  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> spaceName <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> spaceName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mapFn <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span>spaceName<span class="token punctuation">)</span><span class="token punctuation">.</span>mapState  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    mapArry <span class="token operator">=</span> spaceName  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">proMapper</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">,</span> mapFn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>proMapper.js</code>:对<code>mapState</code>和<code>mapGetters</code>共同遍历功能的封装</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@vue/reactivity"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proMapper</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mapArry<span class="token punctuation">,</span>mapFn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stateStoreFn<span class="token operator">=</span><span class="token function">mapFn</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">)</span>  <span class="token keyword">let</span> stateStore<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>stateStoreFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fn<span class="token operator">=</span>stateStoreFn<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>$store<span class="token operator">:</span>store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    stateStore<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> stateStore<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>封装对于大型项目的解耦合是有必要的,如果在组件中并没有太多属性,冗长的封装加大了阅读性的难度</p></blockquote><h2 id="使用解构赋值"><a href="#使用解构赋值" class="headerlink" title="使用解构赋值"></a>使用解构赋值</h2><blockquote><p>使用对象的解构赋值,可以拿到所有属性,更容易阅读🐕🐕🐕</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span>state    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解构出的值并不是响应式"><a href="#解构出的值并不是响应式" class="headerlink" title="解构出的值并不是响应式"></a>解构出的值并不是响应式</h3><ul><li>使用reactive包裹<code>let counter=reactive(&#123;...store.state&#125;)</code><ul><li>同时可以使用<code>toRefs</code>去解包</li></ul></li><li>使用ref包裹单个值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token operator">...</span>store<span class="token punctuation">.</span>state<span class="token punctuation">&#125;</span><span class="token keyword">let</span> counter<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex@4.0.0</title>
      <link href="/2021/09/29/vuex-4.0.0/"/>
      <url>/2021/09/29/vuex-4.0.0/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><img src="./markdownvuex.png" alt="vuex"></p><blockquote><p>状态之间相互会存在依赖,一个状态的变化会引起另一个状态的变化,View页面也有可能会引起状态的变化,所以管理不断变化的state本身是非常困难的</p></blockquote><ul><li>使用Vuex状态管理<ul><li>在这种模式下,我们的组件树构成了一个巨大的 试图<code>View</code></li><li>不管在树的哪个位置,任何组件都能获取状态或者触发行为</li><li>通过定义和隔离状态管理中的各个概念,并通过强制性的规则来维护视图和状态间的独立性,代码会变得更加结构化和易于维护,跟踪</li></ul></li></ul><h3 id="store-仓库"><a href="#store-仓库" class="headerlink" title="store(仓库)"></a>store(仓库)</h3><blockquote><p>store本质上是一个容器,它包含着你的应用中大部分的状态(state)</p></blockquote><ul><li><p>vuex和全局对象的区别</p><ul><li>Vuex的状态是响应式的<ul><li>当vue组件从store读取状态,若store中的状态发生改变,其相应的状态也会改变</li></ul></li><li>不能直接改变store中的状态<ul><li>该变store中的状态的唯一途径就是提交**(commit)mutation**</li></ul></li></ul></li><li><p>使用</p><ul><li>创建<code>Store</code>对象</li><li>在app中使用插件安装</li></ul></li></ul><h3 id="单一状态树"><a href="#单一状态树" class="headerlink" title="单一状态树"></a>单一状态树</h3><blockquote><p>将状态信息同时保存到多个Store对象中的,那么之后的管理和维护等等都会变得特别困难</p></blockquote><ul><li>所以Vuex也使用了单一状态树来管理应用层级的全部状态</li><li>单一状态树能够让我们最直接的方式找到某个状态的片段,而且在之后的维护和调试过程中,也可以非常方便的管理和维护</li></ul><h2 id="五大核心"><a href="#五大核心" class="headerlink" title="五大核心"></a>五大核心</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    books<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Vuejs"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Webpack"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">240</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入React"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Node"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">220</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>获取state状态</p><ul><li>在模板中使用<code>$store.state.name</code></li><li>在setup函数中用计算属性获取</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><blockquote><p>改变某些属性的状态变化</p></blockquote><h4 id="定义getters"><a href="#定义getters" class="headerlink" title="定义getters"></a>定义getters</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">getters<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> totalprice<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> book <span class="token keyword">of</span> state<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      totalPrice<span class="token operator">+=</span>book<span class="token punctuation">.</span>count<span class="token operator">*</span>book<span class="token punctuation">.</span>price    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> totalPrice  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一个参数<code>state</code>,可以拿到state中的状态</li><li>第二个参数<code>getters</code>,可以拿到其它的getters</li></ul><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul><li><p>在模板中使用:<code>$store.getters.totalPrice</code></p></li><li><p>setup中用计算属性获取</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> totalPrice<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>totalPrice<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用mapState和mapGetters"><a href="#使用mapState和mapGetters" class="headerlink" title="使用mapState和mapGetters"></a>使用mapState和mapGetters</h2><ul><li>使用数组类型:<code>...mapGetters([&quot;totalPrice&quot;,&quot;myName&quot;])</code></li><li>使用对象类型:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  finalPrice<span class="token operator">:</span><span class="token string">"totalPrice"</span><span class="token punctuation">,</span>  finalName<span class="token operator">:</span><span class="token string">"myName"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参考<a href="http://mail.zyjcould.ltd/2021/09/30/vuex4mapstate-he-mapgetters/">http://mail.zyjcould.ltd/2021/09/30/vuex4mapstate-he-mapgetters/</a></li></ul><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><ul><li>Action提交的是mutation,而不是直接变更状态</li><li>Action可以包含任意异步操作</li><li>参数<code>context</code>:<ul><li>context是一个和store实例均有相同方法和属性的context对象</li><li>从其中获取到commit方法来提交一个<code>mutation</code>,或者通过<code>context.state</code>和<code>context.getters</code>来获取<code>state和getters</code></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同时也接收第二个参数payload,获取从组件中传入的参数</li></ul><h3 id="actions的分发操作"><a href="#actions的分发操作" class="headerlink" title="actions的分发操作"></a>actions的分发操作</h3><ul><li>同时actions可以执行异步操作<ul><li>例如ajax请求,定时器等等</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>      <span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">reject</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">cosnole</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//携带参数</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//使用对象形式</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span><span class="token string">"increment"</span><span class="token punctuation">,</span>  count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><ul><li><code>mapActions</code>返回的就是一个函数</li><li>数组写法:<code>...mapActions([&quot;increment&quot;,&quot;decrement&quot;])</code></li><li>对象写法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> action<span class="token operator">=</span> <span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//将`this.add()`映射为`this.$store.dispatch('increment')`  </span>  add<span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><blockquote><p>提交<code>mutation</code>是更改Vuex的store中的状态的唯一方法</p></blockquote><ul><li>重要的原则: <code>mutation</code> 必须是同步函数<ul><li>devtool工具记录每一条mutation,devtools都需要捕捉到前一状态和后一状态的快照</li><li>但是在mutation中执行异步操作,就无法追踪到数据的变化</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span>  increment<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>counte<span class="token operator">+=</span>payload    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><ul><li><code>mapMutations</code>返回的就是一个函数</li><li>数组写法:<code>...mapMutations([&quot;Increment&quot;,&quot;Decrement&quot;])</code></li><li>对象写法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> action<span class="token operator">=</span> <span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//将`this.Add()`映射为`this.$store.commit('Increment')`  </span>  Add<span class="token operator">:</span> <span class="token string">'Increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><blockquote><p>使用单一状态树,应用的所有状态会集中到一个比较大的对象,应用会变得复杂<br>使每个模块拥有自己的 <code>state,mutation,action,getter</code>甚至是嵌套子模块</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//子模块a</span><span class="token keyword">const</span> moduleA<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//子模块b</span><span class="token keyword">const</span> moduleB<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//引入模块</span><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>    a<span class="token operator">:</span>moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span>moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//moduleA和moduleB的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>astore<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部状态"><a href="#局部状态" class="headerlink" title="局部状态"></a>局部状态</h3><blockquote><p>模块内部action参数context的解构(所有action都携带)</p></blockquote><ul><li>commit:提交对象</li><li>dispatch:分发的函数</li><li>state:此模块内的状态</li><li>rootState:根模块的state</li><li>getters:此模块的getter</li><li>rootGetters:跟模块的getters</li></ul><blockquote><p>模块内部的 getter,根节点状态会作为第三个参数暴露出来<code>state, getters, rootState</code></p></blockquote><h3 id="module命名空间"><a href="#module命名空间" class="headerlink" title="module命名空间"></a>module命名空间</h3><ul><li><p>默认情况下,模块内部的action和mutation仍然是注册在全局的命名空间中的</p><ol><li>这使得多个模块能够对同一个 <code>action 或 mutation</code> 作出响应</li><li><code>Getter</code> 同样也默认注册在全局命名空间</li></ol></li><li><p>添加 <code>namespaced: true</code> 的方式使模块成为带命名空间的模块</p><ul><li>模块将具有更高的封装度和复用性</li><li>模块被注册后,它的所有 <code>getter</code>,<code>action</code>及<code>mutation</code> 都会自动根据模块注册的路径调整命名</li></ul></li></ul><h3 id="module中修改和派发根组件"><a href="#module中修改和派发根组件" class="headerlink" title="module中修改和派发根组件"></a>module中修改和派发根组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">incrementAction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>commit<span class="token punctuation">,</span>dispatch<span class="token punctuation">,</span>state<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootGetters<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"incrementAction"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="module辅助函数"><a href="#module辅助函数" class="headerlink" title="module辅助函数"></a>module辅助函数</h3><blockquote><p>在setup函数中使用辅助函数来分发提交等</p></blockquote><ol><li>通过完整的模块空间名称来查找</li><li>第一个参数传入模块空间名称,后面写上要使用的属性</li></ol><h4 id="createNamespacedHelpers"><a href="#createNamespacedHelpers" class="headerlink" title="createNamespacedHelpers"></a>createNamespacedHelpers</h4><blockquote><p>可以直接使用辅助函数去和模块交互,而不用传入任何其它的参数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span>         mapGetters<span class="token punctuation">,</span>         mapMutations<span class="token punctuation">,</span>         mapActions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueRouter@4.0.0</title>
      <link href="/2021/09/28/vuerouter-4/"/>
      <url>/2021/09/28/vuerouter-4/</url>
      
        <content type="html"><![CDATA[<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><ul><li>将给定匹配模式的路由映射到同一个组件</li></ul><blockquote><p>在Vue Router中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/User.vue"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>router-link</code>中进行跳转</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态路由取值"><a href="#动态路由取值" class="headerlink" title="动态路由取值"></a>动态路由取值</h3><h4 id="在template中"><a href="#在template中" class="headerlink" title="在template中"></a>在template中</h4><ul><li>通过$route.params获取值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>用户界面:&#123;&#123;$route.params.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在setup中"><a href="#在setup中" class="headerlink" title="在setup中"></a>在setup中</h4><ul><li>使用用 <code>vue-router</code>库给我们提供的一个hook <code>useRoute</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span><span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匹配多个值"><a href="#匹配多个值" class="headerlink" title="匹配多个值"></a>匹配多个值</h3><table><thead><tr><th>匹配模式</th><th>匹配路径</th><th><code>$route.params</code></th></tr></thead><tbody><tr><td>&#x2F;users&#x2F;:user</td><td>&#x2F;users&#x2F;lisi</td><td><code>&#123; user: &#39;lisi&#39; &#125;</code></td></tr><tr><td>&#x2F;users&#x2F;:user&#x2F;id&#x2F;:id</td><td>&#x2F;users&#x2F;:lisi&#x2F;id&#x2F;123</td><td><code>&#123; user: &#39;lisi&#39;, id: &#39;123&#39; &#125;</code></td></tr></tbody></table><h2 id="NotFound页面"><a href="#NotFound页面" class="headerlink" title="NotFound页面"></a>NotFound页面</h2><blockquote><p>对于哪些没有匹配到的路由,可以编写一个动态路由将他们匹配到固定的某个页面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/:pathMatch(.*)"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/NotFound.vue"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以在<code>template</code>中使用<code>$route.params.pathMatch</code>获取路径参数<ul><li>例如:<code>user/hhh/111</code></li></ul></li><li><span style="color:red">注意在<code>/:pathMatch(.*)</code>后面又加了一个 *</span>,即<code>/:pathMatch(.*)*</code>时<ul><li><code>$route.params.pathMatch</code>获取路径参数是一个数组[“user”,”hhh”,”111”]</li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><blockquote><p>使用嵌套路由配置来表达某些应用程序的 UI 由嵌套多级的组件组成</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/Home.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        redirect<span class="token operator">:</span><span class="token string">"/home/product"</span><span class="token comment">//重定向</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'product'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span><span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/HomeProduct.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以<code>/</code>开头的嵌套路径将被视为根路径,这将更好的利用组件嵌套</li></ul><h2 id="lt-router-link-gt"><a href="#lt-router-link-gt" class="headerlink" title="&lt;router-link&gt;"></a>&lt;router-link&gt;</h2><h3 id="代码的页面跳转"><a href="#代码的页面跳转" class="headerlink" title="代码的页面跳转"></a>代码的页面跳转</h3><table><thead><tr><th>声明式</th><th>程序化</th></tr></thead><tbody><tr><td>&lt;router-link :to&#x3D;”…”&gt;</td><td><code>router.push(...)</code></td></tr></tbody></table><h4 id="使用router-push-…"><a href="#使用router-push-…" class="headerlink" title="使用router.push(…)"></a>使用router.push(…)</h4><ul><li>使用字符串地址<code>router.push(&#39;/users/123&#39;)</code></li><li>使用对象地址<code>router.push(&#123;&#39;/users/123&#39;&#125;)</code></li><li>使用命名路由并携带params参数:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">'eduardo'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>携带query参数:</p><ul><li><code>router.push(&#123;path:&#39;/register&#39;,query:&#123;plan:&#39;private&#39;&#125;)</code></li></ul></li><li><p><span style="color:red">使用可重复使用的params时,使用name属性,或者path这样编写<code>/user/$&#123;username&#125;</code></span></p></li></ul><h3 id="替换当前位置"><a href="#替换当前位置" class="headerlink" title="替换当前位置"></a>替换当前位置</h3><blockquote><p>使用push的特点是压入一个新的页面，那么在用户点击返回时，上一个页面还可以回退，但是如果希望当前页面是一个替换操作，那么可以使用<code>replace</code></p></blockquote><table><thead><tr><th>声明式</th><th>程序化</th></tr></thead><tbody><tr><td>&lt;router-link :to&#x3D;”…” replace&gt;</td><td><code>router.replace(...)</code></td></tr></tbody></table><h3 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h3><blockquote><p>custom选项防止&lt;router-link&gt;将其内容包装在&lt;a&gt;元素内</p><blockquote><p>默认情况下，&lt;router-link&gt;将呈现其内容包裹在一个&lt;a&gt;元素，即使使用<code>v-slot</code>.使用<code>custom</code>，删除该行为</p></blockquote></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">custom</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;navigate,href,route&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>href<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; route.fullPath &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="router-link中的v-slot"><a href="#router-link中的v-slot" class="headerlink" title="router-link中的v-slot"></a>router-link中的v-slot</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span>  <span class="token attr-name">custom</span>  <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;href,route,navigate,isActive,isExactActive&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>href:&#123;&#123;href&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>route:&#123;&#123;route&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>isActive:&#123;&#123;isActive&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>isExactActive:&#123;&#123;isExactActive&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>href</code>解析后的url</li><li><code>route</code>解析后的规范化的route对象</li><li><code>navigate</code>触发导航的函数</li><li><code>isActive</code>是否匹配的状态</li><li><code>isExactActive</code>是否是精准匹配的状态</li></ul><h3 id="其它api"><a href="#其它api" class="headerlink" title="其它api"></a>其它api</h3><blockquote><p>参考<a href="https://next.router.vuejs.org/api/#aria-current-value">https://next.router.vuejs.org/api/#aria-current-value</a></p></blockquote><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><ul><li>&lt;router-view&gt;公开一个<code>v-slot</code>API，主要是用&lt;transition&gt;和&lt;keep-alive&gt;组件包装你的路由组件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Component&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>why<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态的添加删除路由"><a href="#动态的添加删除路由" class="headerlink" title="动态的添加删除路由"></a>动态的添加删除路由</h2><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><ul><li><p>某些情况下我们可能需要动态的来添加路由</p><ul><li>如根据用户不同的权限，注册不同的路由</li><li>可以使用一个方法 <code>addRoute</code></li></ul></li><li><p>直接添加顶级路由,参数只要传一个动态路由的名称</p></li><li><p>或者是为路由添加子路由,那么还应该传入对应的name属性</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> about<span class="token operator">=</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/About"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">,</span>about<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">如果新增加的路由的位置与原有的路由相匹配，那就需要你手动导航与<code>router.push()</code>或<code>router.replace()</code>以显示新的路线</span></li></ul><h3 id="删除路由"><a href="#删除路由" class="headerlink" title="删除路由"></a>删除路由</h3><ul><li>添加一个name相同的路由</li><li>通过<code>removeRoute</code>方法，传入路由的名称</li><li>通过<code>addRoute</code>方法的返回值回调</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//添加一个name相同的路由</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//通过removeRoute方法，传入路由的名称</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">"about"</span><span class="token punctuation">)</span><span class="token comment">//通过`addRoute`方法的返回值回调</span><span class="token keyword">const</span> removeRoute<span class="token operator">=</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>  name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>  component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><ul><li><code>router.hasRoute()</code>检查路由是否存在。</li><li><code>router.getRoutes()</code>获取一个包含所有路由记录的数组</li></ul><h2 id="useLink和RouterLink"><a href="#useLink和RouterLink" class="headerlink" title="useLink和RouterLink"></a>useLink和RouterLink</h2><blockquote><p>Vue Router 将 <code>RouterLink</code> 的内部行为公开为 Composition API 函数。它提供访问与<code>v-slot</code>API相同的属性</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> useLink <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>RouterLink<span class="token punctuation">.</span>props<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>route<span class="token punctuation">,</span>href<span class="token punctuation">,</span>isActive<span class="token punctuation">,</span>isExactActive<span class="token punctuation">,</span>navigate<span class="token punctuation">&#125;</span> <span class="token operator">=</span><span class="token function">useLink</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>href<span class="token punctuation">,</span>navigate<span class="token punctuation">,</span>isActive<span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><blockquote><p>路由守卫的触发时机</p></blockquote><ul><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ul><blockquote><p>Vue router 提供的路由守卫主要用于通过重定向或取消路由来保护路由.有多种方法可以连接到路由导航过程:全局,每个路由或组件内</p></blockquote><ul><li><p>接收两个参数</p><ul><li>to即将进入的路由Route对象</li><li>from即将离开的路由Route对象</li></ul></li><li><p>return 返回值</p><ul><li>false取消当前导航</li><li>不返回或者undefined进行默认导航</li><li>返回一个路由地址<ul><li>可以是一个string类型的路径</li><li>可以是一个对象，对象中包含<code>path,query,params</code>等信息</li></ul></li></ul></li><li><p>第三个参数<code>next</code>在vue3中已经不推荐使用</p></li></ul><h3 id="全局路由守卫-beforeEach"><a href="#全局路由守卫-beforeEach" class="headerlink" title="全局路由守卫(beforeEach)"></a>全局路由守卫(beforeEach)</h3><blockquote><p>用来做一些进入页面的限制.比如没有登录，就不能进入某些页面，只有登录了之后才有权限查看某些页面(初始化的时候被调用,每次路由切换之前被调用)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由独享守卫-beforeEnter"><a href="#路由独享守卫-beforeEnter" class="headerlink" title="路由独享守卫(beforeEnter)"></a>路由独享守卫(beforeEnter)</h3><blockquote><p>beforeEnter守卫只在进入路由时触发不会在params,query或hash改变时触发</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/users/:id'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局后置后卫"><a href="#全局后置后卫" class="headerlink" title="全局后置后卫"></a>全局后置后卫</h3><blockquote><p>不会接受<span style="color:red">返回值</span>也不会改变导航本身</p><blockquote><p>用于分析、更改页面标题、声明页面等辅助功能</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h3><blockquote><p>参考<a href="https://next.router.vuejs.org/zh/guide/advanced/composition-api.html#%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB">https://next.router.vuejs.org/zh/guide/advanced/composition-api.html#%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vueRouter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3中自定义指令</title>
      <link href="/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/"/>
      <url>/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>使用指令的原因<ul><li>在Vue中，代码的复用和抽象主要还是通过组件</li><li>如果你需要对DOM元素进行底层操作，这个时候就会用到自定义指令</li></ul></li><li>自定义指令的两种写法<ul><li>自定义局部指令:组件中通过 <code>directives</code> 选项，只能在当前组件中使用</li><li>自定义全局指令:app的 <code>directive</code> 方法，可以在任意组件中被使用</li></ul></li></ul><h3 id="指令的生命周期"><a href="#指令的生命周期" class="headerlink" title="指令的生命周期"></a>指令的生命周期</h3><ul><li><code>created</code>:在绑定元素的 attribute 或事件监听器被应用之前调用</li><li><code>beforeMount</code>:当指令第一次绑定到元素并且在挂载父组件之前调用</li><li><code>mounted</code>:在绑定元素的父组件被挂载后调用</li><li><code>beforeUpdate</code>:在更新包含组件的 VNode 之前调用</li><li><code>updated</code>:在包含组件的 VNode 及其子组件的 VNode 更新后调用</li><li><code>beforeUnmount</code>:在卸载绑定元素的父组件之前调用</li><li><code>unmounted</code>:当指令与元素解除绑定且父组件已卸载时，只调用一次</li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><ul><li><code>el</code><ul><li>指令绑定到的元素。这可用于直接操作 DOM。</li></ul></li><li><code>binding</code>:一个对象，包含以下属性：<ul><li><code>instance</code>：使用指令的组件实例。</li><li><code>value</code>：传递给指令的值。例如，在 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，该值为 <code>2</code>。</li><li><code>oldValue</code>：先前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用。值是否已更改都可用。</li><li><code>arg</code>：参数传递给指令 (如果有)。例如在 <code>v-my-directive:foo</code> 中，<code>arg</code> 为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：包含修饰符 (如果有) 的对象。例如在 <code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123;foo: true，bar: true&#125;</code>。</li><li><code>dir</code>：一个对象，在注册指令时作为参数传递</li></ul></li><li><code>vnode</code><ul><li>作为 el 参数收到的真实 DOM 元素的蓝图</li></ul></li><li><code>prevNode</code><ul><li>上一个虚拟节点，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 钩子中可用</li></ul></li></ul><h3 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h3><ul><li>在组件选项中使用 <code>directives</code> 即可</li><li>它是一个对象，在对象中编写我们自定义指令的名称(注意:这里不需要加v-)</li><li>自定义指令有一个生命周期，是在组件挂载后调用的 <code>mounted</code>，我们可以在其中完成操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  directives<span class="token operator">:</span><span class="token punctuation">&#123;</span>    focus<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li><p>可以通过自定义计算属性,方法来完成</p></li><li><p>这里使用自定义指令</p></li><li><p>使用时间格式化的指令<code>v-format-time</code></p><ul><li>用到了时间格式化的内库<code>dayjs</code></li><li>如果封装了多个指令,可以用插件写一个<code>index.js</code>文件引入</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">'dayjs'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> formaString<span class="token operator">=</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span>  app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"format-time"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>bindings<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        formaString<span class="token operator">=</span>bindings<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> textContent<span class="token operator">=</span>el<span class="token punctuation">.</span>textContent      <span class="token keyword">let</span> timetamp<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>textContent<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>textContent<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        timetamp<span class="token operator">=</span>timetamp<span class="token operator">*</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span>      el<span class="token punctuation">.</span>textContent<span class="token operator">=</span><span class="token function">dayjs</span><span class="token punctuation">(</span>timetamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formaString<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中的CompositionApi</title>
      <link href="/2021/09/26/vue3-zhong-de-compositionapi/"/>
      <url>/2021/09/26/vue3-zhong-de-compositionapi/</url>
      
        <content type="html"><![CDATA[<h2 id="setup函数的参数"><a href="#setup函数的参数" class="headerlink" title="setup函数的参数"></a>setup函数的参数</h2><ol><li>第一个参数:<code>props</code></li><li>第二个参数:<code>context</code></li></ol><ul><li><p><code>props</code>:父组件传递过来的属性会被放到<code>props</code>对象中</p><ol><li>还是在props选项中定义</li><li>在<code>template</code>中依然是可以正常去使用props中的属性,比如message</li><li>如果我们在setup函数中想要使用props,<span style="color:red">那么不可以通过 this 去获取</span></li><li>因为props有直接作为参数传递到setup函数中,所以我们可以直接通过参数来使用即可</li></ol></li><li><p><code>context</code>:</p><ol><li><code>attrs</code>:所有的非prop的attribute；</li><li><code>slots</code>:父组件传递过来的插槽</li><li><code>emit</code>:当我们组件内部需要发出事件时会用到emit(<span style="color:red">不可以通过 this.$emit发出事件</span></li></ol></li></ul><h2 id="setup函数的返回值"><a href="#setup函数的返回值" class="headerlink" title="setup函数的返回值"></a>setup函数的返回值</h2><blockquote><ul><li><code>setup</code>的返回值可以在模板<code>template</code>中被使用,通过setup的返回值来替代data选项</li><li>通过返回一个执行函数来代替在methods中定义的方法</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token keyword">let</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">const</span> <span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  counter<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">decrement</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  counter<span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span>counter<span class="token punctuation">,</span>increment<span class="token punctuation">,</span>decrement<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<span style="color:red">对于定义的一个变量来说,默认情况下,Vue并不会跟踪他的变化,这不是响应式的</span></li></ul><h2 id="setup中的this不可以用"><a href="#setup中的this不可以用" class="headerlink" title="setup中的this不可以用"></a>setup中的this不可以用</h2><ul><li>表达的含义是this并没有指向当前组件实例</li><li>并且在setup被调用之前,data,computed,methods等都没有被解析</li><li>所以无法在setup中获取this</li></ul><h2 id="响应式API"><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  counter<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用<code>template</code>访问时,要使用<code>state.name</code>的形式访问到,template并不能直接解构</p></li><li><p>使用reacitve响应式的原理</p><ul><li>reactive函数处理我们的数据之后,数据再次被使用时就会进行依赖收集</li><li>当数据发生改变时,所有收集到的依赖都是进行对应的响应式操作(比如更新界面)</li><li>data选项中,也是在内部交给了<code>reactive</code>函数将其编程响应式对象的</li></ul></li></ul><h3 id="ref的一些API"><a href="#ref的一些API" class="headerlink" title="ref的一些API"></a>ref的一些API</h3><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li><p><code>cosnt name=ref(&quot;zhangsan&quot;)</code></p><ul><li><code>ref</code> 会返回一个可变的响应式对象,该对象作为一个 响应式的引用 维护着它内部的值</li><li>内部的值是在<span style="color:red">ref的 value 属性中被维护的</span></li></ul></li><li><p>注意:</p><ul><li>模板中引入ref的值时,Vue会自动帮助我们进行解包操作,所以我们<span style="color:red">并不需要在模板中通过 <code>name.value</code> 的方式,直接使用<code>name</code>即可</span></li><li>在 <code>setup</code> 函数内部,它依然是一个 ref引用, 所以对其进行操作时,我们依然需要使用 <code>name.value</code>的方式</li></ul></li><li><p>关于ref自动解包</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    counter  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> reactiveInfo <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    counter  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>counter<span class="token punctuation">,</span>info<span class="token punctuation">,</span>reactiveInfo<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当我们在<code>template</code>模板中使用ref对象, 它会自动进行解包,<code>&#123;&#123;counter&#125;&#125;</code>可以访问到</li><li>info是一个普通的JavaScript对象:ref的解包只能是一个浅层解包,<code>&#123;&#123;info.counter.value&#125;&#125;</code></li><li>当如果最外层包裹的是一个reactive可响应式对象, 那么内容的ref可以解包<code>&#123;&#123;reactiveInfo.counter&#125;&#125;</code></li></ol><h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><blockquote><p>对reactive返回的对象进行解构获取值,那么之后无论是<span style="color:red">修改结构后的变量,还是修改reactive返回的state对象</span>,数据都不再是响应式的</p></blockquote><ol><li><code>toRefs</code>的函数,可以将reactive返回的对象中的属性都转成ref</li><li>那么我们再次进行结构出来的 name 和 age 本身都是 ref的</li><li>这种做法相当于已经在<code>state.name</code>和r<code>ref.value</code>之间建立了 链接,任何一个修改都会引起另外一个变化</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reavtive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//const &#123;name,age&#125;=state//这种不能做到响应式</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><blockquote><p>只希望转换一个<code>reactive</code>对象中的属性为ref</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref的其它api"><a href="#ref的其它api" class="headerlink" title="ref的其它api"></a>ref的其它api</h4><ul><li><code>isRef</code><ul><li>判断值是否是一个ref对象。</li></ul></li><li><code>unref</code><ul><li>如果我们想要获取一个ref引用中的value,那么也可以通过unref方法</li><li>如果<span style="color:red">参数是一个 ref,则返回内部值,否则返回参数本身</span></li><li>这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数</li></ul></li><li><code>shallowRef</code><ul><li>创建一个浅层的ref对象</li></ul></li><li><code>triggerRef</code><ul><li>手动触发和 <code>shallowRef</code> 相关联的副作用</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span><span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span>  <span class="token comment">//手动修改</span>  <span class="token function">triggerRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h4><ul><li><p>创建一个自定义的ref,并对其依赖项跟踪和更新触发进行显示控制</p><ul><li>它需要一个工厂函数,该函数接受 track 和 trigger 函数作为参数</li><li>并且应该返回一个带有 get 和 set 的对象</li></ul></li><li><p>简单的防抖操作</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> customRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><ul><li><p><code>readonly</code>返回的对象都是不允许修改的</p></li><li><p>但是经过<code>readonly</code>处理的原来的对象是允许被修改的</p><ul><li>例如<code>const info = readonly(obj)</code>,info对象是不允许被修改的,但是obj对象可以修改</li><li>本质上就是readonly返回的对象的setter方法被劫持了</li></ul></li><li><p>传递readonly处理过的对象(<code>info</code>)给子组件,父组件可以通过修改原来的对象(<code>obj</code>)来达到响应式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.普通对象</span><span class="token keyword">const</span> info1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyInfo1 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.响应式的对象reactive</span><span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> readonlyInfo2 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.响应式的对象ref</span><span class="token keyword">const</span> info3 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyInfo3 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reactive判断的API"><a href="#reactive判断的API" class="headerlink" title="reactive判断的API"></a>reactive判断的API</h2><ul><li><code>isProxy</code>: 检查对象是否是由<code>reactive</code> 或 <code>readonly</code>创建的 proxy</li><li><code>isReactive</code>:<ul><li>检查对象是否是由 <code>reactive</code>创建的响应式代理：</li><li>如果该代理是 <code>readonly</code> 建的,但包裹了由 <code>reactive</code> 创建的另一个代理,它也会返回 true</li></ul></li><li><code>isReadonly</code>:检查对象是否是由 <code>readonly</code> 创建的只读代理。</li><li><code>toRaw</code>:返回 <code>reactive</code> 或 <code>readonly</code> 代理的原始对象(<span style="color:red">不建议保留对原始对象的持久引用。请谨慎使用</span>)。</li><li><code>shallowReactive</code>: 创建一个响应式代理,它跟踪其自身 <code>property</code> 的响应性,但不执行嵌套对象的深层响应式转换 (深层还是原生对象)</li><li><code>shallowReadonly</code>: 创建一个 proxy,使其自身的 property 为只读,但不执行嵌套对象的深度只读转换(深层还是可读、可写的)</li></ul><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><blockquote><p><code>Composition API</code>中, setup 函数中使用 computed 方法来编写一个计算属性</p></blockquote><ul><li>接收一个getter函数,并为 getter 函数返回的值,返回一个不变的 ref 对象</li><li>接收一个具有 get 和 set 的对象,返回一个可变的(可读写)ref 对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fullName<span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> lastName<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> fullName<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lastName<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>firstName<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="setup中使用ref"><a href="#setup中使用ref" class="headerlink" title="setup中使用ref"></a>setup中使用ref</h2><blockquote><p>只需要定义一个ref对象,绑定到元素或者组件的ref属性上即可</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      title    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听数据"><a href="#监听数据" class="headerlink" title="监听数据"></a>监听数据</h2><ul><li>watchEffect用于自动收集响应式数据的依赖</li><li>watch需要手动指定侦听的数据源</li></ul><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><ul><li>watchEffect传入的函数<span style="color:red">会被立即执行一次,并且在执行的过程中会收集依赖</span></li><li>只有收集的依赖发生变化时,watchEffect传入的函数才会再次执行</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="停止监听-可以获取watchEffect的返回值函数-调用该函数"><a href="#停止监听-可以获取watchEffect的返回值函数-调用该函数" class="headerlink" title="停止监听:可以获取watchEffect的返回值函数,调用该函数"></a>停止监听:可以获取watchEffect的返回值函数,调用该函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stopWatch<span class="token operator">=</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeAge</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  age<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span>value<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">stopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watchEffect清除副作用"><a href="#watchEffect清除副作用" class="headerlink" title="watchEffect清除副作用"></a>watchEffect清除副作用</h4><blockquote><ul><li>比如在开发中我们需要在侦听函数中执行网络请求,但是在网络请求还没有达到的时候,我们停止了侦听器,或者侦听器侦听函数被再次执行了</li><li>那么上一次的网络请求应该被取消掉,这个时候我们就可以清除上一次的副作用</li></ul></blockquote><ul><li>在我们给watchEffect传入的函数被回调时,其实可以获取到一个参数：<code>onInvalidate</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stopWatch<span class="token operator">=</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onInvalidate</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2s后执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watchEffect的执行时机"><a href="#watchEffect的执行时机" class="headerlink" title="watchEffect的执行时机"></a>watchEffect的执行时机</h4><ul><li>setup函数在执行时就会立即执行传入副作用函数,这个时候DOM并没有挂载,打印ref对象的值为null</li><li>当DOM挂载时,会给title的ref对象赋值新的值,副作用函数会再次执行,打印出来对应的元素</li><li>函数执行时机,第二个参数(一个含有flush的对象)<ul><li>默认值是pre,它会在元素 挂载 或者 更新 之前执行；</li><li>首先先打印出来一个空的,当依赖的title发生改变时,就会再次执行一次,打印出元素</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tittle<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  flush<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绑定<code>flush:&quot;post&quot;</code>之后并不会在元素挂载之前更新</li></ul><h3 id="watch的使用"><a href="#watch的使用" class="headerlink" title="watch的使用"></a>watch的使用</h3><ul><li>watchEffect的比较,watch允许我们<ol><li>懒执行副作用(第一次不会直接执行)</li><li>更具体的说明当哪些状态发生变化时,触发侦听器的执行</li><li>访问侦听状态变化前后的值</li></ol></li></ul><h4 id="监听单个数据"><a href="#监听单个数据" class="headerlink" title="监听单个数据"></a>监听单个数据</h4><ul><li>一个getter函数：但是该getter函数必须引用可响应式的对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接写入一个可响应式的对象,reactive或者ref<ul><li><code>info.name</code></li></ul></li></ul><h4 id="监听多个数据"><a href="#监听多个数据" class="headerlink" title="监听多个数据"></a>监听多个数据</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>age<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  name<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="监听响应式对象"><a href="#监听响应式对象" class="headerlink" title="监听响应式对象"></a>监听响应式对象</h4><ul><li>侦听一个数组或者对象,那么可以使用一个getter函数,并且对可响应对象进行解构</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span>lisi<span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"zhagnsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token operator">...</span>info<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"wangba"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watch的选项"><a href="#watch的选项" class="headerlink" title="watch的选项"></a>watch的选项</h4><ul><li>第三个参数,传入一个对象<ul><li><code>deep:true</code>,深层监听</li><li><code>immediate:true</code> 立即执行</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>  feiends<span class="token operator">:</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"lisi"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">19</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>immediate<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"wangwu"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><table><thead><tr><th>optionsAPI</th><th>CompositionAPI</th></tr></thead><tbody><tr><td>beforeCreate</td><td>使用 setup()</td></tr><tr><td>created</td><td>使用 setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr><tr><td>activated</td><td>onActivated</td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table><h2 id="Provide和Inject"><a href="#Provide和Inject" class="headerlink" title="Provide和Inject"></a>Provide和Inject</h2><ul><li><p>可以通过 provide 方法来提供数据</p></li><li><p>provide可以传入两个参数</p><ul><li>name：提供的属性名称</li><li>value：提供的属性值</li></ul></li><li><p>在后代组件中通过 inject 来注入需要的属性和对应的值</p><ul><li>可以通过 inject 来注入需要的内容</li><li>inject可以传入两个参数</li></ul></li><li><p>使用ref或者reactive包裹数据,使其成为响应式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> counter <span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">let</span> info <span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span>counter<span class="token punctuation">)</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token comment">//后代组件</span><span class="token keyword">const</span> counter <span class="token operator">=</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token keyword">const</span> info <span class="token operator">=</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将修改的方法共享,在后代组件中复用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">changeInfo</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">changeInfo</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"changeInfo"</span><span class="token punctuation">,</span>changeInfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单介绍JSX的使用"><a href="#简单介绍JSX的使用" class="headerlink" title="简单介绍JSX的使用"></a>简单介绍JSX的使用</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      counter<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">decrement</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      counter<span class="token punctuation">.</span>value<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前计数器<span class="token punctuation">&#123;</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>increment<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>decrement<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSX中也可以使用vue组件<a href="https://v3.cn.vuejs.org/guide/render-function.html#jsx">https://v3.cn.vuejs.org/guide/render-function.html#jsx</a></li></ul><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><ul><li><p>当封装一个组件A,在另外一个组件B中使使用</p><ul><li>组件A中template的元素,会被挂载到组件B中template的某个位置</li><li>最终的应用会形成一颗DOM树结构</li></ul></li><li><p>将组件从组件树移除挂载,移动组件到Vue app之外的其他位置</p><ul><li>如移动到body元素上,或者我们有其他的<code>div#app</code>之外的元素上</li></ul></li><li><p>关于<code>Teleport</code>:个Vue提供的内置组件</p><ul><li>两个属性:</li><li>to:指定将其中的内容移动到的目标元素,可以使用选择器</li><li>disabled：是否禁用 teleport 的功能</li></ul></li><li><p><span style="color:red">其中teleport也可以使用组件,也可以给他传入一些数据</span></p></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;teleport to&#x3D;&quot;body&quot;&gt;      &lt;Home&gt;&lt;&#x2F;Home&gt;      &lt;h2&gt;你好啊.jack&lt;&#x2F;h2&gt;    &lt;&#x2F;teleport&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">注意:多个teleport应用到同一个目标上(（)to的值相同),那么这些目标会进行合并</span></li></ul><h2 id="vue插件进行编写"><a href="#vue插件进行编写" class="headerlink" title="vue插件进行编写"></a>vue插件进行编写</h2><blockquote><p>向Vue全局添加一些功能时,会采用插件的模式</p></blockquote><ul><li><p>对象类型:一个对象,但是必须包含一个 install 的函数,该函数会在安装插件时执行</p></li><li><p>函数类型：一个function,这个函数会在安装插件时自动执行</p></li><li><p><strong>可以完成的功能</strong></p><ul><li>添加全局方法或者 property,通过把它们添加到 <code>config.globalProperties</code> 上实现；</li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等；</li><li>通过全局 mixin 来添加一些组件选项；</li><li>一个库,提供自己的 API,同时提供上面提到的一个或多个功能</li></ul></li><li><p>对象写法</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$name <span class="token operator">=</span><span class="token string">"zhangsan"</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数类型的写法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在<code>main.js</code>引入插件的包,再用<code>app.use()</code>挂载</li><li>使用compositionApi引入</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> instance<span class="token operator">=</span><span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$name<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>参考:<a href="http://mail.zyjcould.ltd/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/">http://mail.zyjcould.ltd/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/</a></p><h2 id="nexttick"><a href="#nexttick" class="headerlink" title="nexttick"></a>nexttick</h2><blockquote><p>官方解释:将回调推迟到下一个 DOM 更新周期之后执行.在更改了一些数据以等待 DOM 更新后立即使用它</p></blockquote><ol><li><span style="color:red">watch回调函数,组件更新,生命周期回调函数</span>会放入微任务中执行</li><li>同步函数放入<code>nexttick()</code>钩子中,会放入微任务的最后执行</li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote><p>在vue中当&lt;style&gt;标签有<code>scoped</code>属性时,他的css只会作用于当前组件中的元素,父组件的样式不会渗透到子组件中.如果希望scoped样式可以影响到子组件.可以使用共深度选择器</p></blockquote><ul><li>在vue3中推荐使用<code>:deep(选择器)&#123;&#125;</code>,并且支持sass预处理器</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:deep(.ant-card-head-title)</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3的组件化的使用</title>
      <link href="/2021/09/25/vue3-de-zu-jian-hua-de-shi-yong/"/>
      <url>/2021/09/25/vue3-de-zu-jian-hua-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="理解插槽"><a href="#理解插槽" class="headerlink" title="理解插槽"></a>理解插槽</h2><ul><li>使组件具备更强的通用性,组件中的内容不再限制为固定的div、span等等这些元素</li><li>使用者可以决定某一块区域到底存放什么内容和元素</li><li>定义插槽slot<ul><li>插槽的使用过程其实是抽取共性、预留不同</li><li>我们会将共同的元素、内容依然在组件内进行封装</li><li>同时会将不同的元素使用slot作为占位,让外部决定到底显示什么样的元素</li></ul></li><li>使用插槽<ul><li>Vue中将 &lt;slot&gt; 元素作为承载分发内容的出口</li><li>在封装组件中,使用特殊的元素&lt;slot&gt;就可以为封装组件开启一个插槽</li><li>该插槽插入什么内容取决于父组件如何使用</li></ul></li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><blockquote><p>当插槽内部不具有name属性时,vue会自动给一个隐式名称<code>name:default</code></p><blockquote><p>且子组件不管有多少个插槽,每个插槽都会显示一样的内容</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span><span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span><span class="token operator">&lt;</span>template<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>具名插槽顾名思义就是给插槽起一个名字,&lt;slot&gt; 元素有一个特殊的 <code>attribute：name</code></li><li>一个不带 name 的slot,会带有隐含的名字 default</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件中</span><span class="token operator">&lt;</span>Footer<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      你好    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span><span class="token comment">//子组件中</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态插槽名</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[name]</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    你好  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token operator">...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"footer"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具名插槽的缩写<ul><li>把参数之前的所有内容<code>(v-slot:)</code>替换为字符 <code>#</code><ul><li>例如 <code>#footer</code>或者<code>#[name]</code></li></ul></li></ul></li></ul><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li><p>vue渲染作用域:</p><ul><li>父级模板里的所有内容都是在父级作用域中编译的</li><li>子模板里的所有内容都是在子作用域中编译的</li></ul></li><li><p>希望插槽可以访问到子组件中的内容</p><ul><li>当一个组件被用来渲染一个数组元素时,我们使用插槽,并且希望插槽中没有显示每项的内容</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件中:有一个names的数组 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in names<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 具名插槽与作用域插槽 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>&#123;&#123;slotProps.item&#125;&#125;-&#123;&#123;slotProps.index&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Footer</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>独占默认插槽<ul><li>当默认插槽和作用域插槽简写,如果还有其它具名插槽那么简写方式不可以</li><li>子组件中的&lt;slot&gt;标签不能有name属性</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Foot v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"slotProps"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>slotProps<span class="token punctuation">.</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>slotProps<span class="token punctuation">.</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><blockquote><p>动态组件是使用 <code>component</code> 组件,通过一个特殊的<code>attribute is</code> 来实现,is属性是一个组件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>   <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTab<span class="token punctuation">"</span></span>   <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span>   <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span>   <span class="token attr-name">@pageClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意点:<ol><li>currentTab可以是通过component函数注册的组件</li><li>currentTab可以是在一个组件对象的components对象中注册的组件</li><li>动态组件的传值和其它组件的传值 是一样的</li></ol></li></ul><h2 id="缓存组件keep-alive"><a href="#缓存组件keep-alive" class="headerlink" title="缓存组件keep-alive"></a>缓存组件keep-alive</h2><blockquote><p>默认情况下,我们在切换组件后,组件会被销毁掉,再次回来时会重新创建组件</p><blockquote><p>然而某些情况我们希望继续保持组件的状态,而不是销毁掉,这个时候我们就可以使用一个内置组件:<code>keep-alive</code></p></blockquote></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home,about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>     <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTab<span class="token punctuation">"</span></span>     <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span>     <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span>     <span class="token attr-name">@pageClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="keep-alive的一些属性"><a href="#keep-alive的一些属性" class="headerlink" title="keep-alive的一些属性"></a>keep-alive的一些属性</h3><ul><li><p><code>include</code>:可以使用<code>string</code>|<code>RegExp</code>|<code>Array</code>.只有名称匹配的组件会被缓存</p><ul><li>string:<code>include:&quot;a,b&quot;</code></li><li>RegExp:<code>:include:&quot;/a|b/&quot;</code></li><li>Array:<code>:include:&quot;[&#39;a&#39;,&#39;b&#39;]&quot;</code></li></ul></li><li><p><code>exclude</code> : <code>string</code> | <code>RegExp</code> | <code>Array</code>.任何名称匹配的组件都不会被缓存</p></li><li><p><code>max</code>(不常用) : <code>number</code> | <code>string</code>.最多可以缓存多少组件实例,一旦达到这个数字,那么缓存组件中最近没有被访问的实例会被销毁</p></li></ul><h3 id="缓存组件的生命周期"><a href="#缓存组件的生命周期" class="headerlink" title="缓存组件的生命周期"></a>缓存组件的生命周期</h3><blockquote><p><span style="color:red">对于缓存的组件来说,再次进入时,我们是不会执行created或者mounted等生命周期函数的</span></p></blockquote><ul><li><strong>activated</strong>:在vue对象存活的情况下,进入当前存在<code>activated()</code>函数的页面时,一切到改页面就触发.</li><li><strong>deactivated</strong>:当离开组件A,切到组件B之前,需要对组件A做某些处理,比如清除定时器,这时就需要使用<strong>deactivated</strong></li></ul><h2 id="异步组件的实现-多在路由中用到"><a href="#异步组件的实现-多在路由中用到" class="headerlink" title="异步组件的实现(多在路由中用到)"></a>异步组件的实现(多在路由中用到)</h2><blockquote><p>默认情况下,在构建整个组件树的过程中,因为组件和组件之间是通过模块化直接依赖的,那么webpack在打包时就会将组件模块打包到一起（比如一个app.js文件中）</p></blockquote><h3 id="webpack的代码分包"><a href="#webpack的代码分包" class="headerlink" title="webpack的代码分包"></a>webpack的代码分包</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./utils/math"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue中实现异步组件"><a href="#vue中实现异步组件" class="headerlink" title="vue中实现异步组件"></a>vue中实现异步组件</h3><ul><li><p>如果我们的项目过大了,对于某些组件我们希望通过异步的方式来进行加载(即进行分包处理),利用vue中的<code>defineAsyncComponent</code>函数</p><ul><li>写成工厂函数,该工厂函数需要返回一个Promise对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>defineAsyncComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> AsyncMain<span class="token operator">=</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/Main.vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>    AsyncMain  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接受一个对象类型,对异步函数进行配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> AsyncMain<span class="token operator">=</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">loader</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/Main.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>loadingComponent<span class="token operator">:</span> Loading<span class="token punctuation">,</span>errorComponent<span class="token operator">:</span>Failing<span class="token comment">//在显示loadingComponents组件之前,等待多长时间</span>delay<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token function-variable function">onError</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>retry<span class="token punctuation">,</span>fail<span class="token punctuation">,</span>attempts</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>loadingComponent</code></td><td>传入一个组件,如果没有加载出异步组件,占位组件会占位</td></tr><tr><td><code>errorComponent</code></td><td>传入一个组件,组件加载失败时显示的组件</td></tr><tr><td><code>delay</code></td><td>在显示loadingComponents组件之前,等待多长时间</td></tr><tr><td><code>onError</code></td><td>传入一个带有四个参数的函数,</td></tr></tbody></table><ul><li><code>onError</code>参数<ul><li><code>err</code>:错误信息</li><li><code>retry</code>:函数,调用retry尝试重新加载</li><li><code>fail</code>:函数,指加载程序结束退出</li><li><code>attempts</code>:记录尝试的次数</li></ul></li></ul><h3 id="异步组件与Suspense-还在实验中-API随时可能修改"><a href="#异步组件与Suspense-还在实验中-API随时可能修改" class="headerlink" title="异步组件与Suspense(还在实验中,API随时可能修改)"></a>异步组件与Suspense(<span style="color:red">还在实验中,API随时可能修改</span>)</h3><ul><li><code>Suspense</code>是一个内置的全局组件,该组件有两个插槽：<ul><li><code>default</code>:如果default可以显示,那么显示default的内容</li><li><code>fallback</code>:如果default无法显示,那么会显示fallback插槽的内容</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncHeader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncHeader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用元素和组件"><a href="#引用元素和组件" class="headerlink" title="引用元素和组件"></a>引用元素和组件</h2><ul><li><code>$refs</code>:持有注册过<code>ref attribute</code> 的所有 DOM 元素或者组件实例</li><li><code>$parent</code> 和 <code>$root</code>,获取父元素实例和根元素实例</li></ul><h2 id="组件的v-model"><a href="#组件的v-model" class="headerlink" title="组件的v-model"></a>组件的v-model</h2><blockquote><p>在input中可以使用v-model来完成双向绑定</p><blockquote><p>在封装一个组件,其他地方在使用这个组件时,也可以使用v-model来同时完成这两个功能</p></blockquote></blockquote><ul><li>在&lt;input&gt;中绑定<code>v-model</code>默认帮我们完成的两件事:<ul><li><span style="color:red">v-bind:value的数据绑定和@input的事件监听</span></li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 组件直接绑定v-model,相当于写成以下模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name">:modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">@update:</span>modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message=$event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;modelValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    modelValue<span class="token operator">:</span>String<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    value<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelValue      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意:<span style="color:red">v-model不能直接绑定到props,props中的属性只读不要改</span></p></li><li><p>绑定多个参数,可以给<code>v-model</code>传参</p><ol><li>默认情况下:v-model其实是绑定了 <code>modelValue</code> 属性和 <code>@update:modelValue</code>的事件</li><li><code>v-model:tittle</code>绑定了<code>title</code>属性,监听了 <code>@update:title</code>的事件</li></ol></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name"><span class="token namespace">v-model:</span>demo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>tittle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tittle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tittleValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;tittleValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;demoValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    demo<span class="token operator">:</span>String<span class="token punctuation">,</span>    tittle<span class="token operator">:</span>String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"update:tittle"</span><span class="token punctuation">,</span><span class="token string">"update:demo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    tittleValue<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tittle      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:tittle"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    demoValue<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>demo      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:demo"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3组件通信的方式</title>
      <link href="/2021/09/24/vue3-zu-jian-tong-xin-de-fang-shi/"/>
      <url>/2021/09/24/vue3-zu-jian-tong-xin-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="父传子的方式"><a href="#父传子的方式" class="headerlink" title="父传子的方式"></a>父传子的方式</h2><h3 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h3><ul><li><p>关于props</p><ul><li>Props是你可以在组件上注册一些自定义的attribute；</li><li>父组件给这些attribute赋值，子组件通过attribute的名称获取到对应的值</li></ul></li><li><p>语法</p><ul><li>字符串数组:数组中的字符串就是<code>attribute</code>的名称</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件传递数据</span><span class="token operator">&lt;</span>Demo <span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">//可以动态的绑定</span><span class="token comment">//子组件接收数据</span>props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象类型，对象类型我们可以在指定attribute名称的同时，可以传入限制<ul><li>指定传入的<span style="color:red">attribute的类型(type)</span></li><li>指定传入的<span style="color:red">attribute是否是必传的(require)</span></li><li>指定没有传入时，<span style="color:red">attribute的默认值(default)</span></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件传递数据</span><span class="token operator">&lt;</span>Demo id<span class="token operator">=</span><span class="token string">"123"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"aaa"</span> tittle<span class="token operator">=</span><span class="token string">"hhh"</span> content<span class="token operator">=</span><span class="token string">"ggg"</span> <span class="token operator">:</span>a<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token comment">//子组件接收父组件数据</span><span class="token keyword">const</span> props<span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  tittle<span class="token operator">:</span> String<span class="token punctuation">,</span>  content<span class="token operator">:</span> String<span class="token punctuation">,</span>  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    require<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>type类型</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul></li><li><p>注意点:类型有关对象的,默认值要写成一个工厂函数(例如<code>Array</code>,<code>Object</code>,<code>Date</code>,<code>Function</code>)<span style="color:red">建议全写成函数</span></p></li></ul><blockquote><p>vue3的顶层setup中使用<code>defineprops</code>如果使用的是泛型,不能设置默认值,如果使用定义值的写法,有默认值,但比较繁琐</p></blockquote><ul><li>并且如果使用泛型,ts会对其进行检查,但是自定义值不会</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;使用泛型的写法interface test &#123;  test: number  test2: Object&#125;const prop &#x3D; defineProps&lt;&#123;  msg: &#123; type: string &#125;  obj: test&#125;&gt;()&#x2F;&#x2F;使用自定义值const prop &#x3D; defineProps(&#123;  msg: String,  obj: &#123;    type: Object,    default: () &#x3D;&gt; (&#123;&#125;)  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非Prop的Attribute"><a href="#非Prop的Attribute" class="headerlink" title="非Prop的Attribute"></a>非Prop的Attribute</h3><ul><li><p>定义</p><ul><li>当我们传递给一个组件某个属性，但是该属性并没有定义对应的props或者emits时，就称之为 非Prop的Attribute</li><li>常见的包括<code>class</code>,<code>style</code>,<code>id属性</code>等</li></ul></li><li><p><strong>Attribute继承</strong></p><ul><li>当组件有单个根节点时，非Prop的Attribute将自动添加到根节点的Attribute中</li></ul></li><li><p><strong>注意</strong>:</p><ol><li><p>如果我们<strong>不希望组件的根元素继承attribute</strong>，可以在组件中设置 <strong>inheritAttrs: false</strong></p><ul><li><span style="color:red">但是<code>class</code> , <code>style</code></span>，不是 的一部分<code>$attrs</code>，仍将应用于组件的根元素</li></ul></li><li><p>通过 <code>$attrs</code>来访问所有的 非props的attribute</p></li><li><p>使用<code>v-bind</code>可以直接解构绑定的对象,而不需要一个个单独传递</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//父组件传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>   //子组件取值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 访问所有的属性,且class属性绑定到根节点label上 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 拿到id属性 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多个根节点的attribute如果没有显示的绑定，那么会报警告，我们必须手动的指定要绑定到哪一个属性上(由于vue3取消div根元素包裹)</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>伞兵一号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>伞兵2号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>伞兵3号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h2><h3 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h3><ul><li><p>使用情景</p><ul><li>当子组件有一些事件发生的时候，比如在组件中发生了点击，父组件需要切换内容</li><li>子组件有一些内容想要传递给父组件的时候</li></ul></li><li><p>流程</p><ul><li>我们需要在子组件中定义好在某些情况下触发的事件名称</li><li>和<code>defineProps</code>一样,使用泛型可以得到很好的代码提示</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>butFn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//子组件中给定绑定的名称</span><span class="token keyword">interface</span> <span class="token class-name">testEmits</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'em'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'ws'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> emits <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span>testEmits<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">butFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'em'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">@em</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageFn<span class="token punctuation">"</span></span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>You did it!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">pageFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h3><blockquote><p>在&lt;script setup&gt;中使用的组件默认是关闭setup函数中的<code>retrun</code>,向外暴露属性的,不过可以使用<code>defineExpose</code>来暴露子组件的属性</p></blockquote><ul><li>问题:如果使用ts,父组件中的ref不能自动推断出子组件暴露的类型</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 子组件 --&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;const testExpose &#x3D; ref(&#123; name: &#39;zhagnsan&#39; &#125;)const fn &#x3D; () &#x3D;&gt; &#123;  console.log(&#39;testExpose&#39;)&#125;defineExpose(&#123; testExpose, fn &#125;)&lt;&#x2F;script&gt;&lt;!-- 父组件 --&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;const testE &#x3D; ref()const hello &#x3D; () &#x3D;&gt; &#123;  console.log(testE.value.testExpose.name)  testE.value.fn()&#125;&lt;&#x2F;script&gt;...&lt;template&gt; &lt;div class&#x3D;&quot;wrapper&quot; @click&#x3D;&quot;hello&quot;&gt;    &lt;HelloWorld ref&#x3D;&quot;testE&quot; @em&#x3D;&quot;pageFn&quot; msg&#x3D;&quot;You did it!&quot; &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h2><blockquote><p>用于深层嵌套的组件,子组件想获取父组件甚至父父的部分内容</p></blockquote><ul><li>父组件有一个 <code>provide</code> 选项来提供数据(强烈建议写成函数的形式)<ul><li><span style="color:red">写成对象模式,这里的this并不会绑定到vm身上,而是一个未定义</sapn></li></ul></li><li>子组件有一个 <code>inject</code>选项来开始使用这些数据</li><li>组件层级<code>App.vue-&gt;Home.vue-&gt;HomeContent.vue</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//App组件</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      names<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      names<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length      <span class="token comment">//names:computed(()=>this.names.length)响应式的数据</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//HomeContent组件</span>  inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"names"</span><span class="token punctuation">]</span>  <span class="token comment">//names.value拿取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>关于响应式数据的处理</strong></p></li><li><p><span style="color:red">修改了<code>this.names</code>的内容，使用length的子组件会并不会不会是响应式的</span></p></li><li><p>provide中的内容并不是响应式的,而是及时通信,修改内容后并不会引起子组件反应</p></li><li><p>解决:</p><ul><li>使用vue3中的<code>computed</code>函数,他返回的是一个ref对象,需要用value取出</li></ul></li></ul><h2 id="全局事件总线mitt"><a href="#全局事件总线mitt" class="headerlink" title="全局事件总线mitt"></a>全局事件总线mitt</h2><ul><li><p>Vue3从实例中移除了 <code>$on</code>、<code>$off</code> 和 <code>$once</code> 方法</p></li><li><p>安装mitt库:<code>npm install mitt</code></p></li><li><p>在utils中封装一个<code>eventbus.js</code>工具</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">'mitt'</span><span class="token keyword">const</span> emitter<span class="token operator">=</span><span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> emitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>监听与取消监听</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Header组件中传入数据</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击Header"</span><span class="token punctuation">)</span>      emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"why"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//Footer组件中接收数据</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">infomation</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>infomation<span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//取消单独事件监听</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>infomation<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>是通配符打印所有事件,type是接收类型即(“why”),info是传入信息</li><li>取消所有监听<code>emitter.all.clear</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于axios的使用</title>
      <link href="/2021/09/22/axios/"/>
      <url>/2021/09/22/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><blockquote><p>关于axios:是用promise对ajax的封装,支持promise的API</p></blockquote><ul><li>关于axios的特点<ol><li>基本promise的异步ajax请求库</li><li>浏览器端&#x2F;node端都可以使用</li><li>支持请求&#x2F;响应拦截器</li><li>支持请求取消</li><li>请求&#x2F;响应数据转换</li><li>批量发送多个请求</li></ol></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.dafaults.xxx</td><td>请求的默认全局配置</td></tr><tr><td>axios.create([config])</td><td>创建一个新的axios(他没有下面的功能)</td></tr><tr><td>axios.Cannel()</td><td>用于创建取消请求的错误对象</td></tr><tr><td>axios.CannelToken()</td><td>是否创建取消请求的token对象</td></tr><tr><td>axios.isCannel()</td><td>是否是一个取消请求的错误</td></tr><tr><td>axios.all()</td><td>用于批量执行多个异步请求</td></tr><tr><td>axios.spread()</td><td>用来指定接受所有成功的数据的回调函数的方法</td></tr></tbody></table><h3 id="Axios请求的方法"><a href="#Axios请求的方法" class="headerlink" title="Axios请求的方法"></a>Axios请求的方法</h3><ul><li><p>以函数的形式发请求</p><ul><li>语法: <code>axios(config)</code>,config是一个对象{}</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//请求的地址为:"http://localhost:3000/posts?id=1"</span>  url<span class="token operator">:</span><span class="token string">"http://localhost:3000/posts"</span><span class="token punctuation">,</span>  method<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>  params<span class="token operator">:</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以对象的形式发送请求</p><ul><li>语法:<code>axios.get(config)</code>,config是一个对象{}</li></ul></li></ul><blockquote><p>常用的请求</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>get</td><td>GET请求是可以缓存的,且GET请求有长度限制，仅用于请求数据(不修改)</td></tr><tr><td>post</td><td>用于将数据发送到服务器以创建或更新资源(非等幂的),多次调用会产生不同的结果</td></tr><tr><td>put</td><td>用于将数据发送到服务器以创建或更新资源(等幂的),多次调用不会产生不同的结果</td></tr><tr><td>delete</td><td>用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。</td></tr></tbody></table><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><img src="./%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="拦截器"></p><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><ul><li><p>请求拦截器的作用</p><ul><li><span style="color:red">添加加载动画或者将本地的token, 携带在请求头给后台…</span></li></ul></li><li><p>语法:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>      <span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> config      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><ul><li><p>响应拦截器的作用</p><ul><li><span style="color:red">服务器返回登录状态失效，需要重新登录的时候，跳转到登录页…</span></li></ul></li><li><p>语法:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>      <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> response      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用js对axios的二次封装"><a href="#使用js对axios的二次封装" class="headerlink" title="使用js对axios的二次封装"></a>使用js对axios的二次封装</h3><ol><li>根据指定配置创建一个新的axios，也就是每个新的axios都有自己的配置</li><li>新axios只是没有<span style="color:red">取消请求和批量发请求</span>的方法，其它所有的语法都是一致的</li><li>由于项目中有部分接口需要的配置与另一个部分接口需要的配置不太一样<ul><li>解决：创建2个新的axios，每个都有自己特有的配置，分别应用到不同要求的接口请求中</li></ul></li></ol><ul><li>在index.js设置axios的实例</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> <span class="token string">"http://localhost:4000"</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>  <span class="token comment">//设置cors跨域,并设置访问权限,允许跨域携带cookie信息</span>  <span class="token comment">/* withCredentials为true的情况下，  后端要设置Access-Control-Allow-Origin为你的源地址，  例如http://localhost:8080，不能是*，  而且还要设置header(‘Access-Control-Allow-Credentials: true’); */</span>  <span class="token comment">//如果不是同一个域,在这里就需要设置的源地址就是http://localhost:4000</span>  withCredentials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认值false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//对于拦截器的设定</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在axios.js中设置请求的方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> service <span class="token keyword">from</span> <span class="token string">"./index"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      method<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>      url<span class="token punctuation">,</span>      params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//console.log("get请求成功")</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">reason</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//console.log("get请求失败")</span>        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在service.js中配置api接口</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./axios"</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserList</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用ts对axios封装"><a href="#使用ts对axios封装" class="headerlink" title="使用ts对axios封装"></a>使用ts对axios封装</h3><ul><li>拦截器存在的位置:<ol><li>全局拦截器,所有请求必须经过</li><li>实例拦截器:在实例中使用的拦截器</li><li>请求拦截器:只有特定的请求中才能拦截</li></ol></li></ul><h4 id="拦截器-interceptors-接口封装"><a href="#拦截器-interceptors-接口封装" class="headerlink" title="拦截器(interceptors)接口封装"></a>拦截器(interceptors)接口封装</h4><blockquote><ul><li>对于实例拦截器和请求拦截器并不是必须的,在这里使用可选链进行封装</li><li>由于请求中传入传入的数据并不能确定,接口需要用泛型</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import type &#123; AxiosResponse, AxiosRequestConfig &#125; from &#39;axios&#39;export interface RequestInterceptors&lt;T &#x3D; AxiosResponse&gt; &#123;  requestInterceptor?: (config: AxiosRequestConfig) &#x3D;&gt; AxiosRequestConfig  requestInterceptorCatch?: (error: any) &#x3D;&gt; any  responseInterceptor?: (config: T) &#x3D;&gt; T  responseInterceptorCatch?: (error: any) &#x3D;&gt; any&#125;export interface RequestConfig&lt;T &#x3D; AxiosResponse&gt; extends AxiosRequestConfig &#123;  interceptors?: RequestInterceptors&lt;T&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="axios类的封装"><a href="#axios类的封装" class="headerlink" title="axios类的封装"></a>axios类的封装</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import axios, &#123; AxiosInstance &#125; from &#39;axios&#39;import &#123; RequestInterceptors, RequestConfig &#125; from &#39;.&#x2F;interceptors&#39;class Service &#123;  service: AxiosInstance  interceptors?: RequestInterceptors  constructor(config: RequestConfig) &#123;    &#x2F;&#x2F;创建axios实例    this.service &#x3D; axios.create(config)    &#x2F;&#x2F;保存基本信息    this.interceptors &#x3D; config.interceptors    &#x2F;&#x2F;实例才有的拦截器    this.service.interceptors.request.use(      this.interceptors?.requestInterceptor,      this.interceptors?.requestInterceptorCatch    )    this.service.interceptors.response.use(      this.interceptors?.responseInterceptor,      this.interceptors?.responseInterceptorCatch    )    &#x2F;&#x2F;添加所有的实例都有的拦截器    this.service.interceptors.request.use(      (config) &#x3D;&gt; &#123;        console.log(&#39;所有的实例都有&#39;)        return config      &#125;,      (error) &#x3D;&gt; &#123;        return error      &#125;    )    this.service.interceptors.response.use(      (res) &#x3D;&gt; &#123;        const &#123; data &#125; &#x3D; res        if (data &#x3D;&#x3D;&#x3D; &#39;-10001&#39;) &#123;          console.log(&#39;失败&#39;)        &#125; else &#123;          return data        &#125;      &#125;,      (error) &#x3D;&gt; &#123;        if (error.response.status &#x3D;&#x3D;&#x3D; 404) &#123;          console.log(&#39;404&#39;)        &#125;        return error      &#125;    )  &#125;  request&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return new Promise((reslove, reject) &#x3D;&gt; &#123;      &#x2F;&#x2F;请求拦截器      if (config.interceptors?.requestInterceptor) &#123;        config &#x3D; config.interceptors.requestInterceptor(config)      &#125;      this.service        .request&lt;any, T&gt;(config)        .then((res) &#x3D;&gt; &#123;          &#x2F;&#x2F;响应拦截器          if (config.interceptors?.responseInterceptor) &#123;            res &#x3D; config.interceptors.responseInterceptor(res)          &#125;          &#x2F;&#x2F;数据向下传递          reslove(res)        &#125;)        .catch((err) &#x3D;&gt; &#123;          &#x2F;&#x2F;错误向下传递          reject(err)        &#125;)    &#125;)  &#125;  get&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;GET&#39; &#125;)  &#125;  post&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;POST&#39; &#125;)  &#125;  delete&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;DELETE&#39; &#125;)  &#125;  patch&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;PATCH&#39; &#125;)  &#125;&#125;export default Service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例的封装"><a href="#实例的封装" class="headerlink" title="实例的封装"></a>实例的封装</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import Service from &#39;.&#x2F;request&#x2F;axios&#39;import &#123; BASE_URL, TIME_OUT &#125; from &#39;.&#x2F;request&#x2F;config&#39;const service &#x3D; new Service(&#123;  baseURL: BASE_URL,  timeout: TIME_OUT,  interceptors: &#123;    requestInterceptor: (config) &#x3D;&gt; &#123;      console.log(&#39;qingqiuchengg&#39;)      return config    &#125;,    requestInterceptorCatch: (error) &#x3D;&gt; &#123;      return error    &#125;,    responseInterceptor: (config) &#x3D;&gt; &#123;      return config    &#125;,    responseInterceptorCatch: (config) &#x3D;&gt; &#123;      return config    &#125;  &#125;&#125;)export default service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="出口文件index-ts"><a href="#出口文件index-ts" class="headerlink" title="出口文件index.ts"></a>出口文件index.ts</h4><blockquote><p>我会对各种请求接口统一写入出口文件统一暴露,然后在组件中按需引入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express使用</title>
      <link href="/2021/09/21/express-shi-yong/"/>
      <url>/2021/09/21/express-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Express基础使用"><a href="#Express基础使用" class="headerlink" title="Express基础使用"></a>Express基础使用</h2><h3 id="nodemon修改完代码自动重启"><a href="#nodemon修改完代码自动重启" class="headerlink" title="nodemon修改完代码自动重启"></a>nodemon修改完代码自动重启</h3><ol><li><code>nodemon</code>基于Node.js开发的一个第三方命令行工具,</li><li>安装<code>npm i nodemon -g</code></li><li>使用<code>nodemon app.js</code>:可以监视你文件的变化(自动重启服务器)</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>基本配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>路由</p></blockquote><ul><li>静态路由</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态路由</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/admin/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> id<span class="token operator">=</span>req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态服务</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 公开指定目录 */</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/public/"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>request</code>参数上的一些属性<ul><li>get上的请求:<code>req.query</code>,以对象形式接收query参数</li><li>post上的请求:<code>req.body</code>,拿到表单的数据</li></ul></li></ul><h3 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h3><blockquote><p>问题:当挂在了多张表以后,就会出现后面的路由去前面的路由里空跑</p></blockquote><ul><li><p>解决:当你挂在了多个路由表以后,最好使用app.use()进行分类</p><ul><li>用户相关的路由,标识符以&#x2F;users开头</li><li>商品相关的路由以&#x2F;goods开头</li><li><code>app.use(&quot;/users&quot;,router1)</code></li><li><code>app.use(&quot;/goods&quot;,router2)</code></li></ul></li><li><p><code>app.use()</code></p><ul><li>第一个参数选填,默认是”*”,我们可以写一个标识符</li><li>表示以这个字符串开头的标识符,使用后面挂载的内容</li><li>第二个参数就是挂载的内容</li></ul></li><li><p>app:引入路由表</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/users"</span><span class="token punctuation">)</span><span class="token keyword">const</span> router2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/goods"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span>router1<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/goods"</span><span class="token punctuation">,</span>router2<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>router:封装路由表</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token keyword">const</span> router<span class="token operator">=</span>express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"laji"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"haoei"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span>router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><ul><li>结构图:<img src="./%E4%B8%AD%E9%97%B4%E4%BB%B6.png" alt="中间件"></li></ul><blockquote><p>中间件:</p><blockquote><p>在两个事情中间,给你断开,加入一个内容,加入的这个内容,可以做一些事情,可以继续走下一条路next<br>根据加入位置的不同,叫做不同的名字:</p></blockquote></blockquote><ul><li>全局中间件:<code>req,res,next</code><ol><li>所有请求都要经历,直接挂载到app上</li><li><code>app.use(function()&#123;&#125;)</code></li></ol></li><li>路由级中间件<code>req,res,next</code><ol><li>进入路由表,到匹配对应请求表示之间添加的</li><li>只对当前这个路由表生效</li><li><code>app.use(function()&#123;&#125;)</code></li></ol><ul><li>例如:<code>express.Router()</code></li></ul></li><li>路由应用级中间件<code>req,res,next</code><ol><li>书写在路由表中</li><li>再匹配到指定路径标识符以后,事件处理函数事件</li><li>只对匹配到的该路由标识符生效</li><li>router.get(“路径标识符”,中间件函数,路由处理函数)</li></ol></li><li>全局错误处理中间件<code>error,req,res,next</code><ol><li>一般书写在服务的最后</li><li>一般用来返回最终结果</li><li><code>app.use((error,req,res,next)=&gt;&#123;&#125;)</code></li></ol></li></ul><h3 id="全局错误处理中间件"><a href="#全局错误处理中间件" class="headerlink" title="全局错误处理中间件"></a>全局错误处理中间件</h3><blockquote><p>全局错误处理中间件是处理路由产生的错误,所以一定要写在路由表的后面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>message<span class="token operator">:</span>error<span class="token punctuation">,</span>code<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>username<span class="token operator">:</span>req<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="解析请求体-全局中间件"><a href="#解析请求体-全局中间件" class="headerlink" title="解析请求体(全局中间件)"></a>解析请求体(全局中间件)</h3><ul><li><p>espress对于地址后面的参数做了单独处理</p></li><li><p>get形式的参数,req里有query成员&#x3D;&gt;里面就是解析好的请求参数</p></li><li><p>使用express内置</p><ul><li>挂载在服务上,在进入路由之前,解析好请求体</li><li>挂载<code>express.urlencoded()</code></li><li>挂载以后,会在req里添加一个新的成员叫做body</li><li>里面就是所有请求的请求体信息</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token keyword">const</span> testRouter<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/test"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//解决跨域</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//直接挂载一个解析请求体的方式</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>testRouter<span class="token punctuation">)</span><span class="token comment">//路由表一定要在最后写</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chenggong"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跨域的最终解决方案,<code>cors</code></li></ul><h3 id="文件上传-路由应用级中间件"><a href="#文件上传-路由应用级中间件" class="headerlink" title="文件上传(路由应用级中间件)"></a>文件上传(路由应用级中间件)</h3><ul><li>单文件上传<ul><li>接收文件:在服务器准备一个用来存储文件的文件夹</li><li>需要插件帮助<ol><li>multer  下载  配置  使用multer配置一个接收器</li><li><code>multer(&#123;dest:&quot;存放文件的路径&quot;&#125;)</code></li></ol></li><li>使用接收器:哪一个路由接收文件,配置在哪一个路由上<ol><li>写在路由标识符后面,路由处理函数的前面</li><li>接收器,single(“前端上传的文件key”)</li></ol></li></ul></li><li><span style="color:red">注意:会把你的文件存储起来,但是没有后缀,随机命名</span></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导入multer插件</span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token comment">//使用multer去生成一个接收器(接收文件存储在指定目录)</span><span class="token keyword">const</span> fileUpload<span class="token operator">=</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dest<span class="token operator">:</span><span class="token string">"../uploads"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span>fileUpload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chi"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂单文件上传(只需在单文件上传的基础上,配置一个仓库信息即可)<ul><li>生成一个仓库信息</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">destitnation</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定存储路径</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定文件名称</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<span style="color:red">返回值:一个仓库信息,使用multer生成一个收集器,接收器里配置一个仓库信息,语法:<code>multer(&#123;storage:仓库信息&#125;)</code></span></p><ul><li>参数<ul><li>req,本次请求信息</li><li>file,本次请求的文件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用multer生成一个仓库信息</span><span class="token keyword">const</span> storage<span class="token operator">=</span>multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">destination</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>file<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//callback.回调函数来设定存储路径</span>    <span class="token comment">//第一个参数null,表示不要修改的二进制流文件</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"../uploads"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>file<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//callback.回调函数来设定文件名称</span>    <span class="token comment">//从file信息里把后缀名拿出来,自己拼接随机数</span>    <span class="token keyword">const</span> tem<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">avatar_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tem<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单名称多文件上传(在复杂单文件基础上改使用方法)<ul><li><code>single</code>方法是专门接收单文件:<span style="color:red">一个名称一个文件</span></li><li><code>array</code> 方法是专门接收多文件:<span style="color:red">一个名称多个文件</span><ul><li>后面的路由处理函数里面就不能接收<code>req.file</code><ul><li>file只是接收单文件</li><li>files接收多文件  (以一个数组的形式接收file信息)</li></ul></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span>fileUpload<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"接收请求信息"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多名称多文件(在复杂单文件基础上改使用方法)<ul><li><code>field</code> 方法就是专门接收多文件:多个名称配多个文件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">fileUpload<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"avatar"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"photo"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cookie-amp-session-全局中间件"><a href="#cookie-amp-session-全局中间件" class="headerlink" title="cookie&amp;session(全局中间件)"></a>cookie&amp;session(全局中间件)</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li><p><code>cookie-parser</code> 的使用:专门操作cookie的插件</p></li><li><p>挂载到服务上:会在req上添加一个cookies的成员并且里面有所有的cookie信息.且res上会添加一个叫做cookie的方法</p></li><li><p>设置cookie使用的方法<span style="color:red">挂载到路由的前面<br>使用</span></p><ul><li>获取cookie,用<code>req.cookies()</code><ul><li><code>req.cookies</code>得到一个对象{},里面是所有的cookie信息</li><li>没有cookie得到一个空对象{}</li></ul></li><li>设置cookie,使用<code>res.cookies()</code><ul><li>语法:<code>res.cookie(key,value,&#123;options&#125;)</code></li><li>options:里面配置  路径 域名  过期时间</li><li><code>res.cookie(&quot;c&quot;,300)</code>,默认会话级别(session)</li><li>maxAge表示过期时间,会按照毫秒计算</li></ul></li></ul></li></ul><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><blockquote><p><code>express-session</code>的插件:专门与express的框架结合生成一个session空间</p></blockquote><ul><li>导入</li><li>挂载到服务上<ul><li><code>express-sessiom</code>会操作cookie,而且自动操作cookie</li><li><code>app.use(session(&#123;对session空间的配置&#125;))</code><ol><li><code>secret</code>:加密口令</li><li><code>saveUninitialized</code>:未初始化的时候要不要存储内容,默认是true</li><li><code>resave</code>:重新存储,一般开城true,表示每一次session修改的时候都会重新存储</li><li><code>name</code>:设置cookie的属性</li><li><code>cookie</code>:设置cookie的存储配置</li></ol></li></ul></li><li>使用<blockquote><p>会在req上添加一个成员叫做session是一个对象空间,我们可以向里面添加一些成员内容.当你第一次存储内容的时候,就已经把内容存进去</p></blockquote><ul><li>解释:<code>express-session</code>插件会自动生成一个session id.自动将这个id分成两半,一半放在cookie里面,一半放在服务器的内存里</li><li>属于服务器的一般session id是存储在内存中,一旦服务器重启,数据就消失</li><li>解决:持久化存储,存储在数据库里,<ul><li><code>express-session</code>有一个配置项叫做store</li><li>依赖于第三方插件 connect-mongo</li></ul></li></ul></li></ul><p><strong>connect-mongo</strong> : 选用3.2.0的数据库</p><ul><li><p>使用<code>connectMongo</code> 和<code>session</code>关联</p></li><li><p>在配置session的时候配置使用</p><ul><li>在session的挂载配置里面添加</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">store<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span><span class="token string">""</span>你的存储位置<span class="token punctuation">,</span>  touchAfter<span class="token operator">:</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">10</span>z <span class="token comment">//自动延长过期时间.至少设置一天(不推荐设置)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//过期会自动删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./router/router"</span><span class="token punctuation">)</span><span class="token keyword">const</span> cookieParser<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cookie-parser"</span><span class="token punctuation">)</span><span class="token keyword">const</span> session<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express-session"</span><span class="token punctuation">)</span><span class="token keyword">const</span> MongoStore<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"connect-mongo"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token comment">//关联session</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//挂载到服务上</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//挂载session</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//进行配置</span>  secret<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  name<span class="token operator">:</span><span class="token string">"sessionid"</span><span class="token punctuation">,</span>  saveUninitialized<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  resave<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  cookie<span class="token operator">:</span><span class="token punctuation">&#123;</span>maxAge<span class="token operator">:</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  store<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//你存储到mongodb的哪一个位置</span>    url<span class="token operator">:</span><span class="token string">"mongodb://localhost:27017/db"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意:</p><ol><li>打开页面就默认登录成功了(默认登录成功)</li><li>在session空间里面有一个数据,表示我登陆成功了</li><li>如果你需要存储,<code>req.session.name=value</code></li></ol></li><li><p>访问session空间</p><ul><li>里面如果有这个信息,表示登陆过,就正常显示页面</li><li>如果没有之前存储的信息,表示没有登录,或者一半session id是假的</li><li>直接跳转回登录页</li><li>在这里<code>req.session.username=&quot;张三&quot;</code>,如果是undefined,回到login</li><li>如果<code>req.session.username===&quot;张三&quot;</code>表示登陆过</li></ul></li></ul><h3 id="token凭证-全局中间件"><a href="#token凭证-全局中间件" class="headerlink" title="token凭证(全局中间件)"></a>token凭证(全局中间件)</h3><h4 id="跨域产生的问题"><a href="#跨域产生的问题" class="headerlink" title="跨域产生的问题"></a>跨域产生的问题</h4><blockquote><p>浏览器的同源策略导致的问题：不允许JS访问跨域的Cookie，所以我们没办法存取值</p></blockquote><ul><li>session 持久化存储:一人一半密码,一半在服务器,一半在cookie</li><li>如果想要持久保持登录状态<ol><li>服务器不能变</li><li>可以设置cookie</li></ol></li><li>session的缺点<ol><li>需要保证同一台服务器,不能更换服务器</li><li>保证cookie可以设置,跨域以后cookie不能设置</li><li>容易被伪造</li></ol></li></ul><blockquote><p>解决跨域问题</p></blockquote><ul><li><p>客户端:需要设置<code>withCredentials</code> 属性为 true</p></li><li><p>服务端:同时服务端的响应中必须携带 <code>Access-Control-Allow-Credentials: true</code> 首部。如果服务端的响应中未携带<code>Access-Control-Allow-Credentials: true</code> 首部，浏览器将不会把响应的内容返回给发送者</p></li><li><p>注意规范中提到，<span style="color:red">如果 XMLHttpRequest 请求设置了withCredentials 属性，那么服务器不得设置 Access-Control-Allow-Origin的值为*</span> ，否则浏览器将会抛出<code>The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39;</code> 错误</p></li></ul><h4 id="token凭证的使用"><a href="#token凭证的使用" class="headerlink" title="token凭证的使用"></a>token凭证的使用</h4><ul><li><p>为什么需要token</p><ol><li>http无状态</li><li>session无法跨服务器</li><li>跨域以后cookie无法使用</li><li>token是三段式的加密字符串:第一段和第三段是不可逆加密哈希散列,第二段是base64可逆</li></ol></li><li><p>token验证登录</p><blockquote><p>三段式加密字符串:header(算法).payload(数据).signature(签名信息)</p><blockquote><ul><li>第一段:头,签证:安全信息验证,你的口令,进行不可逆加密</li><li>第二段:你要保存的信息:将<code>header</code>和<code>payload</code>base64编码后进行算法运算得到签名信息</li><li>第三段:额外信息:不可逆加密</li></ul><blockquote><p> 这一段字符串由后端发给前端.在登陆过以后,生成一个token给前端,前端保存这个token如果前端需要登录后查看页面,或者登陆后发送的请求,只要你把token带回来,解密一下</p></blockquote></blockquote></blockquote></li><li><p>jwt的使用</p><ul><li>下载第三方包:npm i jsonwebtoken</li><li>生成:<code>jwt.sign(保存的信息,口令,参数)</code><ul><li>保存的信息  </li><li>口令:加密口令,加密的时候混入信息使用,解密的时候还要这个口令</li><li>参数:是一个对象,<code>&#123;expiresIn:过期事件,单位为秒(&quot;1d&quot;)&#125;</code></li></ul></li><li>解码:<code>jwt.verify(要解析的token,口令,回调函数)</code><ul><li>token:必须是一个指定的token</li><li>口令:必须是加密时候的口令</li><li>回调函数的形式接收结果</li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result<span class="token operator">=</span>jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>usrInfo<span class="token punctuation">,</span><span class="token string">"zhangsanfeng"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>expiresIn<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//console.log(result)</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token string">"zhangsanfeng"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>验证token:使用<code>express-jwt</code><ul><li>express框架和jwt结合的第三方中间件</li><li>下载:npm i express-jwt</li><li>使用:注册为中间件:<code>app.use(expressJWT(&#123;配置&#125;).unless(&#123;配置&#125;))</code></li><li>如果要使用express-jet:必须要有一个全局配置错误处理中间件</li><li>注意:<span style="color:red">正常的token返回给前端写成 “Bearer “+ token</span>,<code>Bearer</code>后面一定要由空格</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//注册token验证中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//解析口令,需要和加密的时候一致</span>  secret<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token comment">//加密方式:SHA256,加密方式在express-jwt里面叫做HS256</span>  algorithms<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"HS256"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//不需要验证token的路径标识符</span>  path<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/banner"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//错误处理中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"错误处理中间件"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务端页面渲染"><a href="#服务端页面渲染" class="headerlink" title="服务端页面渲染"></a>服务端页面渲染</h3><ul><li><p><code>express-art-template</code>插件:专门和express结合的art-template模板引擎</p></li><li><p>注意</p><ul><li>使用:<code>express-art-template</code>插件的时候(只负责与express结合)</li><li>必须下载:<code>art-template</code>插件</li></ul></li><li><p>配置:</p><ul><li>语法:<code>app.engine(后缀名,在引擎上配置哪个内容)</code></li><li>例如:<code>app.engine(&quot;html&quot;,require(&quot;express-art-template&quot;))</code></li><li>其中,在这里配置好<code>express-art-template</code>,会自动引入<code>art-template</code></li></ul></li><li><p>使用:</p><ul><li>在引擎上配置好以后,<code>express-art-template</code>,会在res上添加一个方法叫做<code>render()</code></li><li>语法:res.render(路径,对象)<ul><li>例如:<code>res.render(&quot;./login.html&quot;,&#123;&#125;)</code></li></ul></li><li>路径:默认是服务器根目录(app.js所在目录)下的views文件夹里面的路径</li><li>a.html–&gt;views&#x2F;a.html:会自动读取这个匹配的文件</li><li>对象:成员,就是在指定文件里面使用的数据<code>&#123;name:&quot;jack&quot;&#125;</code></li><li>作用:<ol><li>自动取views文件夹里面按照你的路径读取文件</li><li>自动按照 模板引擎 组装好你的页面</li><li>自动把这个拼接好的页面返回给前端</li></ol></li></ul></li></ul><h2 id="MVC开发模型"><a href="#MVC开发模型" class="headerlink" title="MVC开发模型"></a>MVC开发模型</h2><ul><li>结构图:<img src="./mvc.png" alt="mvc"></li></ul><blockquote><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p></blockquote><ul><li><p><code>Model</code>（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p></li><li><p><code>View</code>（视图） - 视图代表模型包含的数据的可视化。</p></li><li><p><code>Controller</code>（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开</p></li><li><p>举例:<img src="./mvc%E5%B0%81%E8%A3%85%E5%BC%8F%E5%BC%80%E5%8F%91.png" alt="封装一个项目"></p><ul><li>config:配置</li><li>controllers:路由处理函数控制器</li><li>db:数据库模型封装</li><li>middleware:路由中间件的封装</li><li>model:对数据库操作的封装</li><li>routes:路由表的封装</li><li>utils:工具类</li><li>app:引入</li></ul></li></ul><h2 id="express创建ts项目"><a href="#express创建ts项目" class="headerlink" title="express创建ts项目"></a>express创建ts项目</h2><ol><li><p><code>npm install -g express express-generator</code>:创建脚手架</p></li><li><p><code>express --view ejs server</code>:使用ejs的模板当作express的视觉引擎,server是工作目录</p></li><li><p>添加ts支持</p><ul><li><code>npm install -g typescript</code>:全局安装ts检查</li><li><code>npm install -g ts-node</code>:安装编译工具</li><li><code>npm install @types/node @types/express  --save-dev</code>:安装类型依赖</li></ul></li><li><p>配置<code>tesconfig.json</code>文件<code>tsc --init</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"> <span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2016"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2016"</span><span class="token punctuation">,</span><span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>tsc</code>:将ts文件打包成js文件</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs及网络请求</title>
      <link href="/2021/09/20/nodejs-ji-wang-luo-qing-qiu/"/>
      <url>/2021/09/20/nodejs-ji-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs核心模块"><a href="#nodejs核心模块" class="headerlink" title="nodejs核心模块"></a>nodejs核心模块</h2><h3 id="fs读写模块"><a href="#fs读写模块" class="headerlink" title="fs读写模块"></a>fs读写模块</h3><ul><li>读取文件</li><li>使用<code>fs.readFile</code>用来读取文件<ol><li>第一个读取文件的路径</li><li>第二个参数是一个可选参数,字符编码转换:例如:<code>utf-8</code></li><li>第三个参数是一个回调函数<ul><li>成功 <code>data:数据</code>,&#96;&#96;&#96;error:null&#96;&#96;</li><li>失败 <code>data:undefined</code>,<code>error:错误对象</code></li></ul></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data/hello.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写入文件</li><li>使用<code>fs.writeFile</code>用来写入文件</li></ul><blockquote><p>第一个参数是文件路径,第二个参数是文件内容,第三个参数是回调函数  </p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./data/helloworld.txt"</span><span class="token punctuation">,</span><span class="token string">"dajiahao"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读目录</li><li>使用<code>fs.readDir</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readDir</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><ul><li><code>path.basename</code><ul><li>获取一个路径的文件名(默认包含扩展名)</li></ul></li><li><code>path.dirname</code><ul><li>获取一个路径中的目录部分</li></ul></li><li><code>path.extname</code><ul><li>获取一个路径中的扩展名部分</li></ul></li><li><code>path.parse</code><ul><li>把一个路径转换为对象<ul><li>root:根路径</li><li>dir:目录</li><li>base:包含后缀名的文件名</li><li>ext:后缀名</li><li>name:不包含后缀名的文件名</li></ul></li></ul></li><li><code>path.join</code><ul><li>当你需要进行路径拼接的时候,推荐使用这个方法</li></ul></li><li><code>path.isAbsolute</code>:判断一个路径是否为绝对路径</li></ul><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote><p>http模块,用来创建编写服务器:提供服务,发请求,接收请求,处理请求</p></blockquote><ol><li>创建一个Server实例</li><li>注册request请求事件</li><li>绑定端口号,启动服务器</li></ol><ul><li><p>当客户端请求过来,就会自动触发<code>request</code>请求事件,然后执行第二个参数(回调函数函数)</p></li><li><p>request请求事件处理函数.接收两个参数</p><ul><li><p>request: 请求对象</p><p>  请求对象可以用来获取客户端的的一些请求信息.例如请求路径</p></li><li><p>response: 响应对象</p><p>  响应对象可以用来给客户端发送响应消息</p></li></ul></li><li><p><code>response</code> 对象的write方法,可以用来给客户端响应数据</p></li><li><p><code>write</code>可以使用多次,但是最后一定要用end来结束响应,否则客户端会一直等待</p></li><li><p>响应体的两种写法</p><ol><li><code>write&amp;end</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//结束响应 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>end</code>:<code>response.end(&quot;hello&quot;)</code>发送响应的同时,直接结束</li></ol></li><li><p>Tips:响应内容只能是二进制或者字符串</p><ol><li>如果要响应数字,对象,数组,布尔值,要用JSON.stringify()</li><li><code>response.end(JSON.stringify())</code></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token comment">//使用http.createServer()方法创建一个web服务器</span><span class="token keyword">const</span> server<span class="token operator">=</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hao"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3000端口号成功启动"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h3><ul><li><code>parse()</code>:解析地址,第一个参数为地址,第二个可选,默认为false,为true时,query查询参数为对象<ul><li><code>pathname</code>:不带查询参数的请求路径<ul><li>例如: 请求路径为<code>/plugins?name=jack&amp;password=123456</code></li><li>那么<code>pathname=/plugins</code></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token keyword">let</span> u<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/?tn=49055317_4_hao_pg"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">protocol<span class="token operator">:</span> <span class="token string">'https:'</span><span class="token punctuation">,</span>slashes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>auth<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>host<span class="token operator">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>port<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>hostname<span class="token operator">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>      hash<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>search<span class="token operator">:</span> <span class="token string">'?tn=49055317_4_hao_pg'</span><span class="token punctuation">,</span>query<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token operator">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> tn<span class="token operator">:</span> <span class="token string">'49055317_4_hao_pg'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>pathname<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>path<span class="token operator">:</span> <span class="token string">'/?tn=49055317_4_hao_pg'</span><span class="token punctuation">,</span>href<span class="token operator">:</span> <span class="token string">'https://www.baidu.com/?tn=49055317_4_hao_pg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li><p>tips:</p><ol><li>用户编写文件模块,相对路径必须加.&#x2F;,不能省略</li><li>node中没有全局作用域,只有模块作用域</li><li>外部访问不到内部,内部也访问不到内部</li></ol></li><li><p><code>require</code> 方法的两个作用:</p><ol><li>加载文件并且执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ol></li><li><p><code>exports</code>:</p><ol><li>在每个文件模块都提供一个对象:exports</li><li>exports默认是一个空对象</li><li>需要把所有需要被外部访问的成员变量挂载到exports上</li></ol></li><li><p>暴露方式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种暴露方式(暴露对象)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//第二种暴露方式(暴露函数)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//第三种暴露方式</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> module1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module3<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>module3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>原理解析(理解)</p><ul><li><code>exports</code>是<code>module.exports</code>的一个引用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//等价于</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token operator">===</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部暴露的是:<code>return module.exports</code></p><ul><li><span style="color:red">默认指向同一个对象,最好不要混用</span></li></ul></li></ul><h3 id="其他成员"><a href="#其他成员" class="headerlink" title="其他成员"></a>其他成员</h3><ul><li><p><code>__dirname</code>和<code>__filename</code></p></li><li><p><code>__dirname</code>:可以获取当前文件模块所属模块的绝对路径</p></li><li><p><code>__filename</code>:可以获取当前文件的绝对路径</p></li></ul><h2 id="服务端与客户端渲染"><a href="#服务端与客户端渲染" class="headerlink" title="服务端与客户端渲染"></a>服务端与客户端渲染</h2><blockquote><p>定义:</p></blockquote><ol><li>服务端渲染：DOM树在服务端生成,然后返回给前端.</li><li>客户端渲染（SSR）：前端去后端取数据生成DOM树.</li></ol><ul><li><p>服务端渲染的优点：</p><ol><li>尽量不占用前端的资源,前端这块耗时少,速度快.</li><li>有利于SEO优化,因为在后端有完整的html页面,所以爬虫更容易爬取信息.</li></ol></li><li><p>服务端渲染的缺点：</p><ol><li>不利于前后端分离,开发的效率降低了.</li><li>对html的解析,对前端来说加快了速度,但是加大了服务器的压力.</li></ol></li><li><p>客户端渲染的优点：</p><ol><li>前后端分离,开发效率高.</li><li>用户体验更好,我们将网站做成SPA（单页面应用）或者部分内容做成SPA,当用户点击时,不会形成频繁的跳转.</li></ol></li><li><p>客户端渲染的缺点：</p><ol><li>前端响应速度慢,特别是首屏,这样用户是受不了的.</li><li>不利于SEO优化,因为爬虫不认识SPA,所以它只是记录了一个页面.</li></ol></li><li><p>服务端和客户端渲染的区别：</p><ol><li>二者本质的区别：是谁来完成了html的完整拼接,服务端渲染是在服务端生成DOM树,客户端渲染是在客户端生成DOM树.</li><li>响应速度：服务端渲染会加快页面的响应速度,客户端渲染页面的响应速度慢.</li><li>SEO优化：服务端渲染因为是多个页面,更有利于爬虫爬取信息,客户端渲染不利于SEO优化.</li><li>开发效率：服务端渲染逻辑分离的不好,不利于前后端分离,开发效率低,客户端渲染是采用前后端分离的方式开发,效率更高,也是大部分业务采取的渲染方式.</li></ol></li><li><p>直观的区分服务端渲染和客户端渲染：</p><ul><li>源码里如果能找到前端页面中的内容文字,那就是在服务端构建的DOM,就是服务端渲染,反之是客户端渲染.</li></ul></li><li><p>应该使用服务端渲染还是客户端渲染：</p><ol><li>我们要根据业务场景去选择渲染的方式.</li><li>如果是企业级网站,主要功能是页面展示,它没有复杂的交互,并且需要良好的SEO,那我们应该使用服务端渲染.</li><li>如果是后台管理页面,交互性很强,它不需要考虑到SEO,那我们应该使用客户端渲染.</li><li>具体使用哪种渲染方式也不是绝对的,现在很多网站使用服务端渲染和客户端渲染结合的方式：首屏使用服务端渲染,其他页面使用客户端渲染.这样可以保证首屏的加载速度,也完成了前后端分离.</li></ol></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><ul><li>编码图<br><img src="/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="http请求报文"></li><li>结构图<br><img src="./%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="请求报文"></li></ul><blockquote><p>一个请求中会附带一个请求包头,包含一些“隐形”信息.语言、浏览器、操作系统和硬件设备.服务端可以根据这些信息再去生成有正对性的数据.</p></blockquote><ul><li><p>HTTP请求报文由<span style="color:red">请求行(request line),请求头部(header),空行和请求数据(请求体)</span>4个部分组成</p><ul><li>请求行:请求方法字段,url字段和HTTP协议版本<ul><li>例如: <code>GET /index.html HTTP/1.1</code></li><li>GET请求方法<ul><li>GET方法的特点<ul><li>GET请求能够被缓存<ul><li>GET请求会保存在浏览器的浏览记录中</li><li>以GET请求的URL能够保存为浏览器书签</li><li>GET请求有长度限制</li><li>GET请求主要用于获取数据</li></ul></li></ul></li></ul></li><li>GET请求参数<ul><li>例如:<a href="https://www.bilibili.com/video/BV1UE411H71P?p=30&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1UE411H71P?p=30&amp;spm_id_from=pageDriver</a></li><li>其中<code>?p=30&amp;spm_id_from=pageDriver</code>为get的请求参数,用req.query即可拿到</li></ul></li><li>POST<ul><li>POST方法的特点<ul><li>POST请求不能被缓存下来</li><li>POST请求不会保存在浏览器浏览记录中</li><li>以POST请求的URL无法保存为浏览器书签</li><li>POST请求没有长度限制</li><li>请求头(key value的形式):</li></ul></li></ul></li></ul></li><li>请求头<ul><li><code>User-Agent</code>:产生请求的浏览器类型</li><li><code>Accept</code>:客户端可以接收的内容类型列表</li><li><code>Host</code>:主机地址</li><li><code>Referer</code>:表示这个请求是从哪个URL过来的</li><li><code>Cache-Control</code>:对缓存进行控制:如一个请求希望响应返回的内容在客户端要被缓存一年，或不希望被缓存就可以通过这个报文头达到目的。 </li><li><code>Cookie</code>:<span style="color:red">客户端</span>的Cookie就是通过这个报文头属性传给服务端<ul><li><code>Cookie: $Version=1; Skin=new;jsessionid=5F4771183629C9834F8382E23BE13C4C</code></li></ul></li><li>其它属性: <a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a></li></ul></li><li>请求数据(请求体)<ul><li>一般 <span style="color:red">GET请求没有主体内容</span>,但 <code>POST</code> 请求是有的.<ul><li>get方法会将数据拼接在url后面,传递参数受限</li><li>post方法会把数据以key,value的形式发送请求</li></ul></li><li>POST 请求体最常见的媒体类型是 <code>application/x-www-form-urlendcoded</code>,是键值对集合的简单编码,用 &amp; 分隔（基本上和查询字符串的格式一样）.</li><li>如果 POST 请求需要支持文件上传,则媒体类型是 <code>multipart/form-data</code> ,它是一种更为复杂的格式.</li><li>最后是 AJAX 请求,它可以使用 application&#x2F;json</li></ul></li><li>空行:<ul><li>发送回测回复和换行符,通知服务器以下不再有请求头</li></ul></li></ul></li><li><p>例如请求数据：</p></li></ul><table><thead><tr><th>标号</th><th>请求报文</th></tr></thead><tbody><tr><td>1</td><td>GET&#x2F;sample.jspHTTP&#x2F;1.1</td></tr><tr><td>2</td><td>Accept:  image&#x2F;gif.image&#x2F;jpeg,&#x2F;</td></tr><tr><td>3</td><td>Accept-Language: zh-cn</td></tr><tr><td>4</td><td>Connection:  Keep-Alive</td></tr><tr><td>5</td><td>Host:</td></tr><tr><td>6</td><td>User-Agent:  Mozila&#x2F;4.0(compatible;MSIE5.01;Window NT5.0)</td></tr><tr><td>7</td><td>Accept-Encoding: gzip,deflate</td></tr><tr><td>8</td><td></td></tr><tr><td>9</td><td>username&#x3D;jinqiao&amp;password&#x3D;1234</td></tr></tbody></table><ul><li>第一行为http请求行，包含方法，URL 和http版本</li><li>2-7为请求头，包含浏览器，主机，接受的编码方式和压缩方式</li><li>第8行表示一个空行 表示请求头结束 这个空行是必须的</li><li>第9行是数据体，比如是需要查询的信息。</li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li>编码图<br><img src="./%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt="响应报文"></li></ul><blockquote><p>服务器响应回传一些浏览器没必要渲染和显示的信息,通常是元数据和服务器信息.它告诉浏览器正在被传输的内容类型（网页、图片、样式表、客户端脚本等）.</p></blockquote><ul><li><p>http响应体由三部分组成：</p><ul><li>http响应由三个部分组成分别是<span style="color:red">状态行，响应头，响应正文</span></li><li>状态行是由：<code>HTTP-Version+Status-Code+Reason-Phrase</code><ul><li><code>HTTP-Version</code>表示服务器HTTP协议的版本；<code>Status-Code</code>表示服务器发回的响应状态代码；<code>Reason-Phrase</code>表示状态代码的文本描述。<code>Status-Code</code>由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</li></ul></li><li>比如：HTTP&#x2F;1.1 200 ok<ul><li>分别表示http版本 + 状态码 + 状态代码的文本描述</li></ul></li></ul></li><li><p>状态码描述</p><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul></li><li><p>常见状态代码、状态描述的说明如下。</p><ul><li><code>200 OK</code>：客户端请求成功。</li><li><code>400 Bad Request</code>：客户端请求有语法错误，不能被服务器所理解。</li><li><code>401 Unauthorized</code>：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li><li><code>403 Forbidden</code>：服务器收到请求，但是拒绝提供服务。</li><li><code>404 Not Found</code>：请求资源不存在，举个例子：输入了错误的URL。</li><li><code>500 Internal Server Error</code>：服务器发生不可预期的错误。</li><li><code>503 Server Unavailable</code>：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP&#x2F;1.1 200 OK（CRLF）。</li></ul></li></ul><h4 id="常见的响应报文头属性"><a href="#常见的响应报文头属性" class="headerlink" title="常见的响应报文头属性"></a>常见的响应报文头属性</h4><p><strong>Cache-Control</strong>:响应输出到客户端后，服务端通过该报文头属告诉客户端如何控制响应内容的缓存</p><ul><li>例如:<code>Cache-Control: max-age=3600</code></li></ul><p><strong>Set-Cookie</strong>:服务端可以设置客户端的Cookie，其原理就是通过这个响应报文头属性实现的 </p><ul><li>例如:<code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code></li></ul><p><strong>Content-type</strong>:在响应体中设置</p><ol><li>服务端默认发送的数据,默认是utf-8的内容</li><li>浏览器不知道服务器端响应的是utf-8的编码,会默认使用当前操作系统的默认编码区解析</li><li>中文默认是gbk</li><li>在http协议中,<code>Content-type</code>是用来告诉对方,服务端发送的数据内容是什么类型</li></ol><ul><li><p>语法:<code>response.setHeader(&quot;Content-type&quot;,&quot;text/plain;charset=utf-8&quot;)</code></p></li><li><p>注意:在html中使用<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>也可以转换编码</p></li><li><p><code>Content-type</code>的类型</p></li></ul><table><thead><tr><th>text&#x2F;html</th><th>HTML格式</th></tr></thead><tbody><tr><td>text&#x2F;plain</td><td>纯文本格式</td></tr><tr><td>text&#x2F;xml</td><td>XML格式</td></tr><tr><td>text&#x2F;css</td><td>.css</td></tr><tr><td>image&#x2F;gif</td><td>gif图片格式</td></tr><tr><td>image&#x2F;jpeg</td><td>jpg图片格式</td></tr><tr><td>image&#x2F;png</td><td>png图片格式</td></tr><tr><td>application&#x2F;x-javascript</td><td>.js</td></tr><tr><td>audio&#x2F;mp3</td><td>.mp3</td></tr><tr><td>video&#x2F;mpeg4</td><td>.mp4</td></tr><tr><td>application&#x2F;pdf</td><td>.pdf</td></tr></tbody></table><p><strong>其它响应报文头属性</strong>:<a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>  </p><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><blockquote><p>请求对象（通常传递到回调方法,这意味着你可以随意命名,通常命名为 req 或 request ）的生命周期始于 Node 的一个核心对象 <code>http.IncomingMessage</code> 的实例.</p></blockquote><ul><li><p>Express 添加了一些附加功能.（除了来自 Node 的 <code>req.headers</code> 和<code>req.url</code> ,所有这些方法都由 Express 添加）.</p></li><li><p><code>req.params</code></p><ul><li>一个数组,包含命名过的路由参数.</li></ul></li><li><p><code>req.param(name)</code></p><ul><li>返回命名的路由参数,或者 GET 请求或 POST 请求参数.(建议你忽略此方法)</li></ul></li><li><p><code>req.query</code></p><ul><li>一个对象,包含以键值对存放的查询字符串参数（通常称为 GET 请求参数）</li></ul></li><li><p><code>req.body</code></p><ul><li>一个对象,包含 POST 请求参数.这样命名是因为 POST 请求参数在 REQUEST 正文中传递,而不像查询字符串在 URL 中传递.要使 req.body 可用,需要中间件能够解析请求正文内容类型.</li></ul></li><li><p><code>req.route</code></p><ul><li>关于当前匹配路由的信息.主要用于路由调试.</li></ul></li><li><p><code>req.cookies/req.singnedCookies</code></p><ul><li>一个对象,包含从客户端传递过来的 cookies 值.</li></ul></li><li><p><code>req.headers</code></p><ul><li>从客户端接收到的请求报头.</li></ul></li><li><p><code>req.accepts([types])</code></p><ul><li>一个简便的方法,用来确定客户端是否接受一个或一组指定的类型（可选类型可以是单个的 MIME 类型,如 <code>application/json</code> 、一个逗号分隔集合或是一个数组）,假定浏览器默认始终接受 HTML.</li></ul></li><li><p><code>req.ip</code></p><ul><li>客户端的 IP 地址.</li></ul></li><li><p><code>req.path</code></p><ul><li>请求路径（不包含协议、主机、端口或查询字符串）.</li></ul></li><li><p><code>req.host</code></p><ul><li>一个简便的方法,用来返回客户端所报告的主机名.这些信息可以伪造,所以不应该用于安全目的.</li></ul></li><li><p><code>req.xhr</code></p><ul><li>一个简便属性,如果请求由 Ajax 发起将会返回 true .</li></ul></li><li><p><code>req.protocol</code></p><ul><li>用于标识请求的协议（ http 或 https ）.</li></ul></li><li><p><code>req.secure</code></p><ul><li>一个简便属性,如果连接是安全的,将返回 true .等同于 <code>req.protocol===&#39;https&#39;</code> .</li></ul></li><li><p><code>req.url/req.originalUrl</code></p><ul><li>这些属性返回了路径和查询字符串（它们不包含协议、主机或端口）.</li></ul></li><li><p><code>req.url</code></p><ul><li>若是出于内部路由目的,则可以重写,但是 req.orginalUrl 旨在保留原始请求和查询字符串.</li></ul></li><li><p><code>req.acceptedLanguages</code></p><ul><li>一个简便方法,用来返回客户端首选的一组（人类的）语言.这些信息是从请求报头中解析而来的.</li></ul></li></ul><h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><blockquote><p>响应对象（通常传递到回调方法,这意味着你可以随意命名它,通常命名为 res 、 resp 或response ）的生命周期始于 Node 核心对象 <code>http.ServerResponse</code> 的实例.</p></blockquote><ul><li><p><strong>Express</strong> 添加了一些附加功能.下面列举了响应对象中最有用的属性和方法（所有这些方法都是由 Express添加的）.</p></li><li><p><strong>res.status(code)</strong></p><ul><li>设置 HTTP 状态代码.Express 默认为 200（成功）,所以你可以使用这个方法返回状态404（页面不存在）或 500（服务器内部错误）.</li></ul></li><li><p><strong>res.set(name,value)</strong></p><ul><li>设置响应头.这通常不需要手动设置.</li></ul></li><li><p><strong>res.cookie（name,vaue,[options]）,res.clearCookie(name,[options])</strong></p><ul><li>设置或清除客户端 cookies 值.需要中间件支持.</li></ul></li><li><p><strong>res.redirect([status],url)</strong></p><ul><li>重定向浏览器.默认重定向代码是 302（建立）.通常,你应尽量减少重定向,除非永久移动一个页面,这种情况应当使用代码 301（永久移动）.</li></ul></li><li><p><strong>res.send(body),res.send(status,body)</strong></p><ul><li>向客户端发送响应及可选的状态码.Express 的默认内容类型是 <code>text/html</code> .如果你想改为 <code>text/plain</code> ,需要在 res.send 之前调用<code>res.set(‘Content-Type’,’text/plain&#39;)</code> .如果 body 是一个对象或一个数组,响应将会以 JSON 发送（内容类型需要被正确设置）,不过既然你想发送 JSON,我推荐你调用 res.json .</li></ul></li><li><p><strong>res.json(json),res.json(status,json)</strong></p><ul><li>向客户端发送 JSON 以及可选的状态码.</li></ul></li><li><p><strong>res.jsonp()</strong></p><ul><li>发送带有JSONP支持的JSON格式数据响应</li></ul></li><li><p><strong>res.type(type)</strong></p><ul><li>一个简便的方法,用于设置<code>Content-Type</code> 头信息.基本上相当于 <code>res.set(‘Content-Type’,’type’)</code> ,只是如果你提供了一个_没有斜杠_的字符串,它会试图把其当作文件的扩展名映射为一个互联网媒体类型.比如, <code>res.type(&#39;txt&#39;)</code> 会将 Content-Type 设为<code>text/plain</code> .</li></ul></li><li><p><strong>res.format(object)</strong></p><ul><li>这个方法允许你根据接收请求报头发送不同的内容.这是它在 API 中的主要用途.这里有一个非常简单的例子：</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'text/plain'</span><span class="token operator">:</span><span class="token string">'hi there'</span><span class="token punctuation">,</span><span class="token string">'text/html'</span><span class="token operator">:</span><span class="token string">'&lt;b>hi there&lt;/b>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>res.attachment([filename]),res.download(path,[filename],[callback])</strong></p><ul><li>这两种方法会将响应报头 <code>Content-Disposition</code> 设为 <code>attachment</code> ,这样浏览器就会选择下载而不是展现内容.你可以指定 filename 给浏览器作为对用户的提示.用 re<code>s.download</code> 可以指定要下载的文件,而 <code>res.attachment</code> 只是设置报头.另外,你还要将内容发送到客户端.</li></ul></li><li><p><strong>res.sendFile(path,[option],[callback])</strong></p><ul><li>这个方法可根据路径读取指定文件并将内容发送到客户端.使用该方法很方便.使用静态中间件,并将发送到客户端的文件放在公共目录下.</li></ul></li><li><p><strong>res.links(links)</strong></p><ul><li>设置链接响应报头.这是一个专用的报头,在大多数应用程序中几乎没有用处.</li></ul></li><li><p><strong>res.locals,res.render(view,[locals],callback)</strong></p><ul><li><code>res.locals</code> 是一个对象,包含用于渲染视图的默认上下文. <code>res.render</code> 使用配置的模板引擎渲染视图, <code>res.render</code>的默认响应代码为 200,使用 <code>res.status</code> 可以指定一个不同的代码.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的模块化</title>
      <link href="/2021/09/14/js-mo-kuai-hua/"/>
      <url>/2021/09/14/js-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="IIFE模式"><a href="#IIFE模式" class="headerlink" title="IIFE模式"></a><code>IIFE</code>模式</h2><ul><li>模块化</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里的window可写可不写</span><span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token string">"module"</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span>module<span class="token operator">=</span><span class="token punctuation">&#123;</span>foo<span class="token punctuation">&#125;</span><span class="token comment">//将foo挂载到window对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token comment">//这里的window可写可不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  module<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="commonjs模块化"><a href="#commonjs模块化" class="headerlink" title="commonjs模块化"></a>commonjs模块化</h2><ul><li><p>tips:</p><ol><li>用户编写文件模块,相对路径必须加.&#x2F;,不能省略</li><li>node中没有全局作用域,只有模块作用域</li><li>外部访问不到内部,内部也访问不到内部</li></ol></li><li><p><code>require</code> 方法的两个作用:</p><ol><li>加载文件并且执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ol></li><li><p><code>exports</code>:</p><ol><li>在每个文件模块都提供一个对象:exports</li><li>exports默认是一个空对象</li><li>需要把所有需要被外部访问的成员变量挂载到exports上</li></ol></li><li><p>暴露方式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种暴露方式(暴露对象)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//第二种暴露方式(暴露函数)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//第三种暴露方式</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> module1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module3<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>module3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AMD-异步模块定义"><a href="#AMD-异步模块定义" class="headerlink" title="AMD(异步模块定义)"></a>AMD(异步模块定义)</h2><blockquote><ul><li>专门用于浏览器端,模块的加载是异步的</li><li>依赖于<code>Requirejs</code>,<span style="color:red">需要下载依赖</span></li></ul></blockquote><ul><li><p>语法:</p><ul><li>定义没有依赖的模块<ul><li><code>define(function()&#123;return 模块&#125;)</code></li></ul></li><li>定义有依赖模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"module1"</span><span class="token punctuation">,</span><span class="token string">"module2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 模块<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CMD-通用模块定义"><a href="#CMD-通用模块定义" class="headerlink" title="CMD(通用模块定义)"></a>CMD(通用模块定义)</h2><blockquote><ul><li>专门用于浏览器端,模块的加载是异步的</li><li>模块使用时才会加载</li><li>依赖于<code>Sea.js</code></li></ul></blockquote><ul><li><p>语法:</p><ul><li><p>定义没有依赖的模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span>xxx<span class="token operator">=</span>value  module<span class="token punctuation">.</span>exports<span class="token operator">=</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义有依赖模块</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//引入依赖模块(同步)</span>    <span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">//引入依赖模块(异步)</span>    require<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//m3是形参,注册成功注入回调函数函数</span>    <span class="token comment">//暴露模块</span>    exports<span class="token punctuation">.</span>xxx<span class="token operator">=</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ol><li>导出模块<code>export</code></li><li>导入模块<code>import</code></li></ol><h3 id="分别暴露"><a href="#分别暴露" class="headerlink" title="分别暴露"></a>分别暴露</h3><ul><li>暴露模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token string">"hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fo<span class="token punctuation">,</span>ba<span class="token punctuation">,</span>msg<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">ba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h3><ul><li>暴露模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>foo <span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>可以使用<code>*</code>整体加载到某个对象上</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> test <span class="token keyword">from</span> <span class="token string">"url"</span>test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h3><blockquote><p>可以暴露任意数据类型</p></blockquote><ul><li><p>注意:<span style="color:red">不能写多个<code>export default</code></span></p></li><li><p>暴露模块</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   msg<span class="token operator">:</span><span class="token string">"桃桃"</span><span class="token punctuation">,</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"桃桃"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> modules <span class="token keyword">from</span> <span class="token string">"./03默认暴露"</span>modules<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>modules<span class="token punctuation">.</span>msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h3><blockquote><p><code>require()</code>是动态加载,即异步加载,而import是静态执行,处于代码的最顶层</p><blockquote><p><code>import()</code>函数实现了异步加载,返回一个<code>promise</code>对象,加载获取的值为then的回调参数</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>foo <span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载动态模块(注意要开启server)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./myModule.js"</span><span class="token punctuation">)</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS的基本语法</title>
      <link href="/2021/09/13/ts-de-ji-ben-yu-fa/"/>
      <url>/2021/09/13/ts-de-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="运行编译TS"><a href="#运行编译TS" class="headerlink" title="运行编译TS"></a>运行编译TS</h2><ul><li><p>全局下载typescript,<code>npm i typescript -g</code></p><ul><li>编译ts-&gt;js,<code>tsc hello.ts</code></li><li>简化编译,全局下载ts-node,<code>npm i ts-node -g</code></li><li>编译ts文件,<code>ts-node hello.ts</code>,cjs,esm通用</li></ul></li><li><p>由<code>esbuild</code>提供支持的<code>TypeScript</code>可替代<code>ts-node</code>的编译工具</p><ul><li>全局下载<code>npm i esno -g</code></li><li>编译ts文件,<code>esno index.ts</code></li><li><code>esno-</code> CJS 模式下的命令</li><li><code>esmo-</code> ESM 模式下的命令</li></ul></li><li><p>问题:</p><ul><li>解决方案一: <code>Do you need to change your target library? Try changing the &#39;lib&#39; compiler option to include &#39;dom&#39;</code>:使用:<code>ts-node -T hello.ts</code></li><li>解决方案二: <code>npm install @types/node --save-dev</code></li></ul></li></ul><h2 id="debug调试工具"><a href="#debug调试工具" class="headerlink" title="debug调试工具"></a><a href="#debug%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7">debug调试工具</a></h2><ol><li>安装<code>typescript,ts-node</code>开发依赖,<code>npm i typescript ts-node -D</code></li><li>配置<code>launch.json</code>文件</li></ol><blockquote><p>参考:<a href="http://mail.zyjcould.ltd/2021/11/17/diao-shi/">http://mail.zyjcould.ltd/2021/11/17/diao-shi/</a></p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="注解类型"><a href="#注解类型" class="headerlink" title="注解类型"></a>注解类型</h3><ul><li>注解类型<code>string,number,boolean,any,unknown,undefined,null,never</code></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>tips:</p><ul><li>尽量不要使用<code>any</code>,它可以赋值给任意变量,尽量不要使用</li><li><code>unknow</code>是一个类型安全any</li><li><code>unknow</code>类型的变量,只会赋值给unknown和any类型,不会赋值给其他变量</li><li><span style="color:red">给变量赋值<code>null</code>和<code>undefined</code>不要使用类型推论</span></li><li><code>never</code>类型表示不存在的:<ul><li>例如:函数中是一个死循环或者抛出一个异常</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let d:any&#x3D;truelet s:string&#x3D;&quot;hh&quot;s&#x3D;d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="联合类型-let-x-string-number"><a href="#联合类型-let-x-string-number" class="headerlink" title="联合类型 :let x:string|number"></a>联合类型 :<code>let x:string|number</code></h4><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><ul><li><p>数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中</p></li><li><p>元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型</p></li><li><p>作为返回值使用:</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function useState&lt;T&gt;(state: T) &#123;let currentState &#x3D; stateconst changeState &#x3D; (newState: T) &#x3D;&gt; &#123;  currentState &#x3D; newState&#125;const info: [string, number] &#x3D; [&quot;abc&quot;, 18]const tuple: [T, (newState: T) &#x3D;&gt; void] &#x3D; [currentState, changeState]return tuple&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="TS类型推论-初始化变量且赋值时"><a href="#TS类型推论-初始化变量且赋值时" class="headerlink" title="TS类型推论:初始化变量且赋值时"></a>TS类型推论:初始化变量且赋值时</h4><ul><li><p><code>let age=18</code>:可以省略掉类型注解</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let ageage&#x3D;13  &#x2F;&#x2F;这是错误的,不会有类型推论function getsunm(a:number,b:number)&#123;return a+b&#x2F;&#x2F;可以省略类型注解,类型推论为number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="类型断言和非空类型断言"><a href="#类型断言和非空类型断言" class="headerlink" title="类型断言和非空类型断言"></a>类型断言和非空类型断言</h4><blockquote><p>类型断言语法:</p></blockquote><ul><li>变量 as 类型<ul><li>常量断言和默认类型参数:<strong>获得更精确和不可变的类型</strong></li><li>例如:<code>const 断言</code></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a &#x3D; &#123; prop: &quot;hello&quot; &#125;let b &#x3D; &#123; prop: &quot;hello&quot; &#125; as const<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>&lt;类型&gt; 变量</p></li><li><p>非空类型断言:<code>!</code></p><ul><li>传入的message有可能是为<code>undefined</code>的，这个时候是不能执行方法的</li><li>如果确定传入的参数一定是有值的,可以使用<code>!</code></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">elementLength</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">!</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let s:string | number&#x3D;&quot;hh&quot;let e&#x3D;&quot;ll&quot;s&#x3D;e as strings&#x3D;&lt;string&gt;elet img&#x3D;document.querySelector(&quot;#image&quot;) as HTMLImageElement&#x2F;&#x2F;使用console.dir()打印当前方法的dom值console.log(img)&#x2F;&#x2F;HTMLImageElement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型充补"><a href="#类型充补" class="headerlink" title="类型充补"></a>类型充补</h3><blockquote><p>ES6即以上中的一些规范</p></blockquote><h4 id="可选类型和可选链"><a href="#可选类型和可选链" class="headerlink" title="可选类型和可选链"></a>可选类型和可选链</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Person &#x3D; &#123;  name: string  friend?: &#123;    name: string    age?: number,    girlFriend?: &#123;      name: string    &#125;  &#125;&#125;const info: Person &#x3D; &#123;  name: &quot;why&quot;,  friend: &#123;    name: &quot;kobe&quot;,    girlFriend: &#123;      name: &quot;lily&quot;    &#125;  &#125;&#125;&#x2F;&#x2F;其它文件console.log(info.friend?.girlFriend?.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="和-的使用"><a href="#和-的使用" class="headerlink" title="??和!!的使用"></a>??和!!的使用</h4><ul><li><code>!!</code>操作符:<ul><li>将一个其他类型转换成boolean类型</li></ul></li><li><code>??</code>操作符:<ul><li>逻辑操作符</li><li><strong>当操作符的左侧是 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数</strong></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let message: string|null &#x3D; &quot;Hello World&quot;const flag &#x3D; !!messageconst content &#x3D; message ?? &quot;你好啊, 李银河&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类型别名和字面量类型"><a href="#类型别名和字面量类型" class="headerlink" title="类型别名和字面量类型"></a>类型别名和字面量类型</h4><blockquote><p>在类型注解中编写 <code>对象类型</code> 和 <code>联合类型</code>,想要多次在其他地方使用时,可以起别名<code>type</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PointType &#x3D; &#123;  x: string  y: number  z?: number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>字面量类型的意义, 就是必须结合联合类型</p></blockquote><ul><li>注意:字面量类型和值是必须相同的</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 字面量类型的意义, 就是必须结合联合类型type Alignment &#x3D; &#39;left&#39; | &#39;right&#39; | &#39;center&#39;let align: Alignment &#x3D; &#39;left&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>字面量推理</p></blockquote><pre class="line-numbers language-TS" data-language="TS"><code class="language-TS">type Method &#x3D; &#39;GET&#39; | &#39;POST&#39;function request(url: string, method: Method) &#123;&#125;type Request &#x3D; &#123;  url: string,  method: Method&#125;const options:Request  &#x3D; &#123;  url: &quot;https:&#x2F;&#x2F;www.coderwhy.org&#x2F;abc&quot;,  method: &quot;POST&quot;&#125; &#x2F;&#x2F;as const(这样也可以)request(options.url, options.method)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不给options添加类型别名的时候,options其实是一个<code>&#123;url: string, method: string&#125;</code></li></ul><blockquote><p>如果是导入类型而不是模块,需要标记为类型,处理单个文件的编译器无法知到导入的是值还是类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;错误import &#123;BaseType&#125; from &quot;.&#x2F;some-module.js&quot;&#x2F;&#x2F;正确import &#123; someFunc , type BaseType &#125; from &quot;.&#x2F;some-module.js&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a>类型缩小</h4><ul><li><code>typeof</code>的类型缩小<ul><li>typeof是一种类型保护:<code>TypeScript</code> 对如何<code>typeof</code>操作不同的值进行编码</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type IDType &#x3D; number | stringfunction printID(id: IDType) &#123;  if (typeof id &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;    console.log(id.toUpperCase())  &#125; else &#123;    console.log(id)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用Switch或者相等的一些运算符来表达相等性(比如&#x3D;&#x3D;&#x3D;, !&#x3D;&#x3D;)</p></li><li><p><code>intanceof</code>:检查一个值是否是另一个值的”实例”</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function printTime(time: string | Date) &#123;  if (time instanceof Date) &#123;    console.log(time.toUTCString())  &#125; else &#123;    console.log(time)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>in</strong></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Fish &#x3D; &#123;  swimming: () &#x3D;&gt; void&#125;type Dog &#x3D; &#123;  running: () &#x3D;&gt; void&#125;function walk(animal: Fish | Dog) &#123;  if (&#39;swimming&#39; in animal) &#123;    animal.swimming()  &#125; else &#123;    animal.running()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><ul><li><p>有返回值</p><ul><li><code>function name(num:number):number&#123;return 返回值&#125;</code></li></ul></li><li><p>默认没有返回值:void可以省略</p><ul><li><code>function name(num:number):void&#123;&#125;</code></li></ul></li><li><p>注解函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let ageSum:(a:number,b:number)&#x3D;&gt;numberlet ageSum&#x3D;function(a:number,b:number)&#123;  return a+b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>在定义形参的数据类型的同时可以传入一个默认值</p></blockquote><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><blockquote><p>剩余参数语法允许我们将一个不定数量的参数放到一个数组中</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum(initalNum: number, ...nums: number[]) &#123;  let total &#x3D; initalNum  for (const num of nums) &#123;    total +&#x3D; num  &#125;  return total&#125;console.log(sum(20, 30))&#x2F;&#x2F;30console.log(sum(20, 30, 40))&#x2F;&#x2F;70console.log(sum(20, 30, 40, 50))&#x2F;&#x2F;120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:剩余参数只能位于形参最后</li></ul><h4 id="匿名函数参数"><a href="#匿名函数参数" class="headerlink" title="匿名函数参数"></a>匿名函数参数</h4><blockquote><p>上下文中的函数可以不加类型注解</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const names &#x3D; [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;]names.forEach(function(item) &#123;  console.log(item.split(&quot;&quot;))&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TypeScript会根据forEach函数的类型以及数组的类型推断出item的类型</li><li>函数执行的上下文可以帮助确定参数和返回值的类型</li></ul><h4 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h4><ul><li>函数重载中,实现函数不能直接调用<ul><li><code>add(&#123;name: &quot;why&quot;&#125;, &#123;age: 18&#125;)</code></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(num1: number, num2: number): number; &#x2F;&#x2F; 没函数体function add(num1: string, num2: string): string;function add(num1: any, num2: any): any &#123;  if (typeof num1 &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; typeof num2 &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;    return num1.length + num2.length  &#125;  return num1 + num2&#125;const result &#x3D; add(20, 30)const result2 &#x3D; add(&quot;abc&quot;, &quot;cba&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:在开发中尽量使用联合类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;联合类型function getLength(args: string | any[]) &#123;  return args.length&#125;&#x2F;&#x2F;实现方式二: 函数的重载function getLength(args: string): number;function getLength(args: any[]): number;function getLength(args: any): number &#123;  return args.length&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数中不确定的this类型"><a href="#函数中不确定的this类型" class="headerlink" title="函数中不确定的this类型"></a>函数中不确定的this类型</h4><ul><li>参考:<a href="https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA">https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</a></li></ul><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><ul><li>定义一:<ul><li><code>let names:string[]=[&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;]</code></li></ul></li><li>定义二(不推荐,易与React中的jsp混淆):<ul><li><code>let names:Array&lt;string&gt;=[&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;]</code></li></ul></li><li>第义三(不推荐):<ul><li><code>let names:string[]=new Array(&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;)</code></li></ul></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>创建对象(和js一样)<code>let person=&#123;&#125;</code></li><li>对象的类型注解(对对象的一种约束)</li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2的生命周期,内置关系</title>
      <link href="/2021/09/09/vue-de-sheng-ming-zhou-qi-nei-zhi-guan-xi/"/>
      <url>/2021/09/09/vue-de-sheng-ming-zhou-qi-nei-zhi-guan-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h2><p><img src="./lifestyle.png" alt="vue生命周期"></p><ol><li><p><code>beforeCreate</code>:在实例初始化之后,数据观测和时间配置之前被调用,此时的组件选项还没有被创建,el和data未初始化</p></li><li><p><code>created</code>:实例已完成以下配置：数据观测、属性和方法的运算，watch&#x2F;event事件回调，完成了data 数据的初始化，el没有.然而，挂在阶段还没有开始, <code>$el</code>属性目前不可见.此时可以调用<code>methods</code>中的方法，改变<code>data</code>中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等</p></li></ol><blockquote><p><span style="color:red">注意:这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成</span></p></blockquote><ol start="3"><li><p><code>beforeMounted</code>挂载之前被调用,相关的<code>render</code>函数首次被调用(虚拟DOM),此时data里的数据和模板生成html,el和data初始化完成,但还没有挂载html到页面上</p></li><li><p><code>mounted</code>:挂载完成,将模板中的html渲染到页面,由于mounted只会执行一次,此时一般做些<span style="color:red">ajax,启动定时器,绑定自定义事件,订阅等操作</span></p></li><li><p><code>beforeUpdate</code>:在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程</p></li><li><p><code>updated</code>:数据更改会导致地虚拟DOM重新渲染和打补丁就会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p></li><li><p><code>beforeDestory</code>:清除定时器,解绑自定义事件,取消订阅等收尾工作,然而并不会在beforeDestroy操作数据,因为即使操作数据,也不会更新流程,只能用this读到数据</p></li><li><p><code>destroyed</code>:调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p></li></ol><h2 id="缓存组件的两个生命钩子activated和deactivated"><a href="#缓存组件的两个生命钩子activated和deactivated" class="headerlink" title="缓存组件的两个生命钩子activated和deactivated"></a>缓存组件的两个生命钩子<code>activated和deactivated</code></h2><ul><li>思考:当切换不同的组件时，有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。这时就可以用 &lt;keep-alive&gt;将其动态组件包裹起来.</li></ul><blockquote><p>&lt;keep-alive&gt;包裹的动态组件会被缓存，它是一个抽象组件，它自身不会渲染一个dom元素</p></blockquote><ul><li><strong>activated</strong>：在vue对象存活的情况下，进入当前存在activated()函数的页面时，一切到改页面就触发.</li></ul><blockquote><p><span style="color:red">有的时候我们的单页面在每次切换时需要重新请求数据</span>.由于单页面A切换时只在第一次调用<code>created,mounted</code>这些生命钩子,这时就需要使用activated.在切换到组件B，这时组件A的<code>deactivated</code>的生命周期函数会被触发；在切换回组件A，组件A的<code>activated</code>生命周期函数会被触发.</p></blockquote><ul><li><strong>deactivated</strong>:当离开组件A，切到组件B之前，需要对组件A做某些处理，比如清除定时器，这时就需要使用deactivated.</li></ul><h2 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h2><blockquote><p>对路由跳转前后进行一些验证</p></blockquote><table><thead><tr><th>值</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>beforeEach</td><td>全局</td><td>初始化的时候被调用,每次路由切换之前被调用</td></tr><tr><td>afterEach</td><td>全局</td><td>初始化的时候被调用,每次路由切换之后被调用</td></tr><tr><td>beforeRouteEnter</td><td>局部(组件内)</td><td>在路由进入时执行</td></tr><tr><td>beforeRouteUpdate</td><td>局部(组件内)</td><td>在路由更新时执行</td></tr><tr><td>beforeRouteLeave</td><td>局部(组件内)</td><td>在路由离开时执行</td></tr><tr><td>beforeEnter</td><td>局部(路由配置中)</td><td>加载到页面之前执行</td></tr></tbody></table><ul><li><strong>路由守卫参数</strong></li></ul><blockquote><ul><li><code>to :Router</code>：即将要进入的目标 路由对象</li><li><code>from :Router</code>: 当前导航正要离开的路由</li><li><code>next :Function</code>: 执行下一步。 需要注意的是一定要调用next，否则路由对应的组件不会进行渲染</li></ul></blockquote><ol><li><code>next()</code>: 进行下一个路由组件。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</li><li><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link 的 to prop 或 router.push</code> 中的选项。</li><li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给<code>router.onError()</code> 注册过的回调。</li></ol><ul><li><p><span style="color:red">注意:</span>局部的守卫，是在组件内部或路由配置的内部进行使用，而全局的路由守卫是在路由配置项中去使用的</p></li><li><p><code>beforeEach</code>:接收<code>to,from,next</code>.即路由拦截,用来做一些进入页面的限制.比如没有登录，就不能进入某些页面，只有登录了之后才有权限查看某些页面(初始化的时候被调用,每次路由切换之前被调用)</p></li><li><p><code>afterEach</code>:只接受<code>to,from</code>.也是路由拦截,不会接受 <code>next</code> 函数也不会改变导航本身.比如用来清除过期的<code>token</code>(初始化的时候被调用,每次路由切换之后被调用)</p></li><li><p><code>beforeRouteEnter</code>:接收<code>to,from,next</code>,验证用户登录,vip是否到期,权限验证,消息提示.</p><ul><li><span style="color:red">注意: 此时相对应的组件还没有进行渲染,所以无法使用<code>this</code></span></li><li>解决:默认不可以.想要fangwenthis的指向,可以在next这个函数中的参数获取.参数即是实例vm</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        vm<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> toPath<span class="token operator">:</span> to<span class="token punctuation">.</span>path <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>beforeRouteLeave</code>:接收<code>to,from,next</code>.用户支付,答题系统,记录历史记录,注销,切换账号.</p></li><li><p><code>beforeRouteUpdate</code>:接收<code>to,from,next</code>,在组件没有经历创建和销毁，但是路由发生改变的时候需要执行的生命周期.当页面组件没有发生改变，只是路由变化时，<code>created()</code>是不会再次执行，因为这个生命周期只有在组件创建的时候才会调用.</p></li><li><p><code>beforeEnter</code>:接收<code>to,from,next</code>,与全局路由配置一样</p></li></ul><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><blockquote><p>常用的两种加载方式:<strong>ES中的import</strong>和<strong>vue异步组件</strong></p></blockquote><ul><li><p>路由懒加载的原因</p><ul><li>官方解释:<ol><li>当打包构建应用时,js的包会非常大,影响页面加载</li><li>如果我们能把不同路由对应的组件分割成不同的代码块.然后当路由被访问的时候才加载对应组件,这样就更加高效</li></ol></li><li>官方的意思<ol><li>首先路由中会定义很多不同的页面</li><li>这个页面打包会在一个js文件中</li><li>然而这就造成页面非常的法,当我们一次性从服务器请求下来这个页面可能需要花费一定的事件,甚至用户的电脑还出现白屏</li></ol></li><li>路由的懒加载:<ol><li>路由的懒加载主要就是将路由对应的组件打包成一个个js代码块</li><li>只有在路由被访问到的时候,才加载对应组件</li></ol></li></ul></li><li><p><strong>未使用路由懒加载</strong></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../components/Home"</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"../components/About"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      component<span class="token operator">:</span>Home   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      component<span class="token operator">:</span>About   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用ES懒加载</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Home"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/About"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用vue异步组件懒加载</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"../components/Home"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"../components/About"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue中重要的内置关系"><a href="#vue中重要的内置关系" class="headerlink" title="vue中重要的内置关系"></a>vue中重要的内置关系</h2><p><img src="./vue%E7%BB%84%E4%BB%B6%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB.png" alt="vue生命周期"></p><blockquote><ol><li>一个重要的内置关系:<code>VueComponent.prototype.__proto__===Vue.prototype</code></li><li>为什么要有这个关系:让<span style="color:red">组件实例对象(vc)可以访问到Vue中的原型上的属性,方法</span></li></ol></blockquote><ul><li>关于VueComponent:<ol><li><code>element</code>组件本质是一个名为<code>VueComponent</code>的构造函数,且不是程序员定义的,是Vue.extend生成的</li><li>只需要写&lt;element&gt;</element>或者</element>,Vue解析时就会帮助我们创建<code>element</code>组件的实例对象,即Vue帮我们执行的:<code>new VueComponent(options)</code></li><li>特别注意:每次调用Vue.extend,返回的都是一个全新的VueComponent!!!</li><li>关于this的指向:<ol><li>组件配置中:<br>data函数,methods中的函数,computed中的函数  他们的this指向均是[VueComponent实例对象]</li><li>new Vue()配置中<br>ata函数,methods中的函数,computed中的函数  他们的this指向均是[Vue实例对象]</li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的DOM属性</title>
      <link href="/2021/09/05/js-zhong-de-dom-shu-xing/"/>
      <url>/2021/09/05/js-zhong-de-dom-shu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="用DOM属性操控文档"><a href="#用DOM属性操控文档" class="headerlink" title="用DOM属性操控文档"></a>用DOM属性操控文档</h2><h3 id="什么是DOM属性"><a href="#什么是DOM属性" class="headerlink" title="什么是DOM属性"></a>什么是DOM属性</h3><blockquote><p>浏览器为我们提供的文档节点对象,这个对象是window属性.可以在页面中直接使用.文档节点代表的是整个网页</p></blockquote><h3 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h3><blockquote><ul><li>浏览器在加载一个页面是是按照自上而下的顺序加载的,读取到一行就运行一行,如果将script标签写到页面上面、在代码执行时,页面还没有加载,页面没有加载DOM对象也没有加载,会导致无法获取到DOM对象</li><li>onload事件会在整个页面加载完成之后才触发:为window绑定一个onload事件,该事件对应的响应函数会在页面加载之后执行.这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了</li></ul></blockquote><h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><ul><li>方法</li></ul><ol><li><code>getElementById(id)</code>,通过id属性来获取一组元素</li><li><code>getElementsByTagName(tag)</code>,通过标签来获取一组元素,此方法会给我们返回一组类数组对象,所有查询到的元素都会封装到对象中.(即使只有一个,也会封装到数组中).</li><li><code>getElementsByName(name)</code>,查找name&#x3D;name的所有节点,返回一个数组</li><li><code>getElementsByClassName(class)</code>:可以根据class属性值获取一组元素节点对象</li><li><code>querySelector()</code>:需要一个选择器的字符串作为参数,可以根据一个CSS选择器来查询一个元素节点对象<ul><li>注意:使用该方法总会返回唯一的一个元素,如果满足条件的有多个,那么它只会返回第一个</li></ul></li><li><code>querySelectorAll()</code>:该方法和querySelector()用法类似,不同的是它会将符合条件的元素封装<ul><li>-即使符合条件的元素只有一个,他也会返回数组</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box1 div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内容:   div标签中的内容</span><span class="token keyword">var</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &lt;div> 内容&lt;/div>:标签以及内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性:此属性都是通过<span style="color:red">元素.属性</span>的方式访问到</li></ul><ol><li><p><code>innerHTML&amp;innerText</code>(自结束标签无意义)</p><ul><li><code>innerHTML</code>可以获取当前元素的内容以及标签</li><li><code>innerText</code>只能获取当前元素的内容,自动去除标签</li></ul></li><li><p><code>children</code>属性可以获取当前元素的所有子元素,返回一个数组.通过索引可以获取子元素的属性</p></li><li><p><code>className</code>,语法<code>HTMLElement.className</code>,id,value,name等属性直接访问即可</p></li><li><p><code>firstChild&amp;lastChild</code>,获取到当前元素的第一个&#x2F;最后一个子节点,可以获取到一个空白文本.(#text)</p></li><li><p><code>firstElementsChild</code>获取当前元素的第一个元素</p></li><li><p><code>parentNode</code>,获取到当前元素的父元素</p></li><li><p><code>previousSibling</code>,获取前一个兄弟节点[也可能获取空白的文本](object Text)</p></li><li><p><code>previousElementSibling</code>,获取前一个兄弟元素[object HTMLLIElement]</p></li><li><p><code>documentElement</code>:保存的是html跟标签</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> html<span class="token operator">=</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所有标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token parameter">idStr<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//为id为btn01的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>idStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//为id为btn01的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//含有tag标签</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn02<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查找所有的li节点</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn03的按钮绑定一个单机相应函数</span>    <span class="token keyword">var</span> btn03 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn03<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查找name=gender的所有节点</span>        <span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回class的名称</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn04的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn04 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn04<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为city的元素</span>        <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取#city下所有的li节点</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn05的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn05 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn05<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为city的节点</span>        <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> cns <span class="token operator">=</span>city<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>        <span class="token keyword">var</span> cns2 <span class="token operator">=</span> city<span class="token punctuation">.</span>children<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cns2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn06的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn06 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn06"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn06<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> iphone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iphone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fir <span class="token operator">=</span> iphone<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span><span class="token comment">//HTMLText</span>        fir <span class="token operator">=</span> iphone<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn07的按钮绑定一个单机响应的函数</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为bj的节点</span>        <span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回#bj的的父节点</span>        <span class="token keyword">var</span> pn <span class="token operator">=</span> bj<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pn<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn08的按钮绑定一个单机响应的函数</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn08"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为android</span>        <span class="token keyword">var</span> and <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回#android的前一个兄弟节点(也可能获取空白的文本)</span>        <span class="token keyword">var</span> ps <span class="token operator">=</span> and<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>        <span class="token comment">//previousElementSibling获取前一个兄弟元素,IE8及以下不支持</span>        <span class="token keyword">var</span> pe <span class="token operator">=</span> and<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Text]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object HTMLLIElement]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取#username的value属性值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn09"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为username的元素</span>        <span class="token keyword">var</span> um <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取um的value</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcde</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置#username的value属性值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn10"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为username的元素</span>        <span class="token keyword">var</span> um <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置um的value</span>        um<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"今天天气好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回#bj的文本值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn11"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为bj的元素</span>      <span class="token keyword">var</span> bj <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> fc<span class="token operator">=</span>bj<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                你喜欢哪个城市            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>beijing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>dongjing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>shouer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                你手机的操作系统是            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iphone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ios<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>IOS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Android<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>windows phone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            gender:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello <span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            Male            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            female            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            name:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abcde<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找所有的li节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找name=gender的所有节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找#city下所有li节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#city的所有子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn06<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#phone的第一个子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn07<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#bj的fujiedian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn08<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#android的前一个兄弟节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn09<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#username的value属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置#username的value属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#bj的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dom增删改"><a href="#dom增删改" class="headerlink" title="dom增删改"></a>dom增删改</h3><ul><li><p>方法:</p><ol><li><code>createElement()</code>:可以用于创建一个元素节点对象,他需要一个标签名作为参数,将会根据该标签名创建元素节点对象,并将创建好的对象作为返回值返回</li><li><code>createTextNode()</code>:可以用来创建一个文本节点对象,需要一个文本内容作为参数,将会根据改内容创建文本节点,并将新的文本节点返回</li><li><code>appendChild()</code>:向一个父节点中添加一个新的子节点<ul><li>用法：父节点.appendChild(子节点)</li></ul></li><li><code>insertBefore()</code>:可以再指定的子节点前插入新的子节点<ul><li>语法:父节点.insertBefore(新节点,旧节点);</li></ul></li><li><code>replaceChild()</code>:可以使用指定的子节点替换已有的子节点<ul><li>语法：replaceChild(新节点,旧节点);</li></ul></li><li><code>removeChild()</code>:可以删除一个子节点<ul><li>语法：父节点.removeChild(子节点);</li><li>语法:子节点.parentNode.removeChild(子节点);</li></ul></li><li><code>setAttribute()</code>:设置指定元素上的某个属性值.如果属性已经存在,则更新该值;否则,使用指定的名称和值添加一个新的属性<ul><li>语法:<code>setAttribute(&#39;href&#39;, URL.createObjectURL(blob))</code></li></ul></li><li><code>getAttribute()</code>:要获取某个属性当前的值<ul><li><code>element.getAttribute(attributeName)</code></li></ul></li><li><code>removeAttribute()</code>:要删除某个属性<ul><li><code>element.removeAttribute(attrName)</code></li></ul></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个“广州”节点,添加到#city下</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将“广州”节点插入到#bj前面</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创建一个广州</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用“广州”节点替换#bj节点</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn03"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创建一个广州</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取id为bj的节点</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取city</span>      <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除#bj节点</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn04"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bj<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取#city内的HTML代码</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn05"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>city<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置#bj内的HTML</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn06"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取bj</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"昌平"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向city中添加广州</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> city<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*       使用innerHTML也可以完成DOM的增删改的相关操作      一般我们会两种方式结合使用      */</span>      <span class="token comment">//city.innerHTML +="&lt;li>广州&lt;/li>";</span>      <span class="token comment">//创建一个li</span>      <span class="token keyword">let</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//向li中设置文本</span>      li<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"广州"</span><span class="token punctuation">;</span>      <span class="token comment">//将li添加到city</span>      city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token parameter">idStr<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>idStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>              你喜欢哪个城市          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>东京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>首尔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建一个"广州"节点,添加到#city<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>将“广州”节点插入到#bj前面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用“广州”节点替换#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>读取#city内的HTML代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn06<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置#bj内的HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn07<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建一个"广州"节点,添加到#city<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h3><ul><li><p>语法：<code>元素.style.样式名=样式值</code></p></li><li><p><span style="color:red">注意:</span></p><ol><li>如果css的样式中含有<code>-</code>,</li><li>这种名称再JS中是不合法的：比如<code>background-color</code></li><li>需要将这种样式修改为驼峰命名法:去掉-,然后将-后的字母大写</li><li><span style="color:red">通过stytle属性设置的样式都是内联式:而内联式样式有较高的优先级,所以通过JS修改的样式往往会立即显示</span></li><li>如果样式中写了<code>!important</code>,则此时样式会有最高的优先级,即使通过JS也不能覆盖改样式,此时会导致JS修改样式失效,所以尽量不要为样式添加<code>!important</code></li></ol></li><li><p><code>getComputedStyle()</code>:这个方法来获取元素当前的样式,这个方法是window的方法,可以直接使用</p></li><li><p>需要两个参数：</p><ol><li>第一个：要获取样式的元素</li><li>第二个：可以传递一个伪元素,一般传null</li></ol></li><li><p>返回值:该方法会返回一个对象,对象封装了当前元素对应的样式</p><ol><li>可以通过对象.样式名来读取样式</li><li>如果获取的样式没有设置,则会获取到真实的值,而不是默认值</li><li>比如：没有设置width,则不会获取到auto,而是一个长度</li></ol></li></ul><p>注意:<span style="color:red"> 通过<code>getComputedStyle()</code>读取到的样式是只读的,不能修改,如果要修改,必须通过style属性</span></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点机按钮以后读取box1的样式</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>clientWidth &amp; clientHeight</code>:这两个元属性可以获取元素的可见高度和宽度<br><span style="color:red">属性:</span><ol><li>这些属性都是不带px的,返回的都是一个数字,可以直接进行计算</li><li>会获取元素的宽度和高度包括内容区和内边距</li><li>这些属性都是只读的,不能修改</li></ol></li><li><code>offsetWidth &amp; offsetHeight</code>:-获取元素的整个宽度和高度,包括内容区、内边距和边框</li><li><code>offsetParent</code>-可以用来获取当前元素的定位父元素<ul><li>注意:<ol><li>会获取到离当前元素最近的开启了定位的祖先元素</li><li>如果所有的祖先元素都没有开启定位,则返回body</li></ol></li></ul></li><li><code>offsetLeft</code>: -当前元素相对于其定位父元素的水平偏移量</li><li><code>offsetTop</code>: 当前元素相对于其定位父元素的垂直偏移量</li><li><code>scrollWidth &amp; scorllHeight</code>-可以获取元素整个滚动区域的宽度和高度</li><li><code>scrollLeft &amp; scrollTop</code>-可以获取水平和垂直滚动条滚动的距离<ul><li>注意:当满足<code>scrollHeight -scrollTop==clientHeight</code>说明滚动条滚动到底了</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 如果为表单绑定disabled="disabled"为不可用状态 */</span>  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> .625rem solid yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box4</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box5</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 550px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box4<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box4"</span><span class="token punctuation">)</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> op <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//300px</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//600px</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//283</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//600</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token operator">-</span>box4<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的数组</title>
      <link href="/2021/09/04/js-de-shu-zu-ying-yong/"/>
      <url>/2021/09/04/js-de-shu-zu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="数组原型上的方法"><a href="#数组原型上的方法" class="headerlink" title="数组原型上的方法"></a>数组原型上的方法</h2><h3 id="join-原数组不变"><a href="#join-原数组不变" class="headerlink" title="join():  原数组不变"></a>join():  <span style="color:red">原数组不变</span></h3><blockquote><p>join(separator): 将数组的元素组起一个字符串.以separator为分隔符.省略的话则用默认用逗号为分隔符.<span style="color:red">该方法只接收一个参数：即分隔符.</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//1-2-3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过join()方法可以实现重复字符串.只需传入字符串以及重复的次数.就能返回重复后的字符串.函数如下：</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">repeatString</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeatString</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"abcabcabc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-和pop-改变原数组"><a href="#push-和pop-改变原数组" class="headerlink" title="push()和pop(): 改变原数组"></a>push()和pop(): <span style="color:red">改变原数组</span></h3><ol><li>push(): 可以接收任意数量的参数.把它们逐个添加到数组末尾.<span style="color:red">并返回修改后数组的长度.</span></li><li>pop()：数组末尾移除最后一项.减少数组的 length 值.然后返回移除的项.</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">let</span> count<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5)["a","b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//5</span><span class="token keyword">let</span> item<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(4)["a","b","c","d"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment">//e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：pop（）里面没有参数.即时有参数.也是删除最后一项.</p><h3 id="shift-和-unshift-改变原数组"><a href="#shift-和-unshift-改变原数组" class="headerlink" title="shift() 和 unshift(): 改变原数组"></a>shift() 和 unshift(): <span style="color:red">改变原数组</span></h3><ol><li>shift()：删除原数组第一项.并返回删除元素的值；如果数组为空则返回undefined .</li><li>unshift:将参数添加到原数组开头.并返回数组的长度 .</li></ol><blockquote><p>这组方法和上面的push()和pop()方法正好对应.一个是操作数组的开头.一个是操作数组的结尾.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> count<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5)["a","b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//5</span><span class="token keyword">let</span> item<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(4)["b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment">//a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort-改变原数组"><a href="#sort-改变原数组" class="headerlink" title="sort(): 改变原数组"></a>sort(): <span style="color:red">改变原数组</span></h3><ul><li>sort()：按升序排列数组项——即最小的值位于最前面.最大的值排在最后面.</li></ul><blockquote><p>在排序时.sort()方法会调用每个数组项的 toString()转型方法.然后比较得到的字符串.以确定如何排序.即使数组中的每一项都是数值. sort()方法比较的也是字符串.因此会出现以下的这种情况：</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[13,24,3,51]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[13,24,3,51](原数组改变)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>为了解决上述问题.sort()方法可以接收一个比较函数作为参数.以便我们指定哪个值位于哪个值的前面.</p></blockquote><ol><li>比较函数接收两个参数.如果第一个参数应该位于第二个之前则返回一个负数.</li><li>如果两个参数相等则返回 0.</li><li>如果第一个参数应该位于第二个之后则返回一个正数.以下就是一个简单的比较函数：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span>value2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value1<span class="token operator">-</span>value2<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//(5)[3,10,13,54,87]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse-改变原数组"><a href="#reverse-改变原数组" class="headerlink" title="reverse()改变原数组"></a>reverse()<span style="color:red">改变原数组</span></h3><ul><li>reverse()：反转数组项的顺序.</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//(5) [87,10,3,54,13]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5) [87,10,3,54,13]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat-不改变原数组"><a href="#concat-不改变原数组" class="headerlink" title="concat()不改变原数组"></a>concat()<span style="color:red">不改变原数组</span></h3><blockquote><p>concat() ：将参数添加到原数组中.这个方法会先创建当前数组一个副本.然后将接收到的参数添加到这个副本的末尾.最后返回新构建的数组.在没有给 concat()方法传递参数的情况下.它只是复制当前数组并返回副本.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,11,13]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7](原数组未被修改)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>从上面测试结果可以发现：传入的不是数组.则直接把参数添加到数组后面.如果传入的是数组.则将数组中的各个项添加到数组中.但是如果传入的是一个二维数组呢？</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrCopy<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,Array[2]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//[11,13]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述代码中.arrCopy2数组的第五项是一个包含两项的数组.也就是说concat方法只能将传入数组中的每一项添加到数组中.如果传入数组中有些项是数组.那么也会把这一数组项当作一项添加到arrCopy中</p></blockquote><h3 id="slice-不改变原数组"><a href="#slice-不改变原数组" class="headerlink" title="slice() 不改变原数组"></a>slice() <span style="color:red">不改变原数组</span></h3><ul><li>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组.</li></ul><blockquote><p>slice()方法可以接受一或两个参数.<span style="color:red">即要返回项的起始和结束位置.</sapn></p></blockquote><ol><li>在只有一个参数的情况下. slice()方法返回从该参数指定位置开始到当前数组末尾的所有项.</li><li>如果有两个参数.该方法返回起始和结束位置之间的项——但不包括结束位置的项.</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrCopy<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy3<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy4<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">)</span><span class="token comment">//[3,5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy2<span class="token punctuation">)</span><span class="token comment">//[3,5,7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy3<span class="token punctuation">)</span><span class="token comment">//[3,5,7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy4<span class="token punctuation">)</span><span class="token comment">//[5,7,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>arrCopy只设置了一个参数.也就是起始下标为1.所以返回的数组为下标1（包括下标1）开始到数组最后.</li><li>arrCopy2设置了两个参数.返回起始下标（包括1）开始到终止下标（不包括4）的子数组.</li><li>arrCopy3设置了两个参数.终止下标为负数.当出现负数时.将负数加上数组长度的值（6）来替换该位置的数.因此就是从1开始到4（不包括）的子数组.</li><li>arrCopy4中两个参数都是负数.所以都加上数组长度6转换成正数.因此相当于slice(2,5).</li></ol><h3 id="splice-改变原数组"><a href="#splice-改变原数组" class="headerlink" title="splice()改变原数组"></a>splice()<span style="color:red">改变原数组</span></h3><blockquote><p>splice()：很强大的数组方法.它有很多种用法.可以实现删除、插入和替换.</p></blockquote><ol><li><p>删除：可以删除任意数量的项.只需指定 2 个参数：要删除的第一项的位置和要删除的项数.例如. splice(0,2)会删除数组中的前两项.</p></li><li><p>插入：可以向指定位置插入任意数量的项.只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项.例如.splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6.</p></li><li><p>替换：可以向指定位置插入任意数量的项.且同时删除任意数量的项.只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项.插入的项数不必与删除的项数相等.例如.splice (2,1,4,6)会删除当前数组位置 2 的项.然后再从位置 2 开始插入4和6.</p></li></ol><blockquote><p>splice()方法始终都会返回一个数组.该数组中包含从原始数组中删除的项.如果没有删除任何项.则返回一个空数组.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrRemove<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove<span class="token punctuation">)</span><span class="token comment">//[1,3]</span><span class="token keyword">let</span> arrRemove2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,7,4,6,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove2<span class="token punctuation">)</span><span class="token comment">//[]</span><span class="token keyword">let</span> arrRemove3<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,2,4,4,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove3<span class="token punctuation">)</span><span class="token comment">//[7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="indexOf-和lastIndexOf"><a href="#indexOf-和lastIndexOf" class="headerlink" title="indexOf()和lastIndexOf()"></a>indexOf()和lastIndexOf()</h3><ol><li>indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引.其中. 从数组的开头（位置 0）开始向后查找.</li><li>lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引.其中. 从数组的末尾开始向前查找.</li></ol><blockquote><p>这两个方法都返回要查找的项在数组中的位置.或者在没找到的情况下返回-1.在比较第一个参数与数组中的每一项时.会使用全等操作符.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><blockquote><p>用于判断一个数组是否包含一个指定的值</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>searchElement</code></td><td>必须.需要查找的元素值.</td></tr><tr><td><code>fromIndex</code></td><td>可选.从该索引处开始查找,如果为负值,则按升序从 <code>array.length + fromIndex</code> 的索引开始搜索.默认为 0</td></tr></tbody></table><ul><li>注意:<code>fromIndex</code>如果大于大于或等于数组长度,则改数组不会被搜索</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="fill-改变原数组"><a href="#fill-改变原数组" class="headerlink" title="fill()(改变原数组)"></a>fill()(改变原数组)</h3><blockquote><p>将数组用其他元素填充或者替换</p></blockquote><ol><li><code>value</code>:填充的值</li><li><code>start</code>?:开始填充的位置</li><li><code>end</code>?:结束填充的位置</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">//如果end越界,会按照最后一个值计算</span><span class="token comment">//如果start为负数:start+数组的索引>0,则会按照此时的索引位置计算</span><span class="token comment">//如果start+数组的索引&lt;=0,则会按照=0计算</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1,2,0,0,0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h3><blockquote><p>接收一个整数值,并返回该索引的项目,允许正数以及负数</p></blockquote><ul><li>如果是负数,则从数组尾部开始</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//1</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组的迭代方法"><a href="#数组的迭代方法" class="headerlink" title="数组的迭代方法"></a>数组的迭代方法</h3><blockquote><p>ECMAScript为数组定义了五个迭代方法.每个方法都接收两个参数：要在每一项上面运行的函数和运行该函数的作用域——影响this的值.传入这些方法的函数会接收三个参数（数组项的值.索引.数组本身）</p></blockquote><h4 id="forEach-不改变原数组"><a href="#forEach-不改变原数组" class="headerlink" title="forEach()(不改变原数组)"></a>forEach()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>对数组的每一项运行给定函数.该方法没有返回值</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>item<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>arry<span class="token punctuation">)</span>   <span class="token comment">/*    0-1-1,2,3,4,5   1-2-1,2,3,4,5   2-3-1,2,3,4,5   3-4-1,2,3,4,5   4-5-1,2,3,4,5    */</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="some-不改变原数组"><a href="#some-不改变原数组" class="headerlink" title="some()(不改变原数组)"></a>some()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>对数组中的每一项运行给定函数.如果该函数对任一项返回true.则返回true</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> b<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//true</span><span class="token keyword">let</span> c<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="every-不改变原数组"><a href="#every-不改变原数组" class="headerlink" title="every()(不改变原数组)"></a>every()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>对数组中的每一项运行都给定函数.如果该函数对每一项都返回true.则返回true</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> b<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="filter-不改变原数组"><a href="#filter-不改变原数组" class="headerlink" title="filter()(不改变原数组)"></a>filter()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>对数组的每一项运行给定函数.返回该函数会返回true的项组成的数组</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> a<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//[4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">注意:</span>对新数组变化不会影响原数组的改变</li></ul><h4 id="map-不改变原数组"><a href="#map-不改变原数组" class="headerlink" title="map()(不改变原数组)"></a>map()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>对数组的每一项运行给定函数.返回每次函数调用结果所组成的数组</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> a<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//[3,6,9,12,15]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="find-不改变原数组"><a href="#find-不改变原数组" class="headerlink" title="find()(不改变原数组)"></a>find()(<span style="color:red">不改变原数组</span>)</h4><blockquote><p>返回符合测试条件的第一个数组元素的值.如果没有符合条件的则返回undefined</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">let</span> value <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>补充<ul><li><code>findIndex()</code>:与find()方法相同,只是返回的是符合条件的索引</li></ul></li></ul><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><blockquote><p>ES5新增了两个归并数组的方法：reduce（）和 reduceRight().这两个方法都会迭代数组所有的项.然后构建一个最终的值返回.</p></blockquote><ul><li>使用:这两个方法都接收两个参数：一个在每一项上面调用的函数和（可选）作为归并基础的初始值.</li></ul><blockquote><ul><li>给reduce和reduceRight这两个方法的函数都接收四个参数值：前一个值.当前值.索引.数组对象.</li><li>这个函数返回的任何值都会作为第一个参数自动传给下一项.第一次迭代发生在数组的第二项上.因此第一个参数是数组的第一项.第二个参数是数组的第二项.</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> sum<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pre<span class="token operator">+</span>cur<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//0是初始值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第0次回调的时候.pre为0,cur为1,第一次执行回调函数的时候.pre为1.cur为2.第二次.pre为3（1加2的结果）.cur为3（数组的第三项）.依次类推.直到将数组的每一项都访问一遍.最后返回结果.</p><ul><li><span style="color:red">注意:</span>reduceRight（）与reduce（）使用一样.只不过是从后往前遍历.</li></ul><h2 id="数组扁平化-flat-不改变原数组"><a href="#数组扁平化-flat-不改变原数组" class="headerlink" title="数组扁平化(flat)(不改变原数组)"></a>数组扁平化(flat)(不改变原数组)</h2><ul><li><code>flat()</code>:默认参数为1<ul><li>可选参数一:整数(拉平几层嵌套)</li><li>可选参数二:<code>Infinity</code>(任意拉平几层嵌套)</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Object对象语法-不改变原数组"><a href="#Object对象语法-不改变原数组" class="headerlink" title="Object对象语法(不改变原数组)"></a>Object对象语法(不改变原数组)</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote><p>返回一个由一个给定对象的自身可枚举属性(<code>key</code>)组成的数组，数组中属性名的排列顺序和使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致</p></blockquote><ul><li>注意:如果没有key值(数组)则返回索引</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"cd"</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["a","b","c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Object-value"><a href="#Object-value" class="headerlink" title="Object.value"></a>Object.value</h3><blockquote><p><code>Object.values()</code> 方法会返回一个由一个给定对象的自身可枚举属性(<code>value</code>)组成的数组，数组中属性值的排列顺序和使用<code>for...of</code>循环遍历该对象时返回的顺序一致</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"cd"</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["cd",false,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的一些小问题</title>
      <link href="/2021/08/26/git-tui-song-de-wen-ti/"/>
      <url>/2021/08/26/git-tui-song-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="关于ssh连接超时的问题"><a href="#关于ssh连接超时的问题" class="headerlink" title="关于ssh连接超时的问题"></a>关于ssh连接超时的问题</h2><ol><li>错误提示:ssh: connect to host github.com port 22: Connection timed out</li></ol><ul><li><p>ISP的问题,至于问什么,我也不知道.</p></li><li><p><span style="color:red">解决方案:将WiFi换成手机热点</span></p></li></ul><h2 id="关于hexo推送github仓库的问题"><a href="#关于hexo推送github仓库的问题" class="headerlink" title="关于hexo推送github仓库的问题"></a>关于hexo推送github仓库的问题</h2><ul><li><p>repo: <a href="https://github.com/Jack-Zhang-1314/Jack-Zhang-1314.github.io.git">https://github.com/Jack-Zhang-1314/Jack-Zhang-1314.github.io.git</a></p><ol><li>连接的地址如果写成https的形式,可能会不出现token凭证连接不上</li><li>放域名的文件名为<code>CHAME</code></li></ol></li><li><p><span style="color:red">解决方案:</span></p><ul><li>将连接方案改成ssh连接:<ul><li>repository: <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:Jack-Zhang-1314&#x2F;Jack-Zhang-1314.github.io.git</li><li>放域名的文件名为<code>CNAME</code></li></ul></li></ul></li></ul><h2 id="git推送时出现的问题"><a href="#git推送时出现的问题" class="headerlink" title="git推送时出现的问题"></a>git推送时出现的问题</h2><blockquote><p>大多数是由于代理端口号产生的问题</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fatal: unable to access <span class="token string">'https://github.com/Jack-Zhang-1314/demo.git/'</span><span class="token builtin class-name">:</span> OpenSSL SSL_connect: Connection was reset <span class="token keyword">in</span> connection to github.com:443<span class="token builtin class-name">exit</span> status <span class="token number">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>找到自己的端口号，然后进行git全局代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token number">127.0</span>.0.1:7890<span class="token function">git</span> config --global https.proxy <span class="token number">127.0</span>.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果想取消配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset https.proxy <span class="token function">git</span> config --global --unset https.proxy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看git配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token comment">#查看git的http代理配置</span><span class="token function">git</span> config --global https.proxy <span class="token comment">#查看git的https代理配置</span><span class="token function">git</span> config --global -l <span class="token comment">#查看git的所有配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose的使用</title>
      <link href="/2021/08/25/mongoose-de-shi-yong/"/>
      <url>/2021/08/25/mongoose-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Mongoose库简而言之就是在node环境中操作MongoDB数据库的一种便捷的封装，一种对象模型工具，类似ORM，Mongoose将数据库中的数据转换为JavaScript对象以供你在应用中使用</p></blockquote><ol><li>下载安装 <code>Mongoosenpm i mongoose --save</code></li><li>在项目中引入mongoose <code>const mongoose = require(&#39;mongoose&#39;);</code></li><li>连接MongoDB数据库 <code>mongoose.connect(&#39;mongodb://localhost:27017/数据库名&#39;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;);</code></li><li>断开数据库的连接(一般不需要) <code>mongoose.disconnect()</code></li><li>监听MongoDB数据库的连接状态</li></ol><ul><li>在mongoose对象里,有一个属性叫做connection,该对象表示的就是数据库的连接<ul><li>通过监听该对象的状态,可以来监听数据库的连接与断开<ul><li>数据库连接成功的事件:<code>mongoose.connction.once(&quot;open&quot;,function()())</code></li><li>数据库连接失败的事件:<code>mongoose.connection.once(&quot;close&quot;,function()())</code></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例:</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/mongoose_test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定监听</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'connection error:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断开数据库连接</span>mongoose<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Schema-Model-Document"><a href="#Schema-Model-Document" class="headerlink" title="Schema,Model,Document"></a>Schema,Model,Document</h2><h3 id="Schema的类型"><a href="#Schema的类型" class="headerlink" title="Schema的类型"></a>Schema的类型</h3><ul><li>String      字符串</li><li>Number      数字</li><li>Date        日期</li><li>Buffer      二进制</li><li>Boolean     布尔值</li><li>Mixed       混合类型</li><li>ObjectId    对象ID</li><li>Array       数组</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mongoose<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/mongoose_test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定监听</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'connection error:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Schema(模式)对象</span><span class="token comment">//将mongoose.Schema赋值给一个变量</span><span class="token keyword">const</span> Schema<span class="token operator">=</span>mongoose<span class="token punctuation">.</span>Schema<span class="token keyword">const</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     name<span class="token operator">:</span>String<span class="token punctuation">,</span>     age<span class="token operator">:</span>Number<span class="token punctuation">,</span>     gender<span class="token operator">:</span><span class="token punctuation">&#123;</span>         type<span class="token operator">:</span>String<span class="token punctuation">,</span>         <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">"female"</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    address<span class="token operator">:</span>String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//通过Schema来创建Model</span><span class="token comment">//Model代表的是数据库中的集合,通过Model才能对数据库进行操作</span><span class="token comment">//mongoose.model(modelName,schema)</span><span class="token comment">//modelName就是要映射的集合名  mongoose会自动将单数集合名变成复数</span><span class="token keyword">const</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Blog'</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Model类型"><a href="#Model类型" class="headerlink" title="Model类型"></a>Model类型</h3><ol><li>通过Schema来创建Model</li><li>Model代表的是数据库中的集合,通过Model才能对数据库进行操作</li><li>mongoose.model(modelName,schema)</li><li>modelName就是要映射的集合名  mongoose会自动将单数集合名变成复数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//...省略连接数据库,Schema创建</span><span class="token keyword">const</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Blog'</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Model类型增删查改数据库"><a href="#Model类型增删查改数据库" class="headerlink" title="Model类型增删查改数据库"></a>Model类型增删查改数据库</h3><ol><li>Model.create(doc(s),[callback])</li></ol><ul><li>用来创建一个或多个文档并添加到数据库中</li></ul><blockquote><ul><li>参数:<br>  doc(s)   可以是一个文档对象,也可以是一个文档对象的数组<br>  callback 当操作完成以后调用的回调数组</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//向数据库中插入一个文档</span><span class="token comment">//Blog.creat(e)(doc,function(err)&#123;&#125;)</span>Blog<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>    address<span class="token operator">:</span><span class="token string">"花果山"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>        address<span class="token operator">:</span><span class="token string">"高老庄"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>        address<span class="token operator">:</span><span class="token string">"大唐"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token operator">+</span>arguments<span class="token punctuation">)</span><span class="token comment">//插入的数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查询:</li></ol><ul><li><p><code>Model.find(conditions,[projection],[options],[callback])</code></p><ul><li>–查询所有符合条件的文档  返回的是一个数组</li></ul></li><li><p><code>Model.findById(id,[projection],[options],[callback])</code></p><ul><li>–根据文档的id属性查询文档  总和返回文档对象</li></ul></li><li><p><code>Model.findOne(conditions,[projection],[options],[callback])</code></p><ul><li>–查询符合条件的第一个文档  总和返回第一个文档对象</li></ul></li><li><p>conditions  查询的条件</p></li><li><p>projection  投影:需要获取到的字段</p><ul><li>两种方式:{name:1,_id:0}或”name -_id”</li></ul></li><li><p>options     查询选项(skip limit)</p></li><li><p>callback    回调函数,查询结果会通过回调函数返回</p></li></ul><blockquote><p>注意:<span style="color:red">回调函数必须传,如果不传回调函数,不会查询</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>_id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>docs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"60f428da31c79f361cf1c442"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过find()查询的结果,返回的对象,就是Document,文档对象</span>        <span class="token comment">//Document对象时Model的实例</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改</li></ol><ul><li><p><code>Model.update(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateMany(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateOne(conditions,doc,[options],[callback])</code></p></li><li><p>-用来修改一个或多个文档</p></li><li><p>conditions  查询的条件</p></li><li><p>-doc修改后的对象</p></li><li><p>-options 配置参数</p></li><li><p>callback 回调函数</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//修改唐僧的年龄为20</span>Blog<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"唐僧"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>$set<span class="token operator">:</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>删除</li></ol><ul><li><p><code>Model.remove(conditions,[callback])</code></p></li><li><p><code>Model.deleteOne(conditions,[callback])</code></p></li><li><p><code>Model.deleteMany(conditions,[callback])</code></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>补充<code>Model.count(conditions,[callback])</code>—返回的是符合条件的长度</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><ol><li>Document和集合中的文档一一对应,Document是Model的实例通过Model查询的结果都是Document</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建一个Document</span><span class="token keyword">let</span> blo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"金角大王"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token string">"55"</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>    address<span class="token operator">:</span><span class="token string">"洞"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果想要上面的代码生效,需要执行,document的方法<code>Model#save([options],[fn])</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">blo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"保存成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>可以直接操控回调函数</li></ol><ul><li><code>update(update,[options],[callback])</code>–修改对象</li><li><code>remove([callback])</code>–移除对象</li><li><code>get(name)</code> –获取文档中的指定属性值</li><li><code>set(name,value)</code>–设置文档中的指定属性值</li><li><code>id</code>–获取文档的_id属性</li><li><code>toJSON()</code>–转换成一个JSON对象</li><li><code>toObject()</code>—将Document对象转换成一个普通的js对象<ul><li>注意:<span style="color:red">转换成普通的js对象以后,注意所有的Document对象的方法或属性都不能使用</sapn></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 doc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>$set<span class="token operator">:</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        doc<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大师兄再见"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        doc<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"金子"</span><span class="token punctuation">)</span><span class="token comment">//直接可以写成doc.name="金子"</span>        <span class="token keyword">let</span> j<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">let</span> o<span class="token operator">=</span>doc<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">delete</span> o<span class="token punctuation">.</span>address        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>_id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/2021/08/23/mongodb/"/>
      <url>/2021/08/23/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="1初始化数库可以使用-mongod-–dbpath-地址值"><a href="#1初始化数库可以使用-mongod-–dbpath-地址值" class="headerlink" title="1初始化数库可以使用  mongod –dbpath 地址值"></a>1初始化数库可以使用  mongod –dbpath 地址值</h2><h2 id="2基本概念"><a href="#2基本概念" class="headerlink" title="2基本概念"></a>2基本概念</h2><ul><li>数据库(databases)</li><li>集合(collection)</li><li>文档(document)<ul><li>在MongoDB中,数据库和集合都不需要手动创建,当我们创建文档时,如果文档所在的集合或数据库不存在时,会自动创建数据库和集合</li></ul></li></ul><h2 id="3-基础指令"><a href="#3-基础指令" class="headerlink" title="3.基础指令"></a>3.基础指令</h2><ul><li>show dbs&#x2F;databases    —显示当前的所有的数据</li><li>use 数据库名   —进入到指定的数据库中</li><li>db  —db表示的是当前的数据库</li><li>show collections    —显示数据库中所有的集合</li></ul><h2 id="4-数据库的CRUD的操作"><a href="#4-数据库的CRUD的操作" class="headerlink" title="4.数据库的CRUD的操作"></a>4.数据库的CRUD的操作</h2><h3 id="1-向数据库中插入文档"><a href="#1-向数据库中插入文档" class="headerlink" title="(1)向数据库中插入文档"></a>(1)向数据库中插入文档</h3><ul><li>db.&lt;collection&gt;.insert(doc)  —向集合中插入一个文档  &#x2F;insertOne()</li><li>db.&lt;collection&gt;.insert([doc,doc,…])   —向集合中插入多个文档  &#x2F;insertMany()<ul><li><p>如果没有给文档指定的__id属性,则数据库会自动为文档添加__id ,该属性用来作为文档的唯一标识</p></li><li><p>__id我们可以自己指定,如果我们指定了数据库就不会在添加了,如果我们指定__id也必须确保他的唯一性</p><ul><li>–例子;向test数据库中的stus集合中插入一个新的学生对象:{name:”孙悟空”,age:18,gender:”男”};</li></ul> <pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="2-查询"><a href="#2-查询" class="headerlink" title="(2)查询"></a>(2)查询</h3><ol><li>db.&lt;collection&gt;.find()   —查询当前集合中的所有文档<ul><li>find()  用来查询集合中所有符合条件阿德文档</li><li>find()  可以接受一个对象作为条件参数<ul><li>{}  表示查询集合中所有的文档,{属性:值}  查询属性是指定值的文档</li><li>find()返回的是一个数组,可以加索引[]</li></ul></li></ul></li><li>db.&lt;collection&gt;.findOne()<ul><li>用来查询集合中符合条件的第一个文档</li><li>findOne()返回的是第一个文档对象</li><li><code>db.stus.find().count()</code>–查询所有文档的数量</li></ul></li></ol><h3 id="3-修改"><a href="#3-修改" class="headerlink" title="(3)修改"></a>(3)修改</h3><ol><li><p>db.&lt;collection&gt;.update(查询条件,新对象)</p><ul><li><p>update()默认情况下会使用新对象替换旧对象</p></li><li><p>update()默认只会修改第一个</p><ul><li>如果需要修改指定的属性,而不是要替换需要使用”修改操作符”来完成修改</li><li>$set   可以修改文件中的指定属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60efe2cfa164bbc13d327278"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>$set<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span>  address<span class="token operator">:</span><span class="token string">"流沙河"</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  multi<span class="token operator">:</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token comment">//true指修改多个</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>$unset   可以删除文档中的指定属性</p></li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60efe2cfa164bbc13d327278"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> $unset<span class="token operator">:</span><span class="token punctuation">&#123;</span> address<span class="token operator">:</span><span class="token string">"流沙河"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> multi<span class="token operator">:</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token comment">//true指删除多个</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>db.<collection>.updateMany()    —可以修改多个符合条件的文档</li><li>db.<collection>.updateOne()      —修改一个符合条件的文档</li></ul><h3 id="4-删除"><a href="#4-删除" class="headerlink" title="(4)删除"></a>(4)删除</h3><ul><li><p>db.&lt;collection&gt;.remove()</p><ul><li>remove()可以根据条件来删除文档,传递的条件和find()一样</li><li>默认情况下删除符合条件的所有的文档</li><li>第二个参数填true,只删除一个&lt;justone&gt;,例:<code>db.stus.remove(&#123;name:28&#125;,true)</code></li></ul></li><li><p>db.&lt;collection&gt;.drop()   —删除集合</p></li><li><p>db.&lt;collection&gt;.deleteMany()    —删除多个</p></li><li><p>db.&lt;collection&gt;.deleteOne()   —删除一个</p></li><li><p>db.dropDatabase()  —删除数据库</p></li></ul><p>注意:一般数据库中的数据不会删除,所以删除的方法很少调用,一般会在数据中添加一个字段,来表示是否会被删除</p><h2 id="5文档与文档之间的关系"><a href="#5文档与文档之间的关系" class="headerlink" title="5文档与文档之间的关系"></a>5文档与文档之间的关系</h2><h3 id="1-一对一-one-to-one"><a href="#1-一对一-one-to-one" class="headerlink" title="(1)一对一(one to one)"></a>(1)一对一(one to one)</h3><ol><li>夫妻关系:–在MongoDB,可以通过内嵌文档的 形式来体现出一对一的关系</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>wifeAngHusband<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"haungrong"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"guojing"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"panjinlain"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"wudalang"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"zhuzhuxia"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"xiaofeifei"</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-一对多-one-to-many-x2F-多对一-many-to-one"><a href="#2-一对多-one-to-many-x2F-多对一-many-to-one" class="headerlink" title="(2)一对多(one to many)&#x2F;(多对一)(many to one)"></a>(2)一对多(one to many)&#x2F;(多对一)(many to one)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//一对多  用户(users)  订单(orders)</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>   username<span class="token operator">:</span><span class="token string">"swk"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"zbj"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"扑克"</span><span class="token punctuation">,</span><span class="token string">"漫话"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>users_id<span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f14f0ac32c00008c002af5"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//查找用户swk的订单</span><span class="token keyword">let</span> user_id<span class="token operator">=</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"swk"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_iddb<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>users_id<span class="token operator">:</span>user_id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-多对多-many-to-many"><a href="#3-多对多-many-to-many" class="headerlink" title="(3)多对多(many to many)"></a>(3)多对多(many to many)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//多对多</span>db<span class="token punctuation">.</span>teachers<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"hongqigong"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"guixianren"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"huangyaoshi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>teachers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"guojing"</span><span class="token punctuation">,</span>    teach_ids<span class="token operator">:</span>    <span class="token punctuation">[</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afe"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"suiwukong"</span><span class="token punctuation">,</span>    teach_ids<span class="token operator">:</span>    <span class="token punctuation">[</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afe"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afd"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充-sort与投影"><a href="#补充-sort与投影" class="headerlink" title="补充:sort与投影"></a>补充:sort与投影</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//查询文档时,默认情况下时按照_id的值进行排列(升序)</span><span class="token comment">//sort()可以用来指定文档的排序的规则,sort()需要传递一个对象来指定排序规则  1表示升序   -1表示降序</span><span class="token comment">//limit  skip  sort  可以以任意的顺序进行调用</span>db<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>empo<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//在查询时可以在第二个参数的位置来设置查询的结果   投影</span>db<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>enname<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>_id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Mongoose"><a href="#6-Mongoose" class="headerlink" title="6.Mongoose"></a>6.Mongoose</h2><h3 id="1-mongoose为我们提供了几个新的对象"><a href="#1-mongoose为我们提供了几个新的对象" class="headerlink" title="(1)mongoose为我们提供了几个新的对象"></a>(1)mongoose为我们提供了几个新的对象</h3><ul><li>Schema(模式对象)   定义约束了数据库的文档结构</li><li>Model  作为集合中的所有文档的表示,相当于MongoDB数据库中的集合collection</li><li>Document  表示集合中的具体文档,相当于集合中的一个具体文档</li></ul>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的基础</title>
      <link href="/2021/08/22/vue-de-ji-chu/"/>
      <url>/2021/08/22/vue-de-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">vue<span class="token operator">-</span>test├── babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token operator">:</span>babel配置文件  ├── output<span class="token punctuation">.</span>js<span class="token operator">:</span>vue的隐藏配置项        ├── <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json<span class="token operator">:</span>包版本配置文件├── <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">:</span>应用包配置文件     ├── <span class="token keyword">public</span>│   ├── favicon<span class="token punctuation">.</span>ico<span class="token operator">:</span>页签图标  │   └── index<span class="token punctuation">.</span>html<span class="token operator">:</span>主页面   ├── readme<span class="token punctuation">.</span>md<span class="token operator">:</span>应用描述文件        ├── src│   ├── App<span class="token punctuation">.</span>vue<span class="token operator">:</span>汇总所有文件      │   ├── assets<span class="token operator">:</span>存放静态资源     │   │   └── logo<span class="token punctuation">.</span>png │   ├── components<span class="token operator">:</span>存放组件│   │   ├── School<span class="token punctuation">.</span>vue│   │   └── Student<span class="token punctuation">.</span>vue│   └── main<span class="token punctuation">.</span>js<span class="token operator">:</span>入口文件└── vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token operator">:</span>可选择配置项<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ul><li>vue.js与vue.runtime.xxx.js的区别<br>  (1)vue.js是完整版的Vue,包括:核心功能+模板解析器<br>  (2)vue.runtime.xxx.js是运行版的Vue,只包含:核心功能,没有解析器模板</li><li>因为vue.runtime.xxx.js,没有解析器模板,所以不能使用template配置项,需要使用<br>  render函数接收到createElement函数去指定具体内容</li></ul><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><blockquote><p>使用vue inspect &gt; output.js可以看到Vue脚手架的默认配置项<br>使用vue.config.js可以对脚手架进行个性化定制,详情见:<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ul><li><p>1.被用来给元素子组件注册引用信息(id的替代者)</p></li><li><p>2.应用在html标签上获取真实的DOM元素,应用在组件标签上是组件的实例对象(vc)</p></li><li><p>3.使用方式:打标识:</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> 或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>4.获取:this.$refs.xxx</li></ul><h2 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h2><ul><li><p>功能:让组件接收外部传过来的数据</p><ul><li>(1)传递数据:</li></ul> <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>(2)接收数据</p><ul><li>第一种方式(只接收):</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第二种方式(限制类型):</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span>Number<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>第三种方式(限制类型,限制必要性,指定默认值)</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token comment">//类型</span>    required<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//必要性</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">"老王"</span><span class="token comment">//默认值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  备注:props是只读,Vue底层只会监测你对props的修改,如果进行了修改,就会发出警告,若业务需求确实修改需要修改,那么请复制props的内容到data中一份,然后去修改data中的数据</p></li></ul></li></ul><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ul><li><p>功能:可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式:</p><ul><li><p>第一步定义混合:</p> <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#123;    data()&#123;....&#125;,    methods()&#123;...&#125;    .....&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二步使用混入,例如:<blockquote><ul><li>(1)全局混入:Vue.mixin(xxx)</li><li>(2)局部混入: mixins:[xxx]</li></ul></blockquote></li></ul></li></ul></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p>功能用于增强Vue</p></li><li><p>本质:包含install方法的一个对象,install的第一个参数是Vue,第二个参数是插件使用者传递的数据</p></li><li><p>定义插件:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function-variable function">install</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//1.添加全局过滤器</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//2添加全局指令</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//3.配置全局混合</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//4.添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty<span class="token operator">=</span>xxx    使用插件  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ul><li>作用:让样式在局部生效,防止冲突</li><li>写法:</li></ul> <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;style scoped&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>   1).一个组件在用：放在组件自身即可。</p><p>   2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><p>(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间自通信的方式,适用于:子组件&#x3D;&#x3D;&gt;父组件</p></li><li><p>使用场景:A是父组件,B是子组件,B想给A传数据,那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）</p></li><li><p>绑定自定义事件:</p><ol><li>第一种方式,在父组件中:<br> <code>&lt;Demo @demo=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:demo=&quot;test&quot;/&gt;</code></li><li>第二种方式:在父组件中</li></ol> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$ref<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>若想让自定义事件只触发一次,可以使用once修饰符,或$once方法</li></ol></li><li><p>触发自定义事件: <code>this.$emit(&quot;demo&quot;,数据)</code></p></li><li><p>解绑自定义事件:this.$off(“demo”)</p></li><li><p>组件上也可以绑定DOM事件,需要使用native修饰符</p></li><li><p>注意:通过 <code>this.$ref.xxx.$on(&quot;demo&quot;,回调)</code>绑定自定义事件,回调（<span style="color:red">要么配置在methods中,要么用箭头函数</span>）,否则this指向会出问题</p></li></ol><h2 id="全局事件总线-GlobalEventBus"><a href="#全局事件总线-GlobalEventBus" class="headerlink" title="全局事件总线(GlobalEventBus)"></a>全局事件总线(GlobalEventBus)</h2><ol><li><p>一种组件间通信的方式,适用于&lt;span style&#x3D;”color:red”&gt;任意组件间通信</span></p></li><li><p>安装全局事件总线:</p></li></ol>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token operator">...</span>   <span class="token function">beforeCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus<span class="token operator">=</span><span class="token keyword">this</span><span class="token comment">//安装劝酒事件总线,$bus就是当前应用的vm</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>使用事件总线:</p><ol><li>接收数据:A组件想接收数据,则在A组件汇总给$bus绑定自定义事件,事件的<span style="color:red">回调留在A组件自身</span></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>提供数据: <code>this.$bus.$emit(&quot;xxx&quot;,数据)</code></li></ol></li><li><p>最好在beforeDestory钩子中,用$off去解绑&lt;span style&#x3D;”color:red”&gt;当前组件所用到的</span>事件</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于&lt;span style&#x3D;”color:red”&gt;任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src=".D:\web\vue\vue-test\16_src_过度与动画\transition.png" alt="transition"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;hello&quot;&gt; &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;&lt;&#x2F;transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li><li><p>注意:animate.css是一个动画库</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li><p>在vue.config.js中添加如下的配置:</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  proxy<span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p> 说明:</p><ol><li>优点:配置简单,请求资源时直接发给前端(8080)即可</li><li>缺点:不能配置多个代理,不能灵活的控制请求是否走代理.</li><li>工作方式:若是按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li><p>编写vue.config.js的配置的代理规则:</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">moudle<span class="token punctuation">.</span>export<span class="token operator">=</span><span class="token punctuation">&#123;</span>   devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         target<span class="token operator">:</span> <span class="token string">'http://localhost:6000'</span><span class="token punctuation">,</span>         pathRewrite<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"^/api"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//将所有匹配到的/api变成空字符串</span>         ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//用于支持websocket</span>         changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//用于控制请求头中的Host值.是真就是被代理服务器的值,是假就是代理服务器的值</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token string">"/demo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>           target<span class="token operator">:</span><span class="token string">"http://localhost:5001"</span><span class="token punctuation">,</span>           pathRewrite<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"^/demo"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//用于支持websocket</span>           changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//用于控制请求头中的Host值</span>          <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  changeOrign设置为<span class="token boolean">true</span><span class="token punctuation">,</span>服务器找到的请求头中的host为<span class="token operator">:</span>localhost<span class="token operator">:</span><span class="token number">5000</span> changeOrign设置为<span class="token boolean">false</span><span class="token punctuation">,</span>服务器找到的请求头中的host为<span class="token operator">:</span>localhost<span class="token operator">:</span><span class="token number">8000</span> changeOrign默认值为<span class="token boolean">true</span> <span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>说明:</p><ol><li>优点:可以配置多个代理,且可以灵活的控制请求是否走代理</li><li>缺点:配置略微繁琐,请求资源时必须加前缀</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用:让父组件可以向子组件插入html结构,也是一种组件间通信的方式,适用于<span style="color:red">父组件&#x3D;&#x3D;&gt;子组件</span></p></li><li><p>分类:默认插槽,具名插槽,作用域插槽</p></li><li><p>使用方式:</p></li><li><p>默认插槽:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span><span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span><span class="token operator">&lt;</span>template<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span> <span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span> <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽: <span style="color:red">数据在组件自身,但是根据数据生成的结构需要组件的使用者来决定</span>(games数据在Category组件中但是用数据所便利的结构又App决定)  </p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中： <span class="token operator">&lt;</span>Category<span class="token operator">></span> <span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是ul列表 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>ul<span class="token operator">></span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span><span class="token operator">&lt;</span>Category<span class="token operator">></span><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是h4标题 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>      子组件中：  <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>slot <span class="token operator">:</span>games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>       props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">//数据在子组件自身</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>               games<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'红色警戒'</span><span class="token punctuation">,</span><span class="token string">'穿越火线'</span><span class="token punctuation">,</span><span class="token string">'劲舞团'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>  在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>  多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> actions<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> state<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span> store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//响应组件中加的动作</span><span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span> context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//执行加</span> <span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>  state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   sum<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> actions<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</li><li>在<code>store</code>中追加<code>getters</code>配置</li></ol> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters<span class="token operator">=</span><span class="token punctuation">&#123;</span>   <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum<span class="token operator">*</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   ······   getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>组件中读取数据：<code>$store.getters.bigSum</code></li></ol><h3 id="6-四个map方法"><a href="#6-四个map方法" class="headerlink" title="6.四个map方法"></a>6.四个map方法</h3><ol><li><p>mapState方法:用于帮助我们映射state中的数据为计算属性</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapState生成计算属性,从state中获取属性(对象写法)</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token operator">:</span><span class="token string">"sum"</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token string">"school"</span><span class="token punctuation">,</span>subject<span class="token operator">:</span><span class="token string">"subject"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>         <span class="token comment">//借助mapState生成计算属性,从state中获取属性(数组写法)</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"sum"</span><span class="token punctuation">,</span><span class="token string">"school"</span><span class="token punctuation">,</span>subject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapGetters:用于帮助我们映射getters中的数据为计算属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//借助mapGetters生成计算属性,从getters中获取属性(对象写法)</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bigSum<span class="token operator">:</span><span class="token string">"bigSum"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//借助mapGetters生成计算属性,从getters中获取属性(数组写法)</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"bigSum"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>mapMutations方法</strong>： 用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> routes<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>About  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>Home  <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-view&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li><p>路由组件通常存放在<code>pages</code>文件夹中,一般组件通常存放在<code>components</code>文件夹中</p></li><li><p>通过切换,”隐藏”了的路由组件,默认是被销毁的,需要的时候再去挂载</p></li><li><p>每个组件都有自己的<code>$route</code>属性,里面存储自己的路由信息</p></li><li><p>整个应用只有一个router,可以通过组件的<code>router</code>获取到</p></li></ol><h3 id="3-多级路由"><a href="#3-多级路由" class="headerlink" title="3.多级路由"></a>3.多级路由</h3><ol><li>配置路由规则,使用children配置项</li></ol>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">routes<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> About  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home<span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"news"</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写/news</span>        component<span class="token operator">:</span> News      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"message"</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写/message</span>        component<span class="token operator">:</span> Message      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跳转(要写完整路径)</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li>传递参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"`/home/message/detail?id=$&#123;m.id&#125;&amp;tittle=$&#123;m.tittle&#125;`"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数<span class="token punctuation">,</span>to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;path:'/home/message/detail',query:&#123;id:m.id,tittle:m.tittle&#125;&#125;"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>tittle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Demo<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> path<span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>Test<span class="token punctuation">,</span> children<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">'hello'</span> <span class="token comment">//给路由命名</span>   path<span class="token operator">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>Hello<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--简化前，需要写完整的路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/test/welcome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--简化后，直接通过名字跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--简化写法配合传递参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span><span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>, query:&#123;  id:666,  title:<span class="token punctuation">'</span>你好<span class="token punctuation">'</span>&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li>配置路由,声明接收params参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>   path<span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>   component<span class="token operator">:</span> Home<span class="token punctuation">,</span>   children<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"home"</span><span class="token punctuation">,</span>       path<span class="token operator">:</span> <span class="token string">"news"</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> News     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"message"</span><span class="token punctuation">,</span>       path<span class="token operator">:</span> <span class="token string">"message"</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> Message<span class="token punctuation">,</span>       children<span class="token operator">:</span><span class="token punctuation">[</span>         <span class="token punctuation">&#123;</span>           name<span class="token operator">:</span><span class="token string">"detail"</span><span class="token punctuation">,</span>           path<span class="token operator">:</span><span class="token string">"detail/:id/:tittle"</span><span class="token punctuation">,</span><span class="token comment">//使用占位符接收params参数</span>           component<span class="token operator">:</span>Detail         <span class="token punctuation">&#125;</span>       <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>传递参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"path:/home/message/detail/666/你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;path:'/home/message/detail',params:&#123;id:666,tittle:你好&#125;&#125;"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>   特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p><ol start="3"><li>接收参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>tittle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> path<span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>Detail<span class="token punctuation">,</span> <span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span> <span class="token comment">// props:&#123;a:900&#125;</span> <span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件 </span> <span class="token comment">// props:true</span> <span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span> <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    title<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li><p>作用:控制路由器跳转时操作浏览器历史记录的模式</p></li><li><p>浏览器的历史记录有两种编入方式: 分别为<code>push</code>和<code>replace</code>,<code>push</code>是追加历史记录,<code>replace</code>是替换当前历史记录,路由跳转时,默认为<code>push</code></p></li><li><p>如何开启<code>replace</code>模式<code>&lt;router-link replace ......&gt;&lt;/router-link&gt;</code></p></li></ol><h3 id="9-便程式路由导航"><a href="#9-便程式路由导航" class="headerlink" title="9.便程式路由导航"></a>9.便程式路由导航</h3><ol><li><p>作用:不借助<code>&lt;router-link&gt;</code>实现路由跳转,让路由跳转更加灵活</p></li><li><p>基本编码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>tittle<span class="token operator">:</span>m<span class="token punctuation">.</span>tittle<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>tittle<span class="token operator">:</span>m<span class="token punctuation">.</span>tittle<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//前进</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//后退</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用:让不展示的路由组件保持挂载,不被销毁</p></li><li><p>具体编码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"News"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="11-两个新的生命钩子"><a href="#11-两个新的生命钩子" class="headerlink" title="11.两个新的生命钩子"></a>11.两个新的生命钩子</h3><ol><li><p>作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态</p></li><li><p>具体名字:</p><ol><li><code>activated</code>路由组件被激活时触发  </li><li><code>deactivated</code>路由组件失活时触发</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用:对路由进行权限控制</p></li><li><p>分类:全局守卫,独享守卫,组件内守卫</p></li><li><p>全局守卫:</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用</span> router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"前置路由守卫"</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要权限</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/news"</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/message"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"waiguoyu"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span> <span class="token parameter">route</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span>title<span class="token operator">=</span>route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>tittle <span class="token operator">||</span> <span class="token string">"🦁"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>独享守卫</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要权限</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/news"</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/message"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"waiguoyu"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>组件内守卫:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//进入守卫,通过路由规则,进入该组件</span><span class="token function">beforeRouterEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//离开守卫,通过路由规则,离开该组件</span><span class="token function">beforeRouterLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
